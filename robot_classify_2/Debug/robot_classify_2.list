
robot_classify_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c5c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004e40  08004e40  00005e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  000060ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004f98  08004f98  000060ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f98  08004f98  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00005f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004fa0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200000ac  0800504c  000060ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800504c  000064c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc00  00000000  00000000  000060d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df6  00000000  00000000  00012cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00014ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a18  00000000  00000000  000157b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a745  00000000  00000000  000161d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ece0  00000000  00000000  00030915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a7fc  00000000  00000000  0003f5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000d9e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ddbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000ac 	.word	0x200000ac
 8000200:	00000000 	.word	0x00000000
 8000204:	08004e28 	.word	0x08004e28

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b0 	.word	0x200000b0
 8000220:	08004e28 	.word	0x08004e28

08000224 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b29a      	uxth	r2, r3
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	68b9      	ldr	r1, [r7, #8]
 800023a:	4804      	ldr	r0, [pc, #16]	@ (800024c <_write+0x28>)
 800023c:	f003 f822 	bl	8003284 <HAL_UART_Transmit>
	return len;
 8000240:	687b      	ldr	r3, [r7, #4]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000158 	.word	0x20000158

08000250 <HAL_TIM_PeriodElapsedCallback>:
int fputc(int ch, FILE * f) {
  HAL_UART_Transmit( &huart1, (uint8_t * ) &ch, 1, UART_Delay);
  return ch;
}
#endif
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && flag_start_timer_x) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000260:	d17c      	bne.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000262:	4b87      	ldr	r3, [pc, #540]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d078      	beq.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>
		if (!flag_at_position_x) {
 800026a:	4b86      	ldr	r3, [pc, #536]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f083 0301 	eor.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d02b      	beq.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x80>
			current_pulse_x++;
 8000278:	4b83      	ldr	r3, [pc, #524]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a82      	ldr	r2, [pc, #520]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000280:	6013      	str	r3, [r2, #0]
			if (current_pulse_x >= arr_pulse[index_array]) {
 8000282:	4b82      	ldr	r3, [pc, #520]	@ (800048c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a82      	ldr	r2, [pc, #520]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4b7e      	ldr	r3, [pc, #504]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	dc1d      	bgt.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x80>
				__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 0);
 8000294:	4b7f      	ldr	r3, [pc, #508]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2200      	movs	r2, #0
 800029a:	639a      	str	r2, [r3, #56]	@ 0x38
				flag_at_position_x = true;
 800029c:	4b79      	ldr	r3, [pc, #484]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
				flag_return_home_x = true;
 80002a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
				state_dir = HAL_GPIO_ReadPin(DIRX_GPIO_Port, DIRX_Pin);
 80002a8:	2102      	movs	r1, #2
 80002aa:	487c      	ldr	r0, [pc, #496]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002ac:	f001 fb6c 	bl	8001988 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b7a      	ldr	r3, [pc, #488]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80002b6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, !state_dir);
 80002b8:	4b79      	ldr	r3, [pc, #484]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	461a      	mov	r2, r3
 80002c8:	2102      	movs	r1, #2
 80002ca:	4874      	ldr	r0, [pc, #464]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002cc:	f001 fb73 	bl	80019b6 <HAL_GPIO_WritePin>
			}
		}
		if (flag_return_home_x) {
 80002d0:	4b71      	ldr	r3, [pc, #452]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d041      	beq.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>
			if (count_wait_drop_object < time_to_wait_axis_x) {
 80002d8:	4b72      	ldr	r3, [pc, #456]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	da05      	bge.n	80002f0 <HAL_TIM_PeriodElapsedCallback+0xa0>
				count_wait_drop_object++;
 80002e4:	4b6f      	ldr	r3, [pc, #444]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	4a6e      	ldr	r2, [pc, #440]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002ec:	6013      	str	r3, [r2, #0]
 80002ee:	e035      	b.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>
			} else if (count_wait_drop_object >= time_to_wait_axis_x) {
 80002f0:	4b6c      	ldr	r3, [pc, #432]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	db2f      	blt.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>
				__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 80002fc:	4b65      	ldr	r3, [pc, #404]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2228      	movs	r2, #40	@ 0x28
 8000302:	639a      	str	r2, [r3, #56]	@ 0x38
				current_pulse_x--;
 8000304:	4b60      	ldr	r3, [pc, #384]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a5f      	ldr	r2, [pc, #380]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800030c:	6013      	str	r3, [r2, #0]
				if (current_pulse_x <= 0) {
 800030e:	4b5e      	ldr	r3, [pc, #376]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dc22      	bgt.n	800035c <HAL_TIM_PeriodElapsedCallback+0x10c>

					__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 0);
 8000316:	4b5f      	ldr	r3, [pc, #380]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2200      	movs	r2, #0
 800031c:	639a      	str	r2, [r3, #56]	@ 0x38
					flag_return_home_x = false;
 800031e:	4b5e      	ldr	r3, [pc, #376]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
					flag_start_timer_x = false;
 8000324:	4b56      	ldr	r3, [pc, #344]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
					current_pulse_x = 0;
 800032a:	4b57      	ldr	r3, [pc, #348]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
					index_current_command++;
 8000330:	4b5e      	ldr	r3, [pc, #376]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a5d      	ldr	r2, [pc, #372]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000338:	6013      	str	r3, [r2, #0]
					flag_finish_task = true;
 800033a:	4b5d      	ldr	r3, [pc, #372]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
					count_wait_drop_object = 0;
 8000340:	4b58      	ldr	r3, [pc, #352]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
					flag_capture_object = false;
 8000346:	4b5b      	ldr	r3, [pc, #364]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port,
 800034c:	2201      	movs	r2, #1
 800034e:	2180      	movs	r1, #128	@ 0x80
 8000350:	4859      	ldr	r0, [pc, #356]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000352:	f001 fb30 	bl	80019b6 <HAL_GPIO_WritePin>
					STATE_CONVEYOR_Pin, GPIO_PIN_SET);
					printf("Drop object successfully\n");
 8000356:	4859      	ldr	r0, [pc, #356]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000358:	f003 fee6 	bl	8004128 <puts>
				}
			}
		}
	}
	if (htim->Instance == TIM3 && flag_start_timer_y) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a57      	ldr	r2, [pc, #348]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000362:	4293      	cmp	r3, r2
 8000364:	f040 8088 	bne.w	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
 8000368:	4b56      	ldr	r3, [pc, #344]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	f000 8083 	beq.w	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
		if (!flag_at_position_y) {
 8000372:	4b55      	ldr	r3, [pc, #340]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f083 0301 	eor.w	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d028      	beq.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x182>
			current_pulse_y++;
 8000380:	4b52      	ldr	r3, [pc, #328]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	4a51      	ldr	r2, [pc, #324]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000388:	6013      	str	r3, [r2, #0]
			if (current_pulse_y >= pulse_to_grab_object) {
 800038a:	4b50      	ldr	r3, [pc, #320]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b50      	ldr	r3, [pc, #320]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	db1d      	blt.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x182>
				__HAL_TIM_SET_COMPARE(&htim3, Y_AXIS, 0);
 8000396:	4b4f      	ldr	r3, [pc, #316]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	635a      	str	r2, [r3, #52]	@ 0x34
				flag_at_position_y = true;
 800039e:	4b4a      	ldr	r3, [pc, #296]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
				flag_return_home_y = true;
 80003a4:	4b4c      	ldr	r3, [pc, #304]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
				state_dir = HAL_GPIO_ReadPin(DIRY_GPIO_Port, DIRY_Pin);
 80003aa:	2101      	movs	r1, #1
 80003ac:	483b      	ldr	r0, [pc, #236]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80003ae:	f001 faeb 	bl	8001988 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b3a      	ldr	r3, [pc, #232]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80003b8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, !state_dir);
 80003ba:	4b39      	ldr	r3, [pc, #228]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	2101      	movs	r1, #1
 80003cc:	4833      	ldr	r0, [pc, #204]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80003ce:	f001 faf2 	bl	80019b6 <HAL_GPIO_WritePin>
			}
		}
		if (flag_return_home_y) {
 80003d2:	4b41      	ldr	r3, [pc, #260]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d04e      	beq.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
			if (count_wait_vaccum_object < time_to_wait_axis_y) {
 80003da:	4b40      	ldr	r3, [pc, #256]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b40      	ldr	r3, [pc, #256]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	da05      	bge.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				count_wait_vaccum_object++;
 80003e6:	4b3d      	ldr	r3, [pc, #244]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	4a3b      	ldr	r2, [pc, #236]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003ee:	6013      	str	r3, [r2, #0]
					printf("Grab object successfully\n");
				}
			}
		}
	}
}
 80003f0:	e042      	b.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
			} else if (count_wait_vaccum_object >= time_to_wait_axis_y) {
 80003f2:	4b3a      	ldr	r3, [pc, #232]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b3a      	ldr	r3, [pc, #232]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	db3c      	blt.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
				__HAL_TIM_SET_COMPARE(&htim3, Y_AXIS, 90);
 80003fe:	4b35      	ldr	r3, [pc, #212]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	225a      	movs	r2, #90	@ 0x5a
 8000404:	635a      	str	r2, [r3, #52]	@ 0x34
				current_pulse_y--;
 8000406:	4b31      	ldr	r3, [pc, #196]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a2f      	ldr	r2, [pc, #188]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800040e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GRAB_OBJECT_GPIO_Port, GRAB_OBJECT_Pin,
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000416:	4828      	ldr	r0, [pc, #160]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000418:	f001 facd 	bl	80019b6 <HAL_GPIO_WritePin>
				if (current_pulse_y <= 0) {
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	dc29      	bgt.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x228>
					__HAL_TIM_SET_COMPARE(&htim3, Y_AXIS, 0);
 8000424:	4b2b      	ldr	r3, [pc, #172]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2200      	movs	r2, #0
 800042a:	635a      	str	r2, [r3, #52]	@ 0x34
					flag_return_home_y = false;
 800042c:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
					current_pulse_y = 0;
 8000432:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
					count_wait_vaccum_object = 0;
 8000438:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
					flag_start_timer_y = false;
 800043e:	4b21      	ldr	r3, [pc, #132]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
					uart_command[index_uart_command] = robot_move_command;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a27      	ldr	r2, [pc, #156]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800044a:	6812      	ldr	r2, [r2, #0]
 800044c:	4927      	ldr	r1, [pc, #156]	@ (80004ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800044e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					index_uart_command++;
 8000452:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a22      	ldr	r2, [pc, #136]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800045a:	6013      	str	r3, [r2, #0]
					index_current_command++;
 800045c:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000464:	6013      	str	r3, [r2, #0]
					flag_receive_move_robot = false;
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
					flag_finish_task = true;
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
					printf("Grab object successfully\n");
 8000472:	4820      	ldr	r0, [pc, #128]	@ (80004f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000474:	f003 fe58 	bl	8004128 <puts>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200001c3 	.word	0x200001c3
 8000484:	200001c2 	.word	0x200001c2
 8000488:	200001a0 	.word	0x200001a0
 800048c:	200001a8 	.word	0x200001a8
 8000490:	20000018 	.word	0x20000018
 8000494:	200000c8 	.word	0x200000c8
 8000498:	200001c0 	.word	0x200001c0
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	200001ac 	.word	0x200001ac
 80004a4:	20000368 	.word	0x20000368
 80004a8:	2000003c 	.word	0x2000003c
 80004ac:	20000364 	.word	0x20000364
 80004b0:	20000014 	.word	0x20000014
 80004b4:	200001c5 	.word	0x200001c5
 80004b8:	40011000 	.word	0x40011000
 80004bc:	08004ea0 	.word	0x08004ea0
 80004c0:	40000400 	.word	0x40000400
 80004c4:	200001c4 	.word	0x200001c4
 80004c8:	200001bf 	.word	0x200001bf
 80004cc:	200001a4 	.word	0x200001a4
 80004d0:	20000028 	.word	0x20000028
 80004d4:	20000110 	.word	0x20000110
 80004d8:	200001c1 	.word	0x200001c1
 80004dc:	200001c8 	.word	0x200001c8
 80004e0:	20000040 	.word	0x20000040
 80004e4:	20000360 	.word	0x20000360
 80004e8:	2000035c 	.word	0x2000035c
 80004ec:	200001cc 	.word	0x200001cc
 80004f0:	200001c6 	.word	0x200001c6
 80004f4:	08004ebc 	.word	0x08004ebc

080004f8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SIG_STOP_CONVEYOR_Pin && flag_capture_object == false
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b20      	cmp	r3, #32
 8000506:	d12c      	bne.n	8000562 <HAL_GPIO_EXTI_Callback+0x6a>
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <HAL_GPIO_EXTI_Callback+0x74>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f083 0301 	eor.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d025      	beq.n	8000562 <HAL_GPIO_EXTI_Callback+0x6a>
			&& flag_receive_move_robot == true) {
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <HAL_GPIO_EXTI_Callback+0x78>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d021      	beq.n	8000562 <HAL_GPIO_EXTI_Callback+0x6a>
		HAL_Delay(300);
 800051e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000522:	f000 fe29 	bl	8001178 <HAL_Delay>
		uart_command[index_uart_command] = grab_object;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <HAL_GPIO_EXTI_Callback+0x80>)
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4913      	ldr	r1, [pc, #76]	@ (800057c <HAL_GPIO_EXTI_Callback+0x84>)
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//printf("uart_command: %s\n", uart_command[index_uart_command]);
		index_uart_command++;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x7c>)
 800053c:	6013      	str	r3, [r2, #0]
		//printf("This is interrupt\n");
		HAL_Delay(600);
 800053e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000542:	f000 fe19 	bl	8001178 <HAL_Delay>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 8000546:	2200      	movs	r2, #0
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	480d      	ldr	r0, [pc, #52]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x88>)
 800054c:	f001 fa33 	bl	80019b6 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		flag_capture_object = true;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <HAL_GPIO_EXTI_Callback+0x74>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
		EXTI->PR = SIG_STOP_CONVEYOR_Pin;
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000558:	2220      	movs	r2, #32
 800055a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIG_STOP_CONVEYOR_Pin);
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <HAL_GPIO_EXTI_Callback+0x8c>)
 800055e:	2220      	movs	r2, #32
 8000560:	615a      	str	r2, [r3, #20]
	}
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200001c5 	.word	0x200001c5
 8000570:	200001c6 	.word	0x200001c6
 8000574:	20000360 	.word	0x20000360
 8000578:	20000010 	.word	0x20000010
 800057c:	200001cc 	.word	0x200001cc
 8000580:	40011000 	.word	0x40011000
 8000584:	40010400 	.word	0x40010400

08000588 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1a      	ldr	r2, [pc, #104]	@ (8000600 <HAL_UART_RxCpltCallback+0x78>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d12e      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x70>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length_string);
 800059a:	220f      	movs	r2, #15
 800059c:	4919      	ldr	r1, [pc, #100]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 800059e:	481a      	ldr	r0, [pc, #104]	@ (8000608 <HAL_UART_RxCpltCallback+0x80>)
 80005a0:	f002 fef3 	bl	800338a <HAL_UART_Receive_IT>
		printf("Receive %s\n", rxByte);
 80005a4:	4917      	ldr	r1, [pc, #92]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 80005a6:	4819      	ldr	r0, [pc, #100]	@ (800060c <HAL_UART_RxCpltCallback+0x84>)
 80005a8:	f003 fd56 	bl	8004058 <iprintf>
		if (!strncmp(rxByte, position2, length_string)
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_UART_RxCpltCallback+0x88>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	220f      	movs	r2, #15
 80005b2:	4619      	mov	r1, r3
 80005b4:	4813      	ldr	r0, [pc, #76]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 80005b6:	f003 fe9f 	bl	80042f8 <strncmp>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d009      	beq.n	80005d4 <HAL_UART_RxCpltCallback+0x4c>
				|| !strncmp(rxByte, position3, length_string)) {
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <HAL_UART_RxCpltCallback+0x8c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	220f      	movs	r2, #15
 80005c6:	4619      	mov	r1, r3
 80005c8:	480e      	ldr	r0, [pc, #56]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 80005ca:	f003 fe95 	bl	80042f8 <strncmp>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d106      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0x5a>
			robot_move_command = rxByte;
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <HAL_UART_RxCpltCallback+0x90>)
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 80005d8:	601a      	str	r2, [r3, #0]
			flag_receive_move_robot = true;
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
			return;
 80005e0:	e00a      	b.n	80005f8 <HAL_UART_RxCpltCallback+0x70>
		}
		uart_command[index_uart_command] = rxByte;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <HAL_UART_RxCpltCallback+0x9c>)
 80005e8:	4906      	ldr	r1, [pc, #24]	@ (8000604 <HAL_UART_RxCpltCallback+0x7c>)
 80005ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		index_uart_command++;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005f6:	6013      	str	r3, [r2, #0]
	}
}
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40013800 	.word	0x40013800
 8000604:	200001b0 	.word	0x200001b0
 8000608:	20000158 	.word	0x20000158
 800060c:	08004ed8 	.word	0x08004ed8
 8000610:	20000004 	.word	0x20000004
 8000614:	20000008 	.word	0x20000008
 8000618:	2000035c 	.word	0x2000035c
 800061c:	200001c6 	.word	0x200001c6
 8000620:	20000360 	.word	0x20000360
 8000624:	200001cc 	.word	0x200001cc

08000628 <handle_command>:
void handle_command() {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if (!strncmp(uart_command[index_current_command], stop,
 800062c:	4b74      	ldr	r3, [pc, #464]	@ (8000800 <handle_command+0x1d8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a74      	ldr	r2, [pc, #464]	@ (8000804 <handle_command+0x1dc>)
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	4a74      	ldr	r2, [pc, #464]	@ (8000808 <handle_command+0x1e0>)
 8000638:	6811      	ldr	r1, [r2, #0]
 800063a:	220f      	movs	r2, #15
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fe5b 	bl	80042f8 <strncmp>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d110      	bne.n	800066a <handle_command+0x42>
	length_string)) {
		printf("Robot doing: Stop conveyor\n");
 8000648:	4870      	ldr	r0, [pc, #448]	@ (800080c <handle_command+0x1e4>)
 800064a:	f003 fd6d 	bl	8004128 <puts>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 800064e:	2200      	movs	r2, #0
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	486f      	ldr	r0, [pc, #444]	@ (8000810 <handle_command+0x1e8>)
 8000654:	f001 f9af 	bl	80019b6 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		flag_finish_task = true;
 8000658:	4b6e      	ldr	r3, [pc, #440]	@ (8000814 <handle_command+0x1ec>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
		index_current_command++;
 800065e:	4b68      	ldr	r3, [pc, #416]	@ (8000800 <handle_command+0x1d8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a66      	ldr	r2, [pc, #408]	@ (8000800 <handle_command+0x1d8>)
 8000666:	6013      	str	r3, [r2, #0]
		return;
 8000668:	e0c8      	b.n	80007fc <handle_command+0x1d4>
	} else if (!strncmp(uart_command[index_current_command], grab_object,
 800066a:	4b65      	ldr	r3, [pc, #404]	@ (8000800 <handle_command+0x1d8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a65      	ldr	r2, [pc, #404]	@ (8000804 <handle_command+0x1dc>)
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	4a68      	ldr	r2, [pc, #416]	@ (8000818 <handle_command+0x1f0>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	220f      	movs	r2, #15
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fe3c 	bl	80042f8 <strncmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d12a      	bne.n	80006dc <handle_command+0xb4>
	length_string)) {
		printf("Robot doing: Grab object\n");
 8000686:	4865      	ldr	r0, [pc, #404]	@ (800081c <handle_command+0x1f4>)
 8000688:	f003 fd4e 	bl	8004128 <puts>
		flag_at_position_y = false;
 800068c:	4b64      	ldr	r3, [pc, #400]	@ (8000820 <handle_command+0x1f8>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		flag_return_home_y = false;
 8000692:	4b64      	ldr	r3, [pc, #400]	@ (8000824 <handle_command+0x1fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
		flag_start_timer_y = true;
 8000698:	4b63      	ldr	r3, [pc, #396]	@ (8000828 <handle_command+0x200>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	485b      	ldr	r0, [pc, #364]	@ (8000810 <handle_command+0x1e8>)
 80006a4:	f001 f987 	bl	80019b6 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GRAB_OBJECT_GPIO_Port, GRAB_OBJECT_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ae:	4858      	ldr	r0, [pc, #352]	@ (8000810 <handle_command+0x1e8>)
 80006b0:	f001 f981 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, CW);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	485c      	ldr	r0, [pc, #368]	@ (800082c <handle_command+0x204>)
 80006ba:	f001 f97c 	bl	80019b6 <HAL_GPIO_WritePin>
		flag_finish_task = false;
 80006be:	4b55      	ldr	r3, [pc, #340]	@ (8000814 <handle_command+0x1ec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 80006c4:	485a      	ldr	r0, [pc, #360]	@ (8000830 <handle_command+0x208>)
 80006c6:	f001 fe07 	bl	80022d8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim3, Y_AXIS);
 80006ca:	2100      	movs	r1, #0
 80006cc:	4858      	ldr	r0, [pc, #352]	@ (8000830 <handle_command+0x208>)
 80006ce:	f001 febb 	bl	8002448 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, Y_AXIS, 90);
 80006d2:	4b57      	ldr	r3, [pc, #348]	@ (8000830 <handle_command+0x208>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	225a      	movs	r2, #90	@ 0x5a
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006da:	e08f      	b.n	80007fc <handle_command+0x1d4>
	} else if (!strncmp(uart_command[index_current_command], start,
 80006dc:	4b48      	ldr	r3, [pc, #288]	@ (8000800 <handle_command+0x1d8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a48      	ldr	r2, [pc, #288]	@ (8000804 <handle_command+0x1dc>)
 80006e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e6:	4a53      	ldr	r2, [pc, #332]	@ (8000834 <handle_command+0x20c>)
 80006e8:	6811      	ldr	r1, [r2, #0]
 80006ea:	220f      	movs	r2, #15
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fe03 	bl	80042f8 <strncmp>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d110      	bne.n	800071a <handle_command+0xf2>
	length_string)) {
		printf("Robot doing: Start conveyor\n");
 80006f8:	484f      	ldr	r0, [pc, #316]	@ (8000838 <handle_command+0x210>)
 80006fa:	f003 fd15 	bl	8004128 <puts>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 80006fe:	2201      	movs	r2, #1
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	4843      	ldr	r0, [pc, #268]	@ (8000810 <handle_command+0x1e8>)
 8000704:	f001 f957 	bl	80019b6 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		flag_finish_task = true;
 8000708:	4b42      	ldr	r3, [pc, #264]	@ (8000814 <handle_command+0x1ec>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
		index_current_command++;
 800070e:	4b3c      	ldr	r3, [pc, #240]	@ (8000800 <handle_command+0x1d8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a3a      	ldr	r2, [pc, #232]	@ (8000800 <handle_command+0x1d8>)
 8000716:	6013      	str	r3, [r2, #0]
		return;
 8000718:	e070      	b.n	80007fc <handle_command+0x1d4>
	} else if (!strncmp(uart_command[index_current_command], position2,
 800071a:	4b39      	ldr	r3, [pc, #228]	@ (8000800 <handle_command+0x1d8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a39      	ldr	r2, [pc, #228]	@ (8000804 <handle_command+0x1dc>)
 8000720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000724:	4a45      	ldr	r2, [pc, #276]	@ (800083c <handle_command+0x214>)
 8000726:	6811      	ldr	r1, [r2, #0]
 8000728:	220f      	movs	r2, #15
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fde4 	bl	80042f8 <strncmp>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d12a      	bne.n	800078c <handle_command+0x164>
	length_string)) {
		printf("Move position 2\n");
 8000736:	4842      	ldr	r0, [pc, #264]	@ (8000840 <handle_command+0x218>)
 8000738:	f003 fcf6 	bl	8004128 <puts>
		index_array = MODE_POSITION_1;
 800073c:	4b41      	ldr	r3, [pc, #260]	@ (8000844 <handle_command+0x21c>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, CCW);
 8000742:	2201      	movs	r2, #1
 8000744:	2102      	movs	r1, #2
 8000746:	4839      	ldr	r0, [pc, #228]	@ (800082c <handle_command+0x204>)
 8000748:	f001 f935 	bl	80019b6 <HAL_GPIO_WritePin>
		flag_at_position_x = false;
 800074c:	4b3e      	ldr	r3, [pc, #248]	@ (8000848 <handle_command+0x220>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		flag_return_home_x = false;
 8000752:	4b3e      	ldr	r3, [pc, #248]	@ (800084c <handle_command+0x224>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
		flag_start_timer_x = true;
 8000758:	4b3d      	ldr	r3, [pc, #244]	@ (8000850 <handle_command+0x228>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
		flag_finish_task = false;
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <handle_command+0x1ec>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
		time_to_wait_axis_x = time_waiting_drop[MODE_POSITION_1];
 8000764:	4b3b      	ldr	r3, [pc, #236]	@ (8000854 <handle_command+0x22c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a3b      	ldr	r2, [pc, #236]	@ (8000858 <handle_command+0x230>)
 800076a:	6013      	str	r3, [r2, #0]
		time_to_wait_axis_y = time_waiting_vaccum[MODE_POSITION_1];
 800076c:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <handle_command+0x234>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a3b      	ldr	r2, [pc, #236]	@ (8000860 <handle_command+0x238>)
 8000772:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8000774:	483b      	ldr	r0, [pc, #236]	@ (8000864 <handle_command+0x23c>)
 8000776:	f001 fdaf 	bl	80022d8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, X_AXIS);
 800077a:	2104      	movs	r1, #4
 800077c:	4839      	ldr	r0, [pc, #228]	@ (8000864 <handle_command+0x23c>)
 800077e:	f001 fe63 	bl	8002448 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 8000782:	4b38      	ldr	r3, [pc, #224]	@ (8000864 <handle_command+0x23c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2228      	movs	r2, #40	@ 0x28
 8000788:	639a      	str	r2, [r3, #56]	@ 0x38
 800078a:	e037      	b.n	80007fc <handle_command+0x1d4>
	} else if (!strncmp(uart_command[index_current_command], position3,
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <handle_command+0x1d8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <handle_command+0x1dc>)
 8000792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000796:	4a34      	ldr	r2, [pc, #208]	@ (8000868 <handle_command+0x240>)
 8000798:	6811      	ldr	r1, [r2, #0]
 800079a:	220f      	movs	r2, #15
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fdab 	bl	80042f8 <strncmp>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d129      	bne.n	80007fc <handle_command+0x1d4>
	length_string)) {
		printf("Move position 3\n");
 80007a8:	4830      	ldr	r0, [pc, #192]	@ (800086c <handle_command+0x244>)
 80007aa:	f003 fcbd 	bl	8004128 <puts>
		index_array = MODE_POSITION_3;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <handle_command+0x21c>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, CCW);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2102      	movs	r1, #2
 80007b8:	481c      	ldr	r0, [pc, #112]	@ (800082c <handle_command+0x204>)
 80007ba:	f001 f8fc 	bl	80019b6 <HAL_GPIO_WritePin>
		flag_at_position_x = false;
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <handle_command+0x220>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		flag_return_home_x = false;
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <handle_command+0x224>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
		flag_start_timer_x = true;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <handle_command+0x228>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		flag_finish_task = false;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <handle_command+0x1ec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		time_to_wait_axis_x = time_waiting_drop[MODE_POSITION_2];
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <handle_command+0x22c>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <handle_command+0x230>)
 80007dc:	6013      	str	r3, [r2, #0]
		time_to_wait_axis_y = time_waiting_vaccum[MODE_POSITION_2];
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <handle_command+0x234>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000860 <handle_command+0x238>)
 80007e4:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80007e6:	481f      	ldr	r0, [pc, #124]	@ (8000864 <handle_command+0x23c>)
 80007e8:	f001 fd76 	bl	80022d8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, X_AXIS);
 80007ec:	2104      	movs	r1, #4
 80007ee:	481d      	ldr	r0, [pc, #116]	@ (8000864 <handle_command+0x23c>)
 80007f0:	f001 fe2a 	bl	8002448 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <handle_command+0x23c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2228      	movs	r2, #40	@ 0x28
 80007fa:	639a      	str	r2, [r3, #56]	@ 0x38
	}

}
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000364 	.word	0x20000364
 8000804:	200001cc 	.word	0x200001cc
 8000808:	20000000 	.word	0x20000000
 800080c:	08004ee4 	.word	0x08004ee4
 8000810:	40011000 	.word	0x40011000
 8000814:	20000014 	.word	0x20000014
 8000818:	20000010 	.word	0x20000010
 800081c:	08004f00 	.word	0x08004f00
 8000820:	200001bf 	.word	0x200001bf
 8000824:	200001c1 	.word	0x200001c1
 8000828:	200001c4 	.word	0x200001c4
 800082c:	40010c00 	.word	0x40010c00
 8000830:	20000110 	.word	0x20000110
 8000834:	2000000c 	.word	0x2000000c
 8000838:	08004f1c 	.word	0x08004f1c
 800083c:	20000004 	.word	0x20000004
 8000840:	08004e50 	.word	0x08004e50
 8000844:	200001a8 	.word	0x200001a8
 8000848:	200001c2 	.word	0x200001c2
 800084c:	200001c0 	.word	0x200001c0
 8000850:	200001c3 	.word	0x200001c3
 8000854:	2000002c 	.word	0x2000002c
 8000858:	2000003c 	.word	0x2000003c
 800085c:	20000034 	.word	0x20000034
 8000860:	20000040 	.word	0x20000040
 8000864:	200000c8 	.word	0x200000c8
 8000868:	20000008 	.word	0x20000008
 800086c:	08004e60 	.word	0x08004e60

08000870 <control_robot>:
void control_robot() {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	if (flag_finish_task) {
 8000874:	4b03      	ldr	r3, [pc, #12]	@ (8000884 <control_robot+0x14>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <control_robot+0x10>
		handle_command();
 800087c:	f7ff fed4 	bl	8000628 <handle_command>
	}
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000014 	.word	0x20000014

08000888 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088c:	f000 fc12 	bl	80010b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000890:	f000 f814 	bl	80008bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000894:	f000 f960 	bl	8000b58 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000898:	f000 f934 	bl	8000b04 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800089c:	f000 f848 	bl	8000930 <MX_TIM2_Init>
	MX_TIM3_Init();
 80008a0:	f000 f8ba 	bl	8000a18 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length_string);
 80008a4:	220f      	movs	r2, #15
 80008a6:	4903      	ldr	r1, [pc, #12]	@ (80008b4 <main+0x2c>)
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <main+0x30>)
 80008aa:	f002 fd6e 	bl	800338a <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		control_robot();
 80008ae:	f7ff ffdf 	bl	8000870 <control_robot>
 80008b2:	e7fc      	b.n	80008ae <main+0x26>
 80008b4:	200001b0 	.word	0x200001b0
 80008b8:	20000158 	.word	0x20000158

080008bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	@ 0x40
 80008c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	@ 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fd0c 	bl	80042e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f891 	bl	8001a18 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x44>
		Error_Handler();
 80008fc:	f000 f9bc 	bl	8000c78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f001 faff 	bl	8001f1c <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x6c>
		Error_Handler();
 8000924:	f000 f9a8 	bl	8000c78 <Error_Handler>
	}
}
 8000928:	bf00      	nop
 800092a:	3740      	adds	r7, #64	@ 0x40
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	@ 0x38
 8000934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000936:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000960:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000966:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 800096a:	224f      	movs	r2, #79	@ 0x4f
 800096c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 50 - 1;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000976:	2231      	movs	r2, #49	@ 0x31
 8000978:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000986:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000988:	f001 fc56 	bl	8002238 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x66>
		Error_Handler();
 8000992:	f000 f971 	bl	8000c78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800099c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 80009a4:	f001 ffd4 	bl	8002950 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0x82>
		Error_Handler();
 80009ae:	f000 f963 	bl	8000c78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009b2:	4818      	ldr	r0, [pc, #96]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 80009b4:	f001 fcf0 	bl	8002398 <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x92>
		Error_Handler();
 80009be:	f000 f95b 	bl	8000c78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4619      	mov	r1, r3
 80009d0:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 80009d2:	f002 fb89 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80009dc:	f000 f94c 	bl	8000c78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 20 - 1;
 80009e4:	2313      	movs	r3, #19
 80009e6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2204      	movs	r2, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 80009f8:	f001 fee8 	bl	80027cc <HAL_TIM_PWM_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000a02:	f000 f939 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a06:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <MX_TIM2_Init+0xe4>)
 8000a08:	f000 f9ae 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000a0c:	bf00      	nop
 8000a0e:	3738      	adds	r7, #56	@ 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000c8 	.word	0x200000c8

08000a18 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b00 <MX_TIM3_Init+0xe8>)
 8000a4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80 - 1;
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a50:	224f      	movs	r2, #79	@ 0x4f
 8000a52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 200 - 1;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a5c:	22c7      	movs	r2, #199	@ 0xc7
 8000a5e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000a6c:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a6e:	f001 fbe3 	bl	8002238 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x64>
		Error_Handler();
 8000a78:	f000 f8fe 	bl	8000c78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a86:	4619      	mov	r1, r3
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a8a:	f001 ff61 	bl	8002950 <HAL_TIM_ConfigClockSource>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM3_Init+0x80>
		Error_Handler();
 8000a94:	f000 f8f0 	bl	8000c78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000a9a:	f001 fc7d 	bl	8002398 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x90>
		Error_Handler();
 8000aa4:	f000 f8e8 	bl	8000c78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000ab8:	f002 fb16 	bl	80030e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8000ac2:	f000 f8d9 	bl	8000c78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	@ 0x60
 8000ac8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 8000aca:	2364      	movs	r3, #100	@ 0x64
 8000acc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000ade:	f001 fe75 	bl	80027cc <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000ae8:	f000 f8c6 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM3_Init+0xe4>)
 8000aee:	f000 f93b 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3738      	adds	r7, #56	@ 0x38
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000110 	.word	0x20000110
 8000b00:	40000400 	.word	0x40000400

08000b04 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_USART1_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f002 fb52 	bl	80031e4 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b46:	f000 f897 	bl	8000c78 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000158 	.word	0x20000158
 8000b54:	40013800 	.word	0x40013800

08000b58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b84:	4b38      	ldr	r3, [pc, #224]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a37      	ldr	r2, [pc, #220]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0320 	and.w	r3, r3, #32
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a31      	ldr	r2, [pc, #196]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <MX_GPIO_Init+0x110>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GRAB_OBJECT_Pin | STATE_CONVEYOR_Pin,
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000bd2:	4826      	ldr	r0, [pc, #152]	@ (8000c6c <MX_GPIO_Init+0x114>)
 8000bd4:	f000 feef 	bl	80019b6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIRY_Pin | DIRX_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2103      	movs	r1, #3
 8000bdc:	4824      	ldr	r0, [pc, #144]	@ (8000c70 <MX_GPIO_Init+0x118>)
 8000bde:	f000 feea 	bl	80019b6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GRAB_OBJECT_Pin */
	GPIO_InitStruct.Pin = GRAB_OBJECT_Pin;
 8000be2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GRAB_OBJECT_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481c      	ldr	r0, [pc, #112]	@ (8000c6c <MX_GPIO_Init+0x114>)
 8000bfc:	f000 fd30 	bl	8001660 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIRY_Pin DIRX_Pin */
	GPIO_InitStruct.Pin = DIRY_Pin | DIRX_Pin;
 8000c00:	2303      	movs	r3, #3
 8000c02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_GPIO_Init+0x118>)
 8000c18:	f000 fd22 	bl	8001660 <HAL_GPIO_Init>

	/*Configure GPIO pin : STATE_CONVEYOR_Pin */
	GPIO_InitStruct.Pin = STATE_CONVEYOR_Pin;
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(STATE_CONVEYOR_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_GPIO_Init+0x114>)
 8000c34:	f000 fd14 	bl	8001660 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIG_STOP_CONVEYOR_Pin */
	GPIO_InitStruct.Pin = SIG_STOP_CONVEYOR_Pin;
 8000c38:	2320      	movs	r3, #32
 8000c3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_GPIO_Init+0x11c>)
 8000c3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SIG_STOP_CONVEYOR_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <MX_GPIO_Init+0x118>)
 8000c4c:	f000 fd08 	bl	8001660 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	2017      	movs	r0, #23
 8000c56:	f000 fb8a 	bl	800136e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c5a:	2017      	movs	r0, #23
 8000c5c:	f000 fba3 	bl	80013a6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	10210000 	.word	0x10210000

08000c78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_MspInit+0x5c>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_MspInit+0x60>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_MspInit+0x60>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf8:	d114      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	201c      	movs	r0, #28
 8000d18:	f000 fb29 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 fb42 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d22:	e018      	b.n	8000d56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_TIM_Base_MspInit+0x7c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d113      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_TIM_Base_MspInit+0x78>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201d      	movs	r0, #29
 8000d4c:	f000 fb0f 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d50:	201d      	movs	r0, #29
 8000d52:	f000 fb28 	bl	80013a6 <HAL_NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40000400 	.word	0x40000400

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d86:	d118      	bne.n	8000dba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000da0:	2302      	movs	r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <HAL_TIM_MspPostInit+0x98>)
 8000db4:	f000 fc54 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000db8:	e01c      	b.n	8000df4 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <HAL_TIM_MspPostInit+0x9c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d117      	bne.n	8000df4 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_TIM_MspPostInit+0x94>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ddc:	2340      	movs	r3, #64	@ 0x40
 8000dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <HAL_TIM_MspPostInit+0x98>)
 8000df0:	f000 fc36 	bl	8001660 <HAL_GPIO_Init>
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40000400 	.word	0x40000400

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <HAL_UART_MspInit+0x9c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d139      	bne.n	8000e9c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_UART_MspInit+0xa0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480f      	ldr	r0, [pc, #60]	@ (8000eac <HAL_UART_MspInit+0xa4>)
 8000e6e:	f000 fbf7 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	4809      	ldr	r0, [pc, #36]	@ (8000eac <HAL_UART_MspInit+0xa4>)
 8000e88:	f000 fbea 	bl	8001660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	2025      	movs	r0, #37	@ 0x25
 8000e92:	f000 fa6c 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e96:	2025      	movs	r0, #37	@ 0x25
 8000e98:	f000 fa85 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010800 	.word	0x40010800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f91e 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIG_STOP_CONVEYOR_Pin);
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 fd6b 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM2_IRQHandler+0x10>)
 8000f1e:	f001 fb4d 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000c8 	.word	0x200000c8

08000f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <TIM3_IRQHandler+0x10>)
 8000f32:	f001 fb43 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000110 	.word	0x20000110

08000f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <USART1_IRQHandler+0x10>)
 8000f46:	f002 fa45 	bl	80033d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000158 	.word	0x20000158

08000f54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e00a      	b.n	8000f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f66:	f3af 8000 	nop.w
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	b2ca      	uxtb	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf0      	blt.n	8000f66 <_read+0x12>
  }

  return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <_isatty>:

int _isatty(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f003 f9c2 	bl	80043a8 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000c000 	.word	0x2000c000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000036c 	.word	0x2000036c
 8001058:	200004c0 	.word	0x200004c0

0800105c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff fff8 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480b      	ldr	r0, [pc, #44]	@ (800109c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106e:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001084:	4c09      	ldr	r4, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f003 f98f 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fbf7 	bl	8000888 <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80010a4:	08004fa0 	.word	0x08004fa0
  ldr r2, =_sbss
 80010a8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80010ac:	200004c0 	.word	0x200004c0

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f947 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fdd8 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f95f 	bl	80013c2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f927 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000044 	.word	0x20000044
 8001138:	2000004c 	.word	0x2000004c
 800113c:	20000048 	.word	0x20000048

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	@ (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000004c 	.word	0x2000004c
 8001160:	20000370 	.word	0x20000370

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000370 	.word	0x20000370

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff fff0 	bl	8001164 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffe0 	bl	8001164 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000004c 	.word	0x2000004c

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4906      	ldr	r1, [pc, #24]	@ (8001258 <__NVIC_EnableIRQ+0x34>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff2d 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff42 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff35 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d008      	beq.n	8001404 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2204      	movs	r2, #4
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e020      	b.n	8001446 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d005      	beq.n	8001474 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e0d6      	b.n	8001622 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b64      	ldr	r3, [pc, #400]	@ (800162c <HAL_DMA_Abort_IT+0x1dc>)
 800149c:	429a      	cmp	r2, r3
 800149e:	d958      	bls.n	8001552 <HAL_DMA_Abort_IT+0x102>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a62      	ldr	r2, [pc, #392]	@ (8001630 <HAL_DMA_Abort_IT+0x1e0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04f      	beq.n	800154a <HAL_DMA_Abort_IT+0xfa>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a61      	ldr	r2, [pc, #388]	@ (8001634 <HAL_DMA_Abort_IT+0x1e4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d048      	beq.n	8001546 <HAL_DMA_Abort_IT+0xf6>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001638 <HAL_DMA_Abort_IT+0x1e8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d040      	beq.n	8001540 <HAL_DMA_Abort_IT+0xf0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5e      	ldr	r2, [pc, #376]	@ (800163c <HAL_DMA_Abort_IT+0x1ec>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d038      	beq.n	800153a <HAL_DMA_Abort_IT+0xea>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <HAL_DMA_Abort_IT+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d030      	beq.n	8001534 <HAL_DMA_Abort_IT+0xe4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001644 <HAL_DMA_Abort_IT+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d028      	beq.n	800152e <HAL_DMA_Abort_IT+0xde>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a52      	ldr	r2, [pc, #328]	@ (800162c <HAL_DMA_Abort_IT+0x1dc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d020      	beq.n	8001528 <HAL_DMA_Abort_IT+0xd8>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a57      	ldr	r2, [pc, #348]	@ (8001648 <HAL_DMA_Abort_IT+0x1f8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_DMA_Abort_IT+0xd4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a55      	ldr	r2, [pc, #340]	@ (800164c <HAL_DMA_Abort_IT+0x1fc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_Abort_IT+0xd0>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a54      	ldr	r2, [pc, #336]	@ (8001650 <HAL_DMA_Abort_IT+0x200>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00a      	beq.n	800151a <HAL_DMA_Abort_IT+0xca>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a52      	ldr	r2, [pc, #328]	@ (8001654 <HAL_DMA_Abort_IT+0x204>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d102      	bne.n	8001514 <HAL_DMA_Abort_IT+0xc4>
 800150e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001512:	e01b      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001518:	e018      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 800151a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800151e:	e015      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001520:	2310      	movs	r3, #16
 8001522:	e013      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001524:	2301      	movs	r3, #1
 8001526:	e011      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001528:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800152c:	e00e      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 800152e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001532:	e00b      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001538:	e008      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 800153a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153e:	e005      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001544:	e002      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 8001546:	2310      	movs	r3, #16
 8001548:	e000      	b.n	800154c <HAL_DMA_Abort_IT+0xfc>
 800154a:	2301      	movs	r3, #1
 800154c:	4a42      	ldr	r2, [pc, #264]	@ (8001658 <HAL_DMA_Abort_IT+0x208>)
 800154e:	6053      	str	r3, [r2, #4]
 8001550:	e057      	b.n	8001602 <HAL_DMA_Abort_IT+0x1b2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a36      	ldr	r2, [pc, #216]	@ (8001630 <HAL_DMA_Abort_IT+0x1e0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04f      	beq.n	80015fc <HAL_DMA_Abort_IT+0x1ac>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a34      	ldr	r2, [pc, #208]	@ (8001634 <HAL_DMA_Abort_IT+0x1e4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d048      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x1a8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a33      	ldr	r2, [pc, #204]	@ (8001638 <HAL_DMA_Abort_IT+0x1e8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d040      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x1a2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a31      	ldr	r2, [pc, #196]	@ (800163c <HAL_DMA_Abort_IT+0x1ec>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d038      	beq.n	80015ec <HAL_DMA_Abort_IT+0x19c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <HAL_DMA_Abort_IT+0x1f0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d030      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x196>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <HAL_DMA_Abort_IT+0x1f4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d028      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x190>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <HAL_DMA_Abort_IT+0x1dc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d020      	beq.n	80015da <HAL_DMA_Abort_IT+0x18a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2a      	ldr	r2, [pc, #168]	@ (8001648 <HAL_DMA_Abort_IT+0x1f8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x186>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_DMA_Abort_IT+0x1fc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x182>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_DMA_Abort_IT+0x200>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00a      	beq.n	80015cc <HAL_DMA_Abort_IT+0x17c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a26      	ldr	r2, [pc, #152]	@ (8001654 <HAL_DMA_Abort_IT+0x204>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d102      	bne.n	80015c6 <HAL_DMA_Abort_IT+0x176>
 80015c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c4:	e01b      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ca:	e018      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d0:	e015      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015d2:	2310      	movs	r3, #16
 80015d4:	e013      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e011      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015de:	e00e      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015e4:	e00b      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ea:	e008      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	e005      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f6:	e002      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015f8:	2310      	movs	r3, #16
 80015fa:	e000      	b.n	80015fe <HAL_DMA_Abort_IT+0x1ae>
 80015fc:	2301      	movs	r3, #1
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_DMA_Abort_IT+0x20c>)
 8001600:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
    } 
  }
  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020080 	.word	0x40020080
 8001630:	40020008 	.word	0x40020008
 8001634:	4002001c 	.word	0x4002001c
 8001638:	40020030 	.word	0x40020030
 800163c:	40020044 	.word	0x40020044
 8001640:	40020058 	.word	0x40020058
 8001644:	4002006c 	.word	0x4002006c
 8001648:	40020408 	.word	0x40020408
 800164c:	4002041c 	.word	0x4002041c
 8001650:	40020430 	.word	0x40020430
 8001654:	40020444 	.word	0x40020444
 8001658:	40020400 	.word	0x40020400
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	@ 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e179      	b.n	8001968 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8168 	bne.w	8001962 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a96      	ldr	r2, [pc, #600]	@ (80018f0 <HAL_GPIO_Init+0x290>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d05e      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 800169c:	4a94      	ldr	r2, [pc, #592]	@ (80018f0 <HAL_GPIO_Init+0x290>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d875      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016a2:	4a94      	ldr	r2, [pc, #592]	@ (80018f4 <HAL_GPIO_Init+0x294>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d058      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016a8:	4a92      	ldr	r2, [pc, #584]	@ (80018f4 <HAL_GPIO_Init+0x294>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d86f      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ae:	4a92      	ldr	r2, [pc, #584]	@ (80018f8 <HAL_GPIO_Init+0x298>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d052      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016b4:	4a90      	ldr	r2, [pc, #576]	@ (80018f8 <HAL_GPIO_Init+0x298>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d869      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ba:	4a90      	ldr	r2, [pc, #576]	@ (80018fc <HAL_GPIO_Init+0x29c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d04c      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016c0:	4a8e      	ldr	r2, [pc, #568]	@ (80018fc <HAL_GPIO_Init+0x29c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d863      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016c6:	4a8e      	ldr	r2, [pc, #568]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d046      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016cc:	4a8c      	ldr	r2, [pc, #560]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d85d      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d82a      	bhi.n	800172c <HAL_GPIO_Init+0xcc>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d859      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <HAL_GPIO_Init+0x80>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001747 	.word	0x08001747
 80016ec:	08001789 	.word	0x08001789
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	0800178f 	.word	0x0800178f
 80016f8:	0800178f 	.word	0x0800178f
 80016fc:	0800178f 	.word	0x0800178f
 8001700:	0800178f 	.word	0x0800178f
 8001704:	0800178f 	.word	0x0800178f
 8001708:	0800178f 	.word	0x0800178f
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800178f 	.word	0x0800178f
 8001714:	0800178f 	.word	0x0800178f
 8001718:	0800178f 	.word	0x0800178f
 800171c:	0800178f 	.word	0x0800178f
 8001720:	0800178f 	.word	0x0800178f
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001751 	.word	0x08001751
 800172c:	4a75      	ldr	r2, [pc, #468]	@ (8001904 <HAL_GPIO_Init+0x2a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e02c      	b.n	800178e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e029      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e024      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	3308      	adds	r3, #8
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e01f      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e01a      	b.n	8001790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001762:	2304      	movs	r3, #4
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e013      	b.n	8001790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	611a      	str	r2, [r3, #16]
          break;
 800177a:	e009      	b.n	8001790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	615a      	str	r2, [r3, #20]
          break;
 8001786:	e003      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x130>
          break;
 800178e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d801      	bhi.n	800179a <HAL_GPIO_Init+0x13a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e001      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3304      	adds	r3, #4
 800179e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d802      	bhi.n	80017ac <HAL_GPIO_Init+0x14c>
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x152>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	3b08      	subs	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80c1 	beq.w	8001962 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a48      	ldr	r2, [pc, #288]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f8:	4a44      	ldr	r2, [pc, #272]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <HAL_GPIO_Init+0x2b0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d01f      	beq.n	8001864 <HAL_GPIO_Init+0x204>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3b      	ldr	r2, [pc, #236]	@ (8001914 <HAL_GPIO_Init+0x2b4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x200>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3a      	ldr	r2, [pc, #232]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1fc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a39      	ldr	r2, [pc, #228]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1f8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a38      	ldr	r2, [pc, #224]	@ (8001920 <HAL_GPIO_Init+0x2c0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1f4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a37      	ldr	r2, [pc, #220]	@ (8001924 <HAL_GPIO_Init+0x2c4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1f0>
 800184c:	2305      	movs	r3, #5
 800184e:	e00a      	b.n	8001866 <HAL_GPIO_Init+0x206>
 8001850:	2306      	movs	r3, #6
 8001852:	e008      	b.n	8001866 <HAL_GPIO_Init+0x206>
 8001854:	2304      	movs	r3, #4
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x206>
 8001858:	2303      	movs	r3, #3
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x206>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x206>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x206>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	4925      	ldr	r1, [pc, #148]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4924      	ldr	r1, [pc, #144]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4920      	ldr	r1, [pc, #128]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	491a      	ldr	r1, [pc, #104]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4916      	ldr	r1, [pc, #88]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d025      	beq.n	800192c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4910      	ldr	r1, [pc, #64]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e025      	b.n	800193a <HAL_GPIO_Init+0x2da>
 80018ee:	bf00      	nop
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	10110000 	.word	0x10110000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40011400 	.word	0x40011400
 8001920:	40011800 	.word	0x40011800
 8001924:	40011c00 	.word	0x40011c00
 8001928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	4913      	ldr	r1, [pc, #76]	@ (8001984 <HAL_GPIO_Init+0x324>)
 8001936:	4013      	ands	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_GPIO_Init+0x324>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	490e      	ldr	r1, [pc, #56]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_GPIO_Init+0x324>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4909      	ldr	r1, [pc, #36]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae7e 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	372c      	adds	r7, #44	@ 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c6:	787b      	ldrb	r3, [r7, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d2:	e003      	b.n	80019dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	041a      	lsls	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd76 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e272      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a38:	4b92      	ldr	r3, [pc, #584]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4b8f      	ldr	r3, [pc, #572]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
 8001a50:	4b8c      	ldr	r3, [pc, #560]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b89      	ldr	r3, [pc, #548]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x12c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d168      	bne.n	8001b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e24c      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x76>
 8001a80:	4b80      	ldr	r3, [pc, #512]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7f      	ldr	r2, [pc, #508]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b7b      	ldr	r3, [pc, #492]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b78      	ldr	r3, [pc, #480]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbc>
 8001aba:	4b72      	ldr	r3, [pc, #456]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a71      	ldr	r2, [pc, #452]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6e      	ldr	r2, [pc, #440]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a67      	ldr	r2, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb36 	bl	8001164 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fb32 	bl	8001164 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e200      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe4>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb22 	bl	8001164 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fb1e 	bl	8001164 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1ec      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x10c>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c0      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4939      	ldr	r1, [pc, #228]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fad7 	bl	8001164 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fad3 	bl	8001164 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a1      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4927      	ldr	r1, [pc, #156]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fab6 	bl	8001164 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fab2 	bl	8001164 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e180      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d03a      	beq.n	8001c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff fa96 	bl	8001164 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fa92 	bl	8001164 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e160      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 face 	bl	80021fc <RCC_Delay>
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fa7c 	bl	8001164 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fa78 	bl	8001164 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e146      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420000 	.word	0x42420000
 8001c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b8b      	ldr	r3, [pc, #556]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a87      	ldr	r2, [pc, #540]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa39 	bl	8001164 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7ff fa35 	bl	8001164 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	@ 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e103      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x4c8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x312>
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x334>
 8001d32:	4b6a      	ldr	r3, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a69      	ldr	r2, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a66      	ldr	r2, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x356>
 8001d54:	4b61      	ldr	r3, [pc, #388]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4b5e      	ldr	r3, [pc, #376]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a5d      	ldr	r2, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a5a      	ldr	r2, [pc, #360]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b58      	ldr	r3, [pc, #352]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a57      	ldr	r2, [pc, #348]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f9e9 	bl	8001164 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff f9e5 	bl	8001164 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0b1      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x37e>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f9d3 	bl	8001164 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f9cf 	bl	8001164 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e09b      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b3c      	ldr	r3, [pc, #240]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8087 	beq.w	8001f0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d061      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d146      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f9a3 	bl	8001164 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff f99f 	bl	8001164 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e06d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4921      	ldr	r1, [pc, #132]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a19      	ldr	r1, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	491b      	ldr	r1, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f973 	bl	8001164 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff f96f 	bl	8001164 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e03d      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46a>
 8001ea0:	e035      	b.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f95c 	bl	8001164 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f958 	bl	8001164 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e026      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x498>
 8001ece:	e01e      	b.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e019      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x500>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b6a      	ldr	r3, [pc, #424]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4965      	ldr	r1, [pc, #404]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4b59      	ldr	r3, [pc, #356]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	494d      	ldr	r1, [pc, #308]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d040      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07f      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e073      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4936      	ldr	r1, [pc, #216]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7ff f8aa 	bl	8001164 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7ff f8a6 	bl	8001164 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e053      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d210      	bcs.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4922      	ldr	r1, [pc, #136]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e032      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4916      	ldr	r1, [pc, #88]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	490e      	ldr	r1, [pc, #56]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 f821 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490a      	ldr	r1, [pc, #40]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f808 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08004f38 	.word	0x08004f38
 80020e8:	20000044 	.word	0x20000044
 80020ec:	20000048 	.word	0x20000048

080020f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x30>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x36>
 800211e:	e027      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	613b      	str	r3, [r7, #16]
      break;
 8002124:	e027      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4a17      	ldr	r2, [pc, #92]	@ (800218c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c5b      	lsrs	r3, r3, #17
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e004      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	613b      	str	r3, [r7, #16]
      break;
 800216e:	e002      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	613b      	str	r3, [r7, #16]
      break;
 8002174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002176:	693b      	ldr	r3, [r7, #16]
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	08004f50 	.word	0x08004f50
 8002190:	08004f60 	.word	0x08004f60
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b02      	ldr	r3, [pc, #8]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20000044 	.word	0x20000044

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b0:	f7ff fff2 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08004f48 	.word	0x08004f48

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d8:	f7ff ffde 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0adb      	lsrs	r3, r3, #11
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4903      	ldr	r1, [pc, #12]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08004f48 	.word	0x08004f48

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000044 	.word	0x20000044
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fd42 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fc56 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e044      	b.n	800237a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_TIM_Base_Start_IT+0xac>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <HAL_TIM_Base_Start_IT+0xb0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002324:	d00e      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a18      	ldr	r2, [pc, #96]	@ (800238c <HAL_TIM_Base_Start_IT+0xb4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <HAL_TIM_Base_Start_IT+0xb8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a15      	ldr	r2, [pc, #84]	@ (8002394 <HAL_TIM_Base_Start_IT+0xbc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d111      	bne.n	8002368 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d010      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002366:	e007      	b.n	8002378 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40013400 	.word	0x40013400
 800238c:	40000400 	.word	0x40000400
 8002390:	40000800 	.word	0x40000800
 8002394:	40000c00 	.word	0x40000c00

08002398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e041      	b.n	800242e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f839 	bl	8002436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f000 fba6 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_TIM_PWM_Start+0x24>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e022      	b.n	80024b2 <HAL_TIM_PWM_Start+0x6a>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b04      	cmp	r3, #4
 8002470:	d109      	bne.n	8002486 <HAL_TIM_PWM_Start+0x3e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	bf14      	ite	ne
 800247e:	2301      	movne	r3, #1
 8002480:	2300      	moveq	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	e015      	b.n	80024b2 <HAL_TIM_PWM_Start+0x6a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d109      	bne.n	80024a0 <HAL_TIM_PWM_Start+0x58>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e008      	b.n	80024b2 <HAL_TIM_PWM_Start+0x6a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e072      	b.n	80025a0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <HAL_TIM_PWM_Start+0x82>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024c8:	e013      	b.n	80024f2 <HAL_TIM_PWM_Start+0xaa>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d104      	bne.n	80024da <HAL_TIM_PWM_Start+0x92>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024d8:	e00b      	b.n	80024f2 <HAL_TIM_PWM_Start+0xaa>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d104      	bne.n	80024ea <HAL_TIM_PWM_Start+0xa2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024e8:	e003      	b.n	80024f2 <HAL_TIM_PWM_Start+0xaa>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fdd0 	bl	80030a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a28      	ldr	r2, [pc, #160]	@ (80025a8 <HAL_TIM_PWM_Start+0x160>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIM_PWM_Start+0xcc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a27      	ldr	r2, [pc, #156]	@ (80025ac <HAL_TIM_PWM_Start+0x164>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_TIM_PWM_Start+0xd0>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_TIM_PWM_Start+0xd2>
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <HAL_TIM_PWM_Start+0x160>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_TIM_PWM_Start+0x122>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <HAL_TIM_PWM_Start+0x164>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_TIM_PWM_Start+0x122>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254a:	d00e      	beq.n	800256a <HAL_TIM_PWM_Start+0x122>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_TIM_PWM_Start+0x168>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_TIM_PWM_Start+0x122>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	@ (80025b4 <HAL_TIM_PWM_Start+0x16c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_TIM_PWM_Start+0x122>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	@ (80025b8 <HAL_TIM_PWM_Start+0x170>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d111      	bne.n	800258e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d010      	beq.n	800259e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258c:	e007      	b.n	800259e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40013400 	.word	0x40013400
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00

080025bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d122      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11b      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0202 	mvn.w	r2, #2
 80025e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa76 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa69 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa78 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d122      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0204 	mvn.w	r2, #4
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa4c 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa3f 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa4e 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0208 	mvn.w	r2, #8
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa22 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa15 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fa24 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0210 	mvn.w	r2, #16
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2208      	movs	r2, #8
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9f8 	bl	8002af0 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9eb 	bl	8002ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9fa 	bl	8002b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fd fd88 	bl	8000250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	2b80      	cmp	r3, #128	@ 0x80
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002758:	2b80      	cmp	r3, #128	@ 0x80
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fd33 	bl	80031d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002776:	2b40      	cmp	r3, #64	@ 0x40
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002784:	2b40      	cmp	r3, #64	@ 0x40
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9be 	bl	8002b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fcfe 	bl	80031c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0ae      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	f200 809f 	bhi.w	8002938 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002835 	.word	0x08002835
 8002804:	08002939 	.word	0x08002939
 8002808:	08002939 	.word	0x08002939
 800280c:	08002939 	.word	0x08002939
 8002810:	08002875 	.word	0x08002875
 8002814:	08002939 	.word	0x08002939
 8002818:	08002939 	.word	0x08002939
 800281c:	08002939 	.word	0x08002939
 8002820:	080028b7 	.word	0x080028b7
 8002824:	08002939 	.word	0x08002939
 8002828:	08002939 	.word	0x08002939
 800282c:	08002939 	.word	0x08002939
 8002830:	080028f7 	.word	0x080028f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9ee 	bl	8002c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0208 	orr.w	r2, r2, #8
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	619a      	str	r2, [r3, #24]
      break;
 8002872:	e064      	b.n	800293e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fa3e 	bl	8002cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6999      	ldr	r1, [r3, #24]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	021a      	lsls	r2, r3, #8
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	619a      	str	r2, [r3, #24]
      break;
 80028b4:	e043      	b.n	800293e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa91 	bl	8002de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0208 	orr.w	r2, r2, #8
 80028d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0204 	bic.w	r2, r2, #4
 80028e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69d9      	ldr	r1, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	61da      	str	r2, [r3, #28]
      break;
 80028f4:	e023      	b.n	800293e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fae5 	bl	8002ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	021a      	lsls	r2, r3, #8
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	61da      	str	r2, [r3, #28]
      break;
 8002936:	e002      	b.n	800293e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
      break;
 800293c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIM_ConfigClockSource+0x1c>
 8002968:	2302      	movs	r3, #2
 800296a:	e0b4      	b.n	8002ad6 <HAL_TIM_ConfigClockSource+0x186>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800298a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a4:	d03e      	beq.n	8002a24 <HAL_TIM_ConfigClockSource+0xd4>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029aa:	f200 8087 	bhi.w	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b2:	f000 8086 	beq.w	8002ac2 <HAL_TIM_ConfigClockSource+0x172>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ba:	d87f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b70      	cmp	r3, #112	@ 0x70
 80029be:	d01a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xa6>
 80029c0:	2b70      	cmp	r3, #112	@ 0x70
 80029c2:	d87b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b60      	cmp	r3, #96	@ 0x60
 80029c6:	d050      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x11a>
 80029c8:	2b60      	cmp	r3, #96	@ 0x60
 80029ca:	d877      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b50      	cmp	r3, #80	@ 0x50
 80029ce:	d03c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0xfa>
 80029d0:	2b50      	cmp	r3, #80	@ 0x50
 80029d2:	d873      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d058      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x13a>
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d86f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b30      	cmp	r3, #48	@ 0x30
 80029de:	d064      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029e0:	2b30      	cmp	r3, #48	@ 0x30
 80029e2:	d86b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d060      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d867      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d05a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x15a>
 80029f4:	e062      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a06:	f000 fb2c 	bl	8003062 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
      break;
 8002a22:	e04f      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a34:	f000 fb15 	bl	8003062 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a46:	609a      	str	r2, [r3, #8]
      break;
 8002a48:	e03c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 fa8c 	bl	8002f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2150      	movs	r1, #80	@ 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fae3 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002a68:	e02c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 faaa 	bl	8002fd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2160      	movs	r1, #96	@ 0x60
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fad3 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002a88:	e01c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 fa6c 	bl	8002f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2140      	movs	r1, #64	@ 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fac3 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e00c      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 faba 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002aba:	e003      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
	...

08002b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a33      	ldr	r2, [pc, #204]	@ (8002c08 <TIM_Base_SetConfig+0xe0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <TIM_Base_SetConfig+0x40>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a32      	ldr	r2, [pc, #200]	@ (8002c0c <TIM_Base_SetConfig+0xe4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00f      	beq.n	8002b68 <TIM_Base_SetConfig+0x40>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4e:	d00b      	beq.n	8002b68 <TIM_Base_SetConfig+0x40>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <TIM_Base_SetConfig+0xe8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_Base_SetConfig+0x40>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002c14 <TIM_Base_SetConfig+0xec>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0x40>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <TIM_Base_SetConfig+0xf0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d108      	bne.n	8002b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <TIM_Base_SetConfig+0xe0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <TIM_Base_SetConfig+0x82>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a21      	ldr	r2, [pc, #132]	@ (8002c0c <TIM_Base_SetConfig+0xe4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00f      	beq.n	8002baa <TIM_Base_SetConfig+0x82>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b90:	d00b      	beq.n	8002baa <TIM_Base_SetConfig+0x82>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <TIM_Base_SetConfig+0xe8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_Base_SetConfig+0x82>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <TIM_Base_SetConfig+0xec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_Base_SetConfig+0x82>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <TIM_Base_SetConfig+0xf0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d108      	bne.n	8002bbc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <TIM_Base_SetConfig+0xe0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0xc8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <TIM_Base_SetConfig+0xe4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	615a      	str	r2, [r3, #20]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40013400 	.word	0x40013400
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00

08002c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f023 0201 	bic.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0302 	bic.w	r3, r3, #2
 8002c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a20      	ldr	r2, [pc, #128]	@ (8002cf4 <TIM_OC1_SetConfig+0xd8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_OC1_SetConfig+0x64>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <TIM_OC1_SetConfig+0xdc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10c      	bne.n	8002c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f023 0308 	bic.w	r3, r3, #8
 8002c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	@ (8002cf4 <TIM_OC1_SetConfig+0xd8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC1_SetConfig+0x8e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <TIM_OC1_SetConfig+0xdc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40013400 	.word	0x40013400

08002cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 0210 	bic.w	r2, r3, #16
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0320 	bic.w	r3, r3, #32
 8002d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <TIM_OC2_SetConfig+0xe0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_OC2_SetConfig+0x68>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a20      	ldr	r2, [pc, #128]	@ (8002de0 <TIM_OC2_SetConfig+0xe4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10d      	bne.n	8002d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a16      	ldr	r2, [pc, #88]	@ (8002ddc <TIM_OC2_SetConfig+0xe0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_OC2_SetConfig+0x94>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a15      	ldr	r2, [pc, #84]	@ (8002de0 <TIM_OC2_SetConfig+0xe4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d113      	bne.n	8002db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40013400 	.word	0x40013400

08002de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <TIM_OC3_SetConfig+0xe0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_OC3_SetConfig+0x66>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a20      	ldr	r2, [pc, #128]	@ (8002ec8 <TIM_OC3_SetConfig+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10d      	bne.n	8002e66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a16      	ldr	r2, [pc, #88]	@ (8002ec4 <TIM_OC3_SetConfig+0xe0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC3_SetConfig+0x92>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <TIM_OC3_SetConfig+0xe4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40013400 	.word	0x40013400

08002ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	031b      	lsls	r3, r3, #12
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a11      	ldr	r2, [pc, #68]	@ (8002f6c <TIM_OC4_SetConfig+0xa0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_OC4_SetConfig+0x68>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <TIM_OC4_SetConfig+0xa4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d109      	bne.n	8002f48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40013400 	.word	0x40013400

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0210 	bic.w	r2, r3, #16
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	031b      	lsls	r3, r3, #12
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	f043 0307 	orr.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003062:	b480      	push	{r7}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800307c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4313      	orrs	r3, r2
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e050      	b.n	80031a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d018      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d00e      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10c      	bne.n	8003190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800317c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4313      	orrs	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40000c00 	.word	0x40000c00

080031c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e042      	b.n	800327c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fdfc 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fdc5 	bl	8003db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800323c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800324c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d16d      	bne.n	8003380 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Transmit+0x2c>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e066      	b.n	8003382 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	@ 0x21
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c2:	f7fd ff4f 	bl	8001164 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f8:	e02a      	b.n	8003350 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fb14 	bl	8003932 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e036      	b.n	8003382 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	3302      	adds	r3, #2
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e007      	b.n	8003342 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1cf      	bne.n	80032fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	@ 0x40
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fae4 	bl	8003932 <UART_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d112      	bne.n	80033ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Receive_IT+0x26>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00b      	b.n	80033cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	461a      	mov	r2, r3
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fb24 	bl	8003a0e <UART_Start_Receive_IT>
 80033c6:	4603      	mov	r3, r0
 80033c8:	e000      	b.n	80033cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0ba      	sub	sp, #232	@ 0xe8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_UART_IRQHandler+0x66>
 8003426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fc01 	bl	8003c3a <UART_Receive_IT>
      return;
 8003438:	e25b      	b.n	80038f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800343a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80de 	beq.w	8003600 <HAL_UART_IRQHandler+0x22c>
 8003444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80d1 	beq.w	8003600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_UART_IRQHandler+0xae>
 800346a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_UART_IRQHandler+0xd2>
 800348e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_UART_IRQHandler+0xf6>
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0204 	orr.w	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d011      	beq.n	80034fa <HAL_UART_IRQHandler+0x126>
 80034d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f043 0208 	orr.w	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 81f2 	beq.w	80038e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_UART_IRQHandler+0x14e>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb8c 	bl	8003c3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_UART_IRQHandler+0x17a>
 8003546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04f      	beq.n	80035ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa96 	bl	8003a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d041      	beq.n	80035e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3314      	adds	r3, #20
 8003568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800357c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800358e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800359a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1d9      	bne.n	8003562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d013      	beq.n	80035de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ba:	4a7e      	ldr	r2, [pc, #504]	@ (80037b4 <HAL_UART_IRQHandler+0x3e0>)
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff44 	bl	8001450 <HAL_DMA_Abort_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e00e      	b.n	80035fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f993 	bl	800390a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e00a      	b.n	80035fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f98f 	bl	800390a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	e006      	b.n	80035fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f98b 	bl	800390a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80035fa:	e175      	b.n	80038e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	bf00      	nop
    return;
 80035fe:	e173      	b.n	80038e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 814f 	bne.w	80038a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8148 	beq.w	80038a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8141 	beq.w	80038a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80b6 	beq.w	80037b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8145 	beq.w	80038ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800366a:	429a      	cmp	r2, r3
 800366c:	f080 813e 	bcs.w	80038ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003676:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b20      	cmp	r3, #32
 8003680:	f000 8088 	beq.w	8003794 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800369a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800369e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1d9      	bne.n	8003684 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e1      	bne.n	80036d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800371c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003730:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003732:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003736:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800373e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e3      	bne.n	800370c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003764:	f023 0310 	bic.w	r3, r3, #16
 8003768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003776:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003778:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800377c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e3      	bne.n	8003752 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fe23 	bl	80013da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8b6 	bl	800391c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037b0:	e09c      	b.n	80038ec <HAL_UART_IRQHandler+0x518>
 80037b2:	bf00      	nop
 80037b4:	08003b45 	.word	0x08003b45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 808e 	beq.w	80038f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8089 	beq.w	80038f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003802:	647a      	str	r2, [r7, #68]	@ 0x44
 8003804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e3      	bne.n	80037de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	623b      	str	r3, [r7, #32]
   return(result);
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800383a:	633a      	str	r2, [r7, #48]	@ 0x30
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e3      	bne.n	8003816 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	60fb      	str	r3, [r7, #12]
   return(result);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	69b9      	ldr	r1, [r7, #24]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	617b      	str	r3, [r7, #20]
   return(result);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e3      	bne.n	800385c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800389a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f83b 	bl	800391c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038a6:	e023      	b.n	80038f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_UART_IRQHandler+0x4f4>
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f953 	bl	8003b6c <UART_Transmit_IT>
    return;
 80038c6:	e014      	b.n	80038f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <HAL_UART_IRQHandler+0x51e>
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f992 	bl	8003c0a <UART_EndTransmit_IT>
    return;
 80038e6:	e004      	b.n	80038f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80038e8:	bf00      	nop
 80038ea:	e002      	b.n	80038f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80038f0:	bf00      	nop
  }
}
 80038f2:	37e8      	adds	r7, #232	@ 0xe8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b090      	sub	sp, #64	@ 0x40
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003942:	e050      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d04c      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800394c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x30>
 8003952:	f7fd fc07 	bl	8001164 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395e:	429a      	cmp	r2, r3
 8003960:	d241      	bcs.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003982:	637a      	str	r2, [r7, #52]	@ 0x34
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3314      	adds	r3, #20
 800399c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	613b      	str	r3, [r7, #16]
   return(result);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039b6:	623a      	str	r2, [r7, #32]
 80039b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	69f9      	ldr	r1, [r7, #28]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e5      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00f      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d09f      	beq.n	8003944 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3740      	adds	r7, #64	@ 0x40
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2222      	movs	r2, #34	@ 0x22
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0220 	orr.w	r2, r2, #32
 8003a72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b095      	sub	sp, #84	@ 0x54
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003adc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e5      	bne.n	8003abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d119      	bne.n	8003b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f023 0310 	bic.w	r3, r3, #16
 8003b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b18:	61ba      	str	r2, [r7, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6979      	ldr	r1, [r7, #20]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	613b      	str	r3, [r7, #16]
   return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e5      	bne.n	8003af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b3a:	bf00      	nop
 8003b3c:	3754      	adds	r7, #84	@ 0x54
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fed3 	bl	800390a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b21      	cmp	r3, #33	@ 0x21
 8003b7e:	d13e      	bne.n	8003bfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d114      	bne.n	8003bb4 <UART_Transmit_IT+0x48>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d110      	bne.n	8003bb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	621a      	str	r2, [r3, #32]
 8003bb2:	e008      	b.n	8003bc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6211      	str	r1, [r2, #32]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fe64 	bl	80038f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b08c      	sub	sp, #48	@ 0x30
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	@ 0x22
 8003c4c:	f040 80ae 	bne.w	8003dac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c58:	d117      	bne.n	8003c8a <UART_Receive_IT+0x50>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c88:	e026      	b.n	8003cd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9c:	d007      	beq.n	8003cae <UART_Receive_IT+0x74>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <UART_Receive_IT+0x82>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e008      	b.n	8003cce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d15d      	bne.n	8003da8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0220 	bic.w	r2, r2, #32
 8003cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d135      	bne.n	8003d9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	613b      	str	r3, [r7, #16]
   return(result);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 0310 	bic.w	r3, r3, #16
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	623a      	str	r2, [r7, #32]
 8003d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	69f9      	ldr	r1, [r7, #28]
 8003d5e:	6a3a      	ldr	r2, [r7, #32]
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d10a      	bne.n	8003d90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fdc0 	bl	800391c <HAL_UARTEx_RxEventCallback>
 8003d9c:	e002      	b.n	8003da4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fc fbf2 	bl	8000588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e002      	b.n	8003dae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3730      	adds	r7, #48	@ 0x30
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003df2:	f023 030c 	bic.w	r3, r3, #12
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <UART_SetConfig+0x114>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe f9d8 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	e002      	b.n	8003e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7fe f9c0 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8003e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009a      	lsls	r2, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	0119      	lsls	r1, r3, #4
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009a      	lsls	r2, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e66:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2064      	movs	r0, #100	@ 0x64
 8003e6e:	fb00 f303 	mul.w	r3, r0, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	3332      	adds	r3, #50	@ 0x32
 8003e78:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e84:	4419      	add	r1, r3
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2064      	movs	r0, #100	@ 0x64
 8003ea6:	fb00 f303 	mul.w	r3, r0, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	3332      	adds	r3, #50	@ 0x32
 8003eb0:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	51eb851f 	.word	0x51eb851f

08003ed4 <std>:
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	4604      	mov	r4, r0
 8003eda:	e9c0 3300 	strd	r3, r3, [r0]
 8003ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ee2:	6083      	str	r3, [r0, #8]
 8003ee4:	8181      	strh	r1, [r0, #12]
 8003ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ee8:	81c2      	strh	r2, [r0, #14]
 8003eea:	6183      	str	r3, [r0, #24]
 8003eec:	4619      	mov	r1, r3
 8003eee:	2208      	movs	r2, #8
 8003ef0:	305c      	adds	r0, #92	@ 0x5c
 8003ef2:	f000 f9f9 	bl	80042e8 <memset>
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <std+0x58>)
 8003ef8:	6224      	str	r4, [r4, #32]
 8003efa:	6263      	str	r3, [r4, #36]	@ 0x24
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <std+0x5c>)
 8003efe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <std+0x60>)
 8003f02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f04:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <std+0x64>)
 8003f06:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <std+0x68>)
 8003f0a:	429c      	cmp	r4, r3
 8003f0c:	d006      	beq.n	8003f1c <std+0x48>
 8003f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f12:	4294      	cmp	r4, r2
 8003f14:	d002      	beq.n	8003f1c <std+0x48>
 8003f16:	33d0      	adds	r3, #208	@ 0xd0
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	d105      	bne.n	8003f28 <std+0x54>
 8003f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f24:	f000 ba6a 	b.w	80043fc <__retarget_lock_init_recursive>
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08004139 	.word	0x08004139
 8003f30:	0800415b 	.word	0x0800415b
 8003f34:	08004193 	.word	0x08004193
 8003f38:	080041b7 	.word	0x080041b7
 8003f3c:	20000374 	.word	0x20000374

08003f40 <stdio_exit_handler>:
 8003f40:	4a02      	ldr	r2, [pc, #8]	@ (8003f4c <stdio_exit_handler+0xc>)
 8003f42:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <stdio_exit_handler+0x10>)
 8003f44:	4803      	ldr	r0, [pc, #12]	@ (8003f54 <stdio_exit_handler+0x14>)
 8003f46:	f000 b869 	b.w	800401c <_fwalk_sglue>
 8003f4a:	bf00      	nop
 8003f4c:	20000050 	.word	0x20000050
 8003f50:	08004c95 	.word	0x08004c95
 8003f54:	20000060 	.word	0x20000060

08003f58 <cleanup_stdio>:
 8003f58:	6841      	ldr	r1, [r0, #4]
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <cleanup_stdio+0x34>)
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	4604      	mov	r4, r0
 8003f62:	d001      	beq.n	8003f68 <cleanup_stdio+0x10>
 8003f64:	f000 fe96 	bl	8004c94 <_fflush_r>
 8003f68:	68a1      	ldr	r1, [r4, #8]
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <cleanup_stdio+0x38>)
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d002      	beq.n	8003f76 <cleanup_stdio+0x1e>
 8003f70:	4620      	mov	r0, r4
 8003f72:	f000 fe8f 	bl	8004c94 <_fflush_r>
 8003f76:	68e1      	ldr	r1, [r4, #12]
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <cleanup_stdio+0x3c>)
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d004      	beq.n	8003f88 <cleanup_stdio+0x30>
 8003f7e:	4620      	mov	r0, r4
 8003f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f84:	f000 be86 	b.w	8004c94 <_fflush_r>
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000374 	.word	0x20000374
 8003f90:	200003dc 	.word	0x200003dc
 8003f94:	20000444 	.word	0x20000444

08003f98 <global_stdio_init.part.0>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <global_stdio_init.part.0+0x30>)
 8003f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fcc <global_stdio_init.part.0+0x34>)
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd0 <global_stdio_init.part.0+0x38>)
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f7ff ff94 	bl	8003ed4 <std>
 8003fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2109      	movs	r1, #9
 8003fb4:	f7ff ff8e 	bl	8003ed4 <std>
 8003fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc2:	2112      	movs	r1, #18
 8003fc4:	f7ff bf86 	b.w	8003ed4 <std>
 8003fc8:	200004ac 	.word	0x200004ac
 8003fcc:	20000374 	.word	0x20000374
 8003fd0:	08003f41 	.word	0x08003f41

08003fd4 <__sfp_lock_acquire>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	@ (8003fdc <__sfp_lock_acquire+0x8>)
 8003fd6:	f000 ba12 	b.w	80043fe <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	200004b5 	.word	0x200004b5

08003fe0 <__sfp_lock_release>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	@ (8003fe8 <__sfp_lock_release+0x8>)
 8003fe2:	f000 ba0d 	b.w	8004400 <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	200004b5 	.word	0x200004b5

08003fec <__sinit>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	4604      	mov	r4, r0
 8003ff0:	f7ff fff0 	bl	8003fd4 <__sfp_lock_acquire>
 8003ff4:	6a23      	ldr	r3, [r4, #32]
 8003ff6:	b11b      	cbz	r3, 8004000 <__sinit+0x14>
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	f7ff bff0 	b.w	8003fe0 <__sfp_lock_release>
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <__sinit+0x28>)
 8004002:	6223      	str	r3, [r4, #32]
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <__sinit+0x2c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f5      	bne.n	8003ff8 <__sinit+0xc>
 800400c:	f7ff ffc4 	bl	8003f98 <global_stdio_init.part.0>
 8004010:	e7f2      	b.n	8003ff8 <__sinit+0xc>
 8004012:	bf00      	nop
 8004014:	08003f59 	.word	0x08003f59
 8004018:	200004ac 	.word	0x200004ac

0800401c <_fwalk_sglue>:
 800401c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004020:	4607      	mov	r7, r0
 8004022:	4688      	mov	r8, r1
 8004024:	4614      	mov	r4, r2
 8004026:	2600      	movs	r6, #0
 8004028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800402c:	f1b9 0901 	subs.w	r9, r9, #1
 8004030:	d505      	bpl.n	800403e <_fwalk_sglue+0x22>
 8004032:	6824      	ldr	r4, [r4, #0]
 8004034:	2c00      	cmp	r4, #0
 8004036:	d1f7      	bne.n	8004028 <_fwalk_sglue+0xc>
 8004038:	4630      	mov	r0, r6
 800403a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800403e:	89ab      	ldrh	r3, [r5, #12]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d907      	bls.n	8004054 <_fwalk_sglue+0x38>
 8004044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004048:	3301      	adds	r3, #1
 800404a:	d003      	beq.n	8004054 <_fwalk_sglue+0x38>
 800404c:	4629      	mov	r1, r5
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	4306      	orrs	r6, r0
 8004054:	3568      	adds	r5, #104	@ 0x68
 8004056:	e7e9      	b.n	800402c <_fwalk_sglue+0x10>

08004058 <iprintf>:
 8004058:	b40f      	push	{r0, r1, r2, r3}
 800405a:	b507      	push	{r0, r1, r2, lr}
 800405c:	4906      	ldr	r1, [pc, #24]	@ (8004078 <iprintf+0x20>)
 800405e:	ab04      	add	r3, sp, #16
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	f853 2b04 	ldr.w	r2, [r3], #4
 8004066:	6881      	ldr	r1, [r0, #8]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	f000 fae9 	bl	8004640 <_vfiprintf_r>
 800406e:	b003      	add	sp, #12
 8004070:	f85d eb04 	ldr.w	lr, [sp], #4
 8004074:	b004      	add	sp, #16
 8004076:	4770      	bx	lr
 8004078:	2000005c 	.word	0x2000005c

0800407c <_puts_r>:
 800407c:	6a03      	ldr	r3, [r0, #32]
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	4605      	mov	r5, r0
 8004082:	460e      	mov	r6, r1
 8004084:	6884      	ldr	r4, [r0, #8]
 8004086:	b90b      	cbnz	r3, 800408c <_puts_r+0x10>
 8004088:	f7ff ffb0 	bl	8003fec <__sinit>
 800408c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800408e:	07db      	lsls	r3, r3, #31
 8004090:	d405      	bmi.n	800409e <_puts_r+0x22>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	0598      	lsls	r0, r3, #22
 8004096:	d402      	bmi.n	800409e <_puts_r+0x22>
 8004098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800409a:	f000 f9b0 	bl	80043fe <__retarget_lock_acquire_recursive>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	0719      	lsls	r1, r3, #28
 80040a2:	d502      	bpl.n	80040aa <_puts_r+0x2e>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d135      	bne.n	8004116 <_puts_r+0x9a>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f8c5 	bl	800423c <__swsetup_r>
 80040b2:	b380      	cbz	r0, 8004116 <_puts_r+0x9a>
 80040b4:	f04f 35ff 	mov.w	r5, #4294967295
 80040b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040ba:	07da      	lsls	r2, r3, #31
 80040bc:	d405      	bmi.n	80040ca <_puts_r+0x4e>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	059b      	lsls	r3, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_puts_r+0x4e>
 80040c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c6:	f000 f99b 	bl	8004400 <__retarget_lock_release_recursive>
 80040ca:	4628      	mov	r0, r5
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da04      	bge.n	80040dc <_puts_r+0x60>
 80040d2:	69a2      	ldr	r2, [r4, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dc17      	bgt.n	8004108 <_puts_r+0x8c>
 80040d8:	290a      	cmp	r1, #10
 80040da:	d015      	beq.n	8004108 <_puts_r+0x8c>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	6022      	str	r2, [r4, #0]
 80040e2:	7019      	strb	r1, [r3, #0]
 80040e4:	68a3      	ldr	r3, [r4, #8]
 80040e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60a3      	str	r3, [r4, #8]
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d1ed      	bne.n	80040ce <_puts_r+0x52>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da11      	bge.n	800411a <_puts_r+0x9e>
 80040f6:	4622      	mov	r2, r4
 80040f8:	210a      	movs	r1, #10
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f85f 	bl	80041be <__swbuf_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d0d7      	beq.n	80040b4 <_puts_r+0x38>
 8004104:	250a      	movs	r5, #10
 8004106:	e7d7      	b.n	80040b8 <_puts_r+0x3c>
 8004108:	4622      	mov	r2, r4
 800410a:	4628      	mov	r0, r5
 800410c:	f000 f857 	bl	80041be <__swbuf_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d1e7      	bne.n	80040e4 <_puts_r+0x68>
 8004114:	e7ce      	b.n	80040b4 <_puts_r+0x38>
 8004116:	3e01      	subs	r6, #1
 8004118:	e7e4      	b.n	80040e4 <_puts_r+0x68>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	6022      	str	r2, [r4, #0]
 8004120:	220a      	movs	r2, #10
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e7ee      	b.n	8004104 <_puts_r+0x88>
	...

08004128 <puts>:
 8004128:	4b02      	ldr	r3, [pc, #8]	@ (8004134 <puts+0xc>)
 800412a:	4601      	mov	r1, r0
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	f7ff bfa5 	b.w	800407c <_puts_r>
 8004132:	bf00      	nop
 8004134:	2000005c 	.word	0x2000005c

08004138 <__sread>:
 8004138:	b510      	push	{r4, lr}
 800413a:	460c      	mov	r4, r1
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f90e 	bl	8004360 <_read_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	bfab      	itete	ge
 8004148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800414a:	89a3      	ldrhlt	r3, [r4, #12]
 800414c:	181b      	addge	r3, r3, r0
 800414e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004152:	bfac      	ite	ge
 8004154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004156:	81a3      	strhlt	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__swrite>:
 800415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	461f      	mov	r7, r3
 8004160:	898b      	ldrh	r3, [r1, #12]
 8004162:	4605      	mov	r5, r0
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	460c      	mov	r4, r1
 8004168:	4616      	mov	r6, r2
 800416a:	d505      	bpl.n	8004178 <__swrite+0x1e>
 800416c:	2302      	movs	r3, #2
 800416e:	2200      	movs	r2, #0
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	f000 f8e2 	bl	800433c <_lseek_r>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	4632      	mov	r2, r6
 800417c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	4628      	mov	r0, r5
 8004184:	463b      	mov	r3, r7
 8004186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f000 b8f9 	b.w	8004384 <_write_r>

08004192 <__sseek>:
 8004192:	b510      	push	{r4, lr}
 8004194:	460c      	mov	r4, r1
 8004196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419a:	f000 f8cf 	bl	800433c <_lseek_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	bf15      	itete	ne
 80041a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041ae:	81a3      	strheq	r3, [r4, #12]
 80041b0:	bf18      	it	ne
 80041b2:	81a3      	strhne	r3, [r4, #12]
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <__sclose>:
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 b8af 	b.w	800431c <_close_r>

080041be <__swbuf_r>:
 80041be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c0:	460e      	mov	r6, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	4605      	mov	r5, r0
 80041c6:	b118      	cbz	r0, 80041d0 <__swbuf_r+0x12>
 80041c8:	6a03      	ldr	r3, [r0, #32]
 80041ca:	b90b      	cbnz	r3, 80041d0 <__swbuf_r+0x12>
 80041cc:	f7ff ff0e 	bl	8003fec <__sinit>
 80041d0:	69a3      	ldr	r3, [r4, #24]
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	071a      	lsls	r2, r3, #28
 80041d8:	d501      	bpl.n	80041de <__swbuf_r+0x20>
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	b943      	cbnz	r3, 80041f0 <__swbuf_r+0x32>
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f82b 	bl	800423c <__swsetup_r>
 80041e6:	b118      	cbz	r0, 80041f0 <__swbuf_r+0x32>
 80041e8:	f04f 37ff 	mov.w	r7, #4294967295
 80041ec:	4638      	mov	r0, r7
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	6922      	ldr	r2, [r4, #16]
 80041f4:	b2f6      	uxtb	r6, r6
 80041f6:	1a98      	subs	r0, r3, r2
 80041f8:	6963      	ldr	r3, [r4, #20]
 80041fa:	4637      	mov	r7, r6
 80041fc:	4283      	cmp	r3, r0
 80041fe:	dc05      	bgt.n	800420c <__swbuf_r+0x4e>
 8004200:	4621      	mov	r1, r4
 8004202:	4628      	mov	r0, r5
 8004204:	f000 fd46 	bl	8004c94 <_fflush_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	d1ed      	bne.n	80041e8 <__swbuf_r+0x2a>
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	3b01      	subs	r3, #1
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	701e      	strb	r6, [r3, #0]
 800421a:	6962      	ldr	r2, [r4, #20]
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	429a      	cmp	r2, r3
 8004220:	d004      	beq.n	800422c <__swbuf_r+0x6e>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	07db      	lsls	r3, r3, #31
 8004226:	d5e1      	bpl.n	80041ec <__swbuf_r+0x2e>
 8004228:	2e0a      	cmp	r6, #10
 800422a:	d1df      	bne.n	80041ec <__swbuf_r+0x2e>
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fd30 	bl	8004c94 <_fflush_r>
 8004234:	2800      	cmp	r0, #0
 8004236:	d0d9      	beq.n	80041ec <__swbuf_r+0x2e>
 8004238:	e7d6      	b.n	80041e8 <__swbuf_r+0x2a>
	...

0800423c <__swsetup_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4b29      	ldr	r3, [pc, #164]	@ (80042e4 <__swsetup_r+0xa8>)
 8004240:	4605      	mov	r5, r0
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	460c      	mov	r4, r1
 8004246:	b118      	cbz	r0, 8004250 <__swsetup_r+0x14>
 8004248:	6a03      	ldr	r3, [r0, #32]
 800424a:	b90b      	cbnz	r3, 8004250 <__swsetup_r+0x14>
 800424c:	f7ff fece 	bl	8003fec <__sinit>
 8004250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004254:	0719      	lsls	r1, r3, #28
 8004256:	d422      	bmi.n	800429e <__swsetup_r+0x62>
 8004258:	06da      	lsls	r2, r3, #27
 800425a:	d407      	bmi.n	800426c <__swsetup_r+0x30>
 800425c:	2209      	movs	r2, #9
 800425e:	602a      	str	r2, [r5, #0]
 8004260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	e033      	b.n	80042d4 <__swsetup_r+0x98>
 800426c:	0758      	lsls	r0, r3, #29
 800426e:	d512      	bpl.n	8004296 <__swsetup_r+0x5a>
 8004270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004272:	b141      	cbz	r1, 8004286 <__swsetup_r+0x4a>
 8004274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004278:	4299      	cmp	r1, r3
 800427a:	d002      	beq.n	8004282 <__swsetup_r+0x46>
 800427c:	4628      	mov	r0, r5
 800427e:	f000 f8c1 	bl	8004404 <_free_r>
 8004282:	2300      	movs	r3, #0
 8004284:	6363      	str	r3, [r4, #52]	@ 0x34
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	2300      	movs	r3, #0
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	b94b      	cbnz	r3, 80042b6 <__swsetup_r+0x7a>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ac:	d003      	beq.n	80042b6 <__swsetup_r+0x7a>
 80042ae:	4621      	mov	r1, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 fd3c 	bl	8004d2e <__smakebuf_r>
 80042b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ba:	f013 0201 	ands.w	r2, r3, #1
 80042be:	d00a      	beq.n	80042d6 <__swsetup_r+0x9a>
 80042c0:	2200      	movs	r2, #0
 80042c2:	60a2      	str	r2, [r4, #8]
 80042c4:	6962      	ldr	r2, [r4, #20]
 80042c6:	4252      	negs	r2, r2
 80042c8:	61a2      	str	r2, [r4, #24]
 80042ca:	6922      	ldr	r2, [r4, #16]
 80042cc:	b942      	cbnz	r2, 80042e0 <__swsetup_r+0xa4>
 80042ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042d2:	d1c5      	bne.n	8004260 <__swsetup_r+0x24>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	0799      	lsls	r1, r3, #30
 80042d8:	bf58      	it	pl
 80042da:	6962      	ldrpl	r2, [r4, #20]
 80042dc:	60a2      	str	r2, [r4, #8]
 80042de:	e7f4      	b.n	80042ca <__swsetup_r+0x8e>
 80042e0:	2000      	movs	r0, #0
 80042e2:	e7f7      	b.n	80042d4 <__swsetup_r+0x98>
 80042e4:	2000005c 	.word	0x2000005c

080042e8 <memset>:
 80042e8:	4603      	mov	r3, r0
 80042ea:	4402      	add	r2, r0
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d100      	bne.n	80042f2 <memset+0xa>
 80042f0:	4770      	bx	lr
 80042f2:	f803 1b01 	strb.w	r1, [r3], #1
 80042f6:	e7f9      	b.n	80042ec <memset+0x4>

080042f8 <strncmp>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	b16a      	cbz	r2, 8004318 <strncmp+0x20>
 80042fc:	3901      	subs	r1, #1
 80042fe:	1884      	adds	r4, r0, r2
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004308:	429a      	cmp	r2, r3
 800430a:	d103      	bne.n	8004314 <strncmp+0x1c>
 800430c:	42a0      	cmp	r0, r4
 800430e:	d001      	beq.n	8004314 <strncmp+0x1c>
 8004310:	2a00      	cmp	r2, #0
 8004312:	d1f5      	bne.n	8004300 <strncmp+0x8>
 8004314:	1ad0      	subs	r0, r2, r3
 8004316:	bd10      	pop	{r4, pc}
 8004318:	4610      	mov	r0, r2
 800431a:	e7fc      	b.n	8004316 <strncmp+0x1e>

0800431c <_close_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	2300      	movs	r3, #0
 8004320:	4d05      	ldr	r5, [pc, #20]	@ (8004338 <_close_r+0x1c>)
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fc fe31 	bl	8000f8e <_close>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_close_r+0x1a>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_close_r+0x1a>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	200004b0 	.word	0x200004b0

0800433c <_lseek_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	2200      	movs	r2, #0
 8004346:	4d05      	ldr	r5, [pc, #20]	@ (800435c <_lseek_r+0x20>)
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc fe43 	bl	8000fd6 <_lseek>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_lseek_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_lseek_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200004b0 	.word	0x200004b0

08004360 <_read_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	2200      	movs	r2, #0
 800436a:	4d05      	ldr	r5, [pc, #20]	@ (8004380 <_read_r+0x20>)
 800436c:	602a      	str	r2, [r5, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f7fc fdf0 	bl	8000f54 <_read>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_read_r+0x1e>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_read_r+0x1e>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	200004b0 	.word	0x200004b0

08004384 <_write_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	2200      	movs	r2, #0
 800438e:	4d05      	ldr	r5, [pc, #20]	@ (80043a4 <_write_r+0x20>)
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fb ff46 	bl	8000224 <_write>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_write_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_write_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200004b0 	.word	0x200004b0

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000005c 	.word	0x2000005c

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	2600      	movs	r6, #0
 80043b8:	4d0c      	ldr	r5, [pc, #48]	@ (80043ec <__libc_init_array+0x38>)
 80043ba:	4c0d      	ldr	r4, [pc, #52]	@ (80043f0 <__libc_init_array+0x3c>)
 80043bc:	1b64      	subs	r4, r4, r5
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	f000 fd30 	bl	8004e28 <_init>
 80043c8:	2600      	movs	r6, #0
 80043ca:	4d0a      	ldr	r5, [pc, #40]	@ (80043f4 <__libc_init_array+0x40>)
 80043cc:	4c0a      	ldr	r4, [pc, #40]	@ (80043f8 <__libc_init_array+0x44>)
 80043ce:	1b64      	subs	r4, r4, r5
 80043d0:	10a4      	asrs	r4, r4, #2
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08004f98 	.word	0x08004f98
 80043f0:	08004f98 	.word	0x08004f98
 80043f4:	08004f98 	.word	0x08004f98
 80043f8:	08004f9c 	.word	0x08004f9c

080043fc <__retarget_lock_init_recursive>:
 80043fc:	4770      	bx	lr

080043fe <__retarget_lock_acquire_recursive>:
 80043fe:	4770      	bx	lr

08004400 <__retarget_lock_release_recursive>:
 8004400:	4770      	bx	lr
	...

08004404 <_free_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4605      	mov	r5, r0
 8004408:	2900      	cmp	r1, #0
 800440a:	d040      	beq.n	800448e <_free_r+0x8a>
 800440c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004410:	1f0c      	subs	r4, r1, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfb8      	it	lt
 8004416:	18e4      	addlt	r4, r4, r3
 8004418:	f000 f8de 	bl	80045d8 <__malloc_lock>
 800441c:	4a1c      	ldr	r2, [pc, #112]	@ (8004490 <_free_r+0x8c>)
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	b933      	cbnz	r3, 8004430 <_free_r+0x2c>
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	6014      	str	r4, [r2, #0]
 8004426:	4628      	mov	r0, r5
 8004428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800442c:	f000 b8da 	b.w	80045e4 <__malloc_unlock>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d908      	bls.n	8004446 <_free_r+0x42>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428b      	cmp	r3, r1
 800443a:	bf01      	itttt	eq
 800443c:	6819      	ldreq	r1, [r3, #0]
 800443e:	685b      	ldreq	r3, [r3, #4]
 8004440:	1809      	addeq	r1, r1, r0
 8004442:	6021      	streq	r1, [r4, #0]
 8004444:	e7ed      	b.n	8004422 <_free_r+0x1e>
 8004446:	461a      	mov	r2, r3
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b10b      	cbz	r3, 8004450 <_free_r+0x4c>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d9fa      	bls.n	8004446 <_free_r+0x42>
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	1850      	adds	r0, r2, r1
 8004454:	42a0      	cmp	r0, r4
 8004456:	d10b      	bne.n	8004470 <_free_r+0x6c>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	4401      	add	r1, r0
 800445c:	1850      	adds	r0, r2, r1
 800445e:	4283      	cmp	r3, r0
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	d1e0      	bne.n	8004426 <_free_r+0x22>
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4408      	add	r0, r1
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	6053      	str	r3, [r2, #4]
 800446e:	e7da      	b.n	8004426 <_free_r+0x22>
 8004470:	d902      	bls.n	8004478 <_free_r+0x74>
 8004472:	230c      	movs	r3, #12
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	e7d6      	b.n	8004426 <_free_r+0x22>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf01      	itttt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	1809      	addeq	r1, r1, r0
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	6054      	str	r4, [r2, #4]
 800448c:	e7cb      	b.n	8004426 <_free_r+0x22>
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200004bc 	.word	0x200004bc

08004494 <sbrk_aligned>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4e0f      	ldr	r6, [pc, #60]	@ (80044d4 <sbrk_aligned+0x40>)
 8004498:	460c      	mov	r4, r1
 800449a:	6831      	ldr	r1, [r6, #0]
 800449c:	4605      	mov	r5, r0
 800449e:	b911      	cbnz	r1, 80044a6 <sbrk_aligned+0x12>
 80044a0:	f000 fca4 	bl	8004dec <_sbrk_r>
 80044a4:	6030      	str	r0, [r6, #0]
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 fc9f 	bl	8004dec <_sbrk_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d103      	bne.n	80044ba <sbrk_aligned+0x26>
 80044b2:	f04f 34ff 	mov.w	r4, #4294967295
 80044b6:	4620      	mov	r0, r4
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
 80044ba:	1cc4      	adds	r4, r0, #3
 80044bc:	f024 0403 	bic.w	r4, r4, #3
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d0f8      	beq.n	80044b6 <sbrk_aligned+0x22>
 80044c4:	1a21      	subs	r1, r4, r0
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 fc90 	bl	8004dec <_sbrk_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d1f2      	bne.n	80044b6 <sbrk_aligned+0x22>
 80044d0:	e7ef      	b.n	80044b2 <sbrk_aligned+0x1e>
 80044d2:	bf00      	nop
 80044d4:	200004b8 	.word	0x200004b8

080044d8 <_malloc_r>:
 80044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044dc:	1ccd      	adds	r5, r1, #3
 80044de:	f025 0503 	bic.w	r5, r5, #3
 80044e2:	3508      	adds	r5, #8
 80044e4:	2d0c      	cmp	r5, #12
 80044e6:	bf38      	it	cc
 80044e8:	250c      	movcc	r5, #12
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	4606      	mov	r6, r0
 80044ee:	db01      	blt.n	80044f4 <_malloc_r+0x1c>
 80044f0:	42a9      	cmp	r1, r5
 80044f2:	d904      	bls.n	80044fe <_malloc_r+0x26>
 80044f4:	230c      	movs	r3, #12
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045d4 <_malloc_r+0xfc>
 8004502:	f000 f869 	bl	80045d8 <__malloc_lock>
 8004506:	f8d8 3000 	ldr.w	r3, [r8]
 800450a:	461c      	mov	r4, r3
 800450c:	bb44      	cbnz	r4, 8004560 <_malloc_r+0x88>
 800450e:	4629      	mov	r1, r5
 8004510:	4630      	mov	r0, r6
 8004512:	f7ff ffbf 	bl	8004494 <sbrk_aligned>
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	4604      	mov	r4, r0
 800451a:	d158      	bne.n	80045ce <_malloc_r+0xf6>
 800451c:	f8d8 4000 	ldr.w	r4, [r8]
 8004520:	4627      	mov	r7, r4
 8004522:	2f00      	cmp	r7, #0
 8004524:	d143      	bne.n	80045ae <_malloc_r+0xd6>
 8004526:	2c00      	cmp	r4, #0
 8004528:	d04b      	beq.n	80045c2 <_malloc_r+0xea>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4639      	mov	r1, r7
 800452e:	4630      	mov	r0, r6
 8004530:	eb04 0903 	add.w	r9, r4, r3
 8004534:	f000 fc5a 	bl	8004dec <_sbrk_r>
 8004538:	4581      	cmp	r9, r0
 800453a:	d142      	bne.n	80045c2 <_malloc_r+0xea>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	4630      	mov	r0, r6
 8004540:	1a6d      	subs	r5, r5, r1
 8004542:	4629      	mov	r1, r5
 8004544:	f7ff ffa6 	bl	8004494 <sbrk_aligned>
 8004548:	3001      	adds	r0, #1
 800454a:	d03a      	beq.n	80045c2 <_malloc_r+0xea>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	442b      	add	r3, r5
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	f8d8 3000 	ldr.w	r3, [r8]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	bb62      	cbnz	r2, 80045b4 <_malloc_r+0xdc>
 800455a:	f8c8 7000 	str.w	r7, [r8]
 800455e:	e00f      	b.n	8004580 <_malloc_r+0xa8>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	1b52      	subs	r2, r2, r5
 8004564:	d420      	bmi.n	80045a8 <_malloc_r+0xd0>
 8004566:	2a0b      	cmp	r2, #11
 8004568:	d917      	bls.n	800459a <_malloc_r+0xc2>
 800456a:	1961      	adds	r1, r4, r5
 800456c:	42a3      	cmp	r3, r4
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	6059      	strne	r1, [r3, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	bf08      	it	eq
 8004578:	f8c8 1000 	streq.w	r1, [r8]
 800457c:	5162      	str	r2, [r4, r5]
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f82f 	bl	80045e4 <__malloc_unlock>
 8004586:	f104 000b 	add.w	r0, r4, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	f020 0007 	bic.w	r0, r0, #7
 8004590:	1ac2      	subs	r2, r0, r3
 8004592:	bf1c      	itt	ne
 8004594:	1a1b      	subne	r3, r3, r0
 8004596:	50a3      	strne	r3, [r4, r2]
 8004598:	e7af      	b.n	80044fa <_malloc_r+0x22>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	bf0c      	ite	eq
 80045a0:	f8c8 2000 	streq.w	r2, [r8]
 80045a4:	605a      	strne	r2, [r3, #4]
 80045a6:	e7eb      	b.n	8004580 <_malloc_r+0xa8>
 80045a8:	4623      	mov	r3, r4
 80045aa:	6864      	ldr	r4, [r4, #4]
 80045ac:	e7ae      	b.n	800450c <_malloc_r+0x34>
 80045ae:	463c      	mov	r4, r7
 80045b0:	687f      	ldr	r7, [r7, #4]
 80045b2:	e7b6      	b.n	8004522 <_malloc_r+0x4a>
 80045b4:	461a      	mov	r2, r3
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	d1fb      	bne.n	80045b4 <_malloc_r+0xdc>
 80045bc:	2300      	movs	r3, #0
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	e7de      	b.n	8004580 <_malloc_r+0xa8>
 80045c2:	230c      	movs	r3, #12
 80045c4:	4630      	mov	r0, r6
 80045c6:	6033      	str	r3, [r6, #0]
 80045c8:	f000 f80c 	bl	80045e4 <__malloc_unlock>
 80045cc:	e794      	b.n	80044f8 <_malloc_r+0x20>
 80045ce:	6005      	str	r5, [r0, #0]
 80045d0:	e7d6      	b.n	8004580 <_malloc_r+0xa8>
 80045d2:	bf00      	nop
 80045d4:	200004bc 	.word	0x200004bc

080045d8 <__malloc_lock>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__malloc_lock+0x8>)
 80045da:	f7ff bf10 	b.w	80043fe <__retarget_lock_acquire_recursive>
 80045de:	bf00      	nop
 80045e0:	200004b4 	.word	0x200004b4

080045e4 <__malloc_unlock>:
 80045e4:	4801      	ldr	r0, [pc, #4]	@ (80045ec <__malloc_unlock+0x8>)
 80045e6:	f7ff bf0b 	b.w	8004400 <__retarget_lock_release_recursive>
 80045ea:	bf00      	nop
 80045ec:	200004b4 	.word	0x200004b4

080045f0 <__sfputc_r>:
 80045f0:	6893      	ldr	r3, [r2, #8]
 80045f2:	b410      	push	{r4}
 80045f4:	3b01      	subs	r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	da07      	bge.n	800460c <__sfputc_r+0x1c>
 80045fc:	6994      	ldr	r4, [r2, #24]
 80045fe:	42a3      	cmp	r3, r4
 8004600:	db01      	blt.n	8004606 <__sfputc_r+0x16>
 8004602:	290a      	cmp	r1, #10
 8004604:	d102      	bne.n	800460c <__sfputc_r+0x1c>
 8004606:	bc10      	pop	{r4}
 8004608:	f7ff bdd9 	b.w	80041be <__swbuf_r>
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	1c58      	adds	r0, r3, #1
 8004610:	6010      	str	r0, [r2, #0]
 8004612:	7019      	strb	r1, [r3, #0]
 8004614:	4608      	mov	r0, r1
 8004616:	bc10      	pop	{r4}
 8004618:	4770      	bx	lr

0800461a <__sfputs_r>:
 800461a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461c:	4606      	mov	r6, r0
 800461e:	460f      	mov	r7, r1
 8004620:	4614      	mov	r4, r2
 8004622:	18d5      	adds	r5, r2, r3
 8004624:	42ac      	cmp	r4, r5
 8004626:	d101      	bne.n	800462c <__sfputs_r+0x12>
 8004628:	2000      	movs	r0, #0
 800462a:	e007      	b.n	800463c <__sfputs_r+0x22>
 800462c:	463a      	mov	r2, r7
 800462e:	4630      	mov	r0, r6
 8004630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004634:	f7ff ffdc 	bl	80045f0 <__sfputc_r>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d1f3      	bne.n	8004624 <__sfputs_r+0xa>
 800463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004640 <_vfiprintf_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	460d      	mov	r5, r1
 8004646:	4614      	mov	r4, r2
 8004648:	4698      	mov	r8, r3
 800464a:	4606      	mov	r6, r0
 800464c:	b09d      	sub	sp, #116	@ 0x74
 800464e:	b118      	cbz	r0, 8004658 <_vfiprintf_r+0x18>
 8004650:	6a03      	ldr	r3, [r0, #32]
 8004652:	b90b      	cbnz	r3, 8004658 <_vfiprintf_r+0x18>
 8004654:	f7ff fcca 	bl	8003fec <__sinit>
 8004658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800465a:	07d9      	lsls	r1, r3, #31
 800465c:	d405      	bmi.n	800466a <_vfiprintf_r+0x2a>
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	059a      	lsls	r2, r3, #22
 8004662:	d402      	bmi.n	800466a <_vfiprintf_r+0x2a>
 8004664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004666:	f7ff feca 	bl	80043fe <__retarget_lock_acquire_recursive>
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	d501      	bpl.n	8004674 <_vfiprintf_r+0x34>
 8004670:	692b      	ldr	r3, [r5, #16]
 8004672:	b99b      	cbnz	r3, 800469c <_vfiprintf_r+0x5c>
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f7ff fde0 	bl	800423c <__swsetup_r>
 800467c:	b170      	cbz	r0, 800469c <_vfiprintf_r+0x5c>
 800467e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004680:	07dc      	lsls	r4, r3, #31
 8004682:	d504      	bpl.n	800468e <_vfiprintf_r+0x4e>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	b01d      	add	sp, #116	@ 0x74
 800468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	0598      	lsls	r0, r3, #22
 8004692:	d4f7      	bmi.n	8004684 <_vfiprintf_r+0x44>
 8004694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004696:	f7ff feb3 	bl	8004400 <__retarget_lock_release_recursive>
 800469a:	e7f3      	b.n	8004684 <_vfiprintf_r+0x44>
 800469c:	2300      	movs	r3, #0
 800469e:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a0:	2320      	movs	r3, #32
 80046a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046a6:	2330      	movs	r3, #48	@ 0x30
 80046a8:	f04f 0901 	mov.w	r9, #1
 80046ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800485c <_vfiprintf_r+0x21c>
 80046b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046b8:	4623      	mov	r3, r4
 80046ba:	469a      	mov	sl, r3
 80046bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c0:	b10a      	cbz	r2, 80046c6 <_vfiprintf_r+0x86>
 80046c2:	2a25      	cmp	r2, #37	@ 0x25
 80046c4:	d1f9      	bne.n	80046ba <_vfiprintf_r+0x7a>
 80046c6:	ebba 0b04 	subs.w	fp, sl, r4
 80046ca:	d00b      	beq.n	80046e4 <_vfiprintf_r+0xa4>
 80046cc:	465b      	mov	r3, fp
 80046ce:	4622      	mov	r2, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff ffa1 	bl	800461a <__sfputs_r>
 80046d8:	3001      	adds	r0, #1
 80046da:	f000 80a7 	beq.w	800482c <_vfiprintf_r+0x1ec>
 80046de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046e0:	445a      	add	r2, fp
 80046e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80046e4:	f89a 3000 	ldrb.w	r3, [sl]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 809f 	beq.w	800482c <_vfiprintf_r+0x1ec>
 80046ee:	2300      	movs	r3, #0
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046f8:	f10a 0a01 	add.w	sl, sl, #1
 80046fc:	9304      	str	r3, [sp, #16]
 80046fe:	9307      	str	r3, [sp, #28]
 8004700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004704:	931a      	str	r3, [sp, #104]	@ 0x68
 8004706:	4654      	mov	r4, sl
 8004708:	2205      	movs	r2, #5
 800470a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800470e:	4853      	ldr	r0, [pc, #332]	@ (800485c <_vfiprintf_r+0x21c>)
 8004710:	f000 fb7c 	bl	8004e0c <memchr>
 8004714:	9a04      	ldr	r2, [sp, #16]
 8004716:	b9d8      	cbnz	r0, 8004750 <_vfiprintf_r+0x110>
 8004718:	06d1      	lsls	r1, r2, #27
 800471a:	bf44      	itt	mi
 800471c:	2320      	movmi	r3, #32
 800471e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004722:	0713      	lsls	r3, r2, #28
 8004724:	bf44      	itt	mi
 8004726:	232b      	movmi	r3, #43	@ 0x2b
 8004728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800472c:	f89a 3000 	ldrb.w	r3, [sl]
 8004730:	2b2a      	cmp	r3, #42	@ 0x2a
 8004732:	d015      	beq.n	8004760 <_vfiprintf_r+0x120>
 8004734:	4654      	mov	r4, sl
 8004736:	2000      	movs	r0, #0
 8004738:	f04f 0c0a 	mov.w	ip, #10
 800473c:	9a07      	ldr	r2, [sp, #28]
 800473e:	4621      	mov	r1, r4
 8004740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004744:	3b30      	subs	r3, #48	@ 0x30
 8004746:	2b09      	cmp	r3, #9
 8004748:	d94b      	bls.n	80047e2 <_vfiprintf_r+0x1a2>
 800474a:	b1b0      	cbz	r0, 800477a <_vfiprintf_r+0x13a>
 800474c:	9207      	str	r2, [sp, #28]
 800474e:	e014      	b.n	800477a <_vfiprintf_r+0x13a>
 8004750:	eba0 0308 	sub.w	r3, r0, r8
 8004754:	fa09 f303 	lsl.w	r3, r9, r3
 8004758:	4313      	orrs	r3, r2
 800475a:	46a2      	mov	sl, r4
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	e7d2      	b.n	8004706 <_vfiprintf_r+0xc6>
 8004760:	9b03      	ldr	r3, [sp, #12]
 8004762:	1d19      	adds	r1, r3, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	9103      	str	r1, [sp, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	bfbb      	ittet	lt
 800476c:	425b      	neglt	r3, r3
 800476e:	f042 0202 	orrlt.w	r2, r2, #2
 8004772:	9307      	strge	r3, [sp, #28]
 8004774:	9307      	strlt	r3, [sp, #28]
 8004776:	bfb8      	it	lt
 8004778:	9204      	strlt	r2, [sp, #16]
 800477a:	7823      	ldrb	r3, [r4, #0]
 800477c:	2b2e      	cmp	r3, #46	@ 0x2e
 800477e:	d10a      	bne.n	8004796 <_vfiprintf_r+0x156>
 8004780:	7863      	ldrb	r3, [r4, #1]
 8004782:	2b2a      	cmp	r3, #42	@ 0x2a
 8004784:	d132      	bne.n	80047ec <_vfiprintf_r+0x1ac>
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	3402      	adds	r4, #2
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	9203      	str	r2, [sp, #12]
 8004790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004794:	9305      	str	r3, [sp, #20]
 8004796:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004860 <_vfiprintf_r+0x220>
 800479a:	2203      	movs	r2, #3
 800479c:	4650      	mov	r0, sl
 800479e:	7821      	ldrb	r1, [r4, #0]
 80047a0:	f000 fb34 	bl	8004e0c <memchr>
 80047a4:	b138      	cbz	r0, 80047b6 <_vfiprintf_r+0x176>
 80047a6:	2240      	movs	r2, #64	@ 0x40
 80047a8:	9b04      	ldr	r3, [sp, #16]
 80047aa:	eba0 000a 	sub.w	r0, r0, sl
 80047ae:	4082      	lsls	r2, r0
 80047b0:	4313      	orrs	r3, r2
 80047b2:	3401      	adds	r4, #1
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ba:	2206      	movs	r2, #6
 80047bc:	4829      	ldr	r0, [pc, #164]	@ (8004864 <_vfiprintf_r+0x224>)
 80047be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047c2:	f000 fb23 	bl	8004e0c <memchr>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d03f      	beq.n	800484a <_vfiprintf_r+0x20a>
 80047ca:	4b27      	ldr	r3, [pc, #156]	@ (8004868 <_vfiprintf_r+0x228>)
 80047cc:	bb1b      	cbnz	r3, 8004816 <_vfiprintf_r+0x1d6>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	3308      	adds	r3, #8
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047dc:	443b      	add	r3, r7
 80047de:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e0:	e76a      	b.n	80046b8 <_vfiprintf_r+0x78>
 80047e2:	460c      	mov	r4, r1
 80047e4:	2001      	movs	r0, #1
 80047e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ea:	e7a8      	b.n	800473e <_vfiprintf_r+0xfe>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f04f 0c0a 	mov.w	ip, #10
 80047f2:	4619      	mov	r1, r3
 80047f4:	3401      	adds	r4, #1
 80047f6:	9305      	str	r3, [sp, #20]
 80047f8:	4620      	mov	r0, r4
 80047fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047fe:	3a30      	subs	r2, #48	@ 0x30
 8004800:	2a09      	cmp	r2, #9
 8004802:	d903      	bls.n	800480c <_vfiprintf_r+0x1cc>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0c6      	beq.n	8004796 <_vfiprintf_r+0x156>
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	e7c4      	b.n	8004796 <_vfiprintf_r+0x156>
 800480c:	4604      	mov	r4, r0
 800480e:	2301      	movs	r3, #1
 8004810:	fb0c 2101 	mla	r1, ip, r1, r2
 8004814:	e7f0      	b.n	80047f8 <_vfiprintf_r+0x1b8>
 8004816:	ab03      	add	r3, sp, #12
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	462a      	mov	r2, r5
 800481c:	4630      	mov	r0, r6
 800481e:	4b13      	ldr	r3, [pc, #76]	@ (800486c <_vfiprintf_r+0x22c>)
 8004820:	a904      	add	r1, sp, #16
 8004822:	f3af 8000 	nop.w
 8004826:	4607      	mov	r7, r0
 8004828:	1c78      	adds	r0, r7, #1
 800482a:	d1d6      	bne.n	80047da <_vfiprintf_r+0x19a>
 800482c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800482e:	07d9      	lsls	r1, r3, #31
 8004830:	d405      	bmi.n	800483e <_vfiprintf_r+0x1fe>
 8004832:	89ab      	ldrh	r3, [r5, #12]
 8004834:	059a      	lsls	r2, r3, #22
 8004836:	d402      	bmi.n	800483e <_vfiprintf_r+0x1fe>
 8004838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800483a:	f7ff fde1 	bl	8004400 <__retarget_lock_release_recursive>
 800483e:	89ab      	ldrh	r3, [r5, #12]
 8004840:	065b      	lsls	r3, r3, #25
 8004842:	f53f af1f 	bmi.w	8004684 <_vfiprintf_r+0x44>
 8004846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004848:	e71e      	b.n	8004688 <_vfiprintf_r+0x48>
 800484a:	ab03      	add	r3, sp, #12
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462a      	mov	r2, r5
 8004850:	4630      	mov	r0, r6
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <_vfiprintf_r+0x22c>)
 8004854:	a904      	add	r1, sp, #16
 8004856:	f000 f87d 	bl	8004954 <_printf_i>
 800485a:	e7e4      	b.n	8004826 <_vfiprintf_r+0x1e6>
 800485c:	08004f62 	.word	0x08004f62
 8004860:	08004f68 	.word	0x08004f68
 8004864:	08004f6c 	.word	0x08004f6c
 8004868:	00000000 	.word	0x00000000
 800486c:	0800461b 	.word	0x0800461b

08004870 <_printf_common>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	4616      	mov	r6, r2
 8004876:	4698      	mov	r8, r3
 8004878:	688a      	ldr	r2, [r1, #8]
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	4607      	mov	r7, r0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfb8      	it	lt
 8004882:	4613      	movlt	r3, r2
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800488a:	460c      	mov	r4, r1
 800488c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004890:	b10a      	cbz	r2, 8004896 <_printf_common+0x26>
 8004892:	3301      	adds	r3, #1
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	0699      	lsls	r1, r3, #26
 800489a:	bf42      	ittt	mi
 800489c:	6833      	ldrmi	r3, [r6, #0]
 800489e:	3302      	addmi	r3, #2
 80048a0:	6033      	strmi	r3, [r6, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	f015 0506 	ands.w	r5, r5, #6
 80048a8:	d106      	bne.n	80048b8 <_printf_common+0x48>
 80048aa:	f104 0a19 	add.w	sl, r4, #25
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	6832      	ldr	r2, [r6, #0]
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	dc2b      	bgt.n	8004910 <_printf_common+0xa0>
 80048b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	3b00      	subs	r3, #0
 80048c0:	bf18      	it	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	0692      	lsls	r2, r2, #26
 80048c6:	d430      	bmi.n	800492a <_printf_common+0xba>
 80048c8:	4641      	mov	r1, r8
 80048ca:	4638      	mov	r0, r7
 80048cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d0:	47c8      	blx	r9
 80048d2:	3001      	adds	r0, #1
 80048d4:	d023      	beq.n	800491e <_printf_common+0xae>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	6922      	ldr	r2, [r4, #16]
 80048da:	f003 0306 	and.w	r3, r3, #6
 80048de:	2b04      	cmp	r3, #4
 80048e0:	bf14      	ite	ne
 80048e2:	2500      	movne	r5, #0
 80048e4:	6833      	ldreq	r3, [r6, #0]
 80048e6:	f04f 0600 	mov.w	r6, #0
 80048ea:	bf08      	it	eq
 80048ec:	68e5      	ldreq	r5, [r4, #12]
 80048ee:	f104 041a 	add.w	r4, r4, #26
 80048f2:	bf08      	it	eq
 80048f4:	1aed      	subeq	r5, r5, r3
 80048f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048fa:	bf08      	it	eq
 80048fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004900:	4293      	cmp	r3, r2
 8004902:	bfc4      	itt	gt
 8004904:	1a9b      	subgt	r3, r3, r2
 8004906:	18ed      	addgt	r5, r5, r3
 8004908:	42b5      	cmp	r5, r6
 800490a:	d11a      	bne.n	8004942 <_printf_common+0xd2>
 800490c:	2000      	movs	r0, #0
 800490e:	e008      	b.n	8004922 <_printf_common+0xb2>
 8004910:	2301      	movs	r3, #1
 8004912:	4652      	mov	r2, sl
 8004914:	4641      	mov	r1, r8
 8004916:	4638      	mov	r0, r7
 8004918:	47c8      	blx	r9
 800491a:	3001      	adds	r0, #1
 800491c:	d103      	bne.n	8004926 <_printf_common+0xb6>
 800491e:	f04f 30ff 	mov.w	r0, #4294967295
 8004922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004926:	3501      	adds	r5, #1
 8004928:	e7c1      	b.n	80048ae <_printf_common+0x3e>
 800492a:	2030      	movs	r0, #48	@ 0x30
 800492c:	18e1      	adds	r1, r4, r3
 800492e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004938:	4422      	add	r2, r4
 800493a:	3302      	adds	r3, #2
 800493c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004940:	e7c2      	b.n	80048c8 <_printf_common+0x58>
 8004942:	2301      	movs	r3, #1
 8004944:	4622      	mov	r2, r4
 8004946:	4641      	mov	r1, r8
 8004948:	4638      	mov	r0, r7
 800494a:	47c8      	blx	r9
 800494c:	3001      	adds	r0, #1
 800494e:	d0e6      	beq.n	800491e <_printf_common+0xae>
 8004950:	3601      	adds	r6, #1
 8004952:	e7d9      	b.n	8004908 <_printf_common+0x98>

08004954 <_printf_i>:
 8004954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	7e0f      	ldrb	r7, [r1, #24]
 800495a:	4691      	mov	r9, r2
 800495c:	2f78      	cmp	r7, #120	@ 0x78
 800495e:	4680      	mov	r8, r0
 8004960:	460c      	mov	r4, r1
 8004962:	469a      	mov	sl, r3
 8004964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496a:	d807      	bhi.n	800497c <_printf_i+0x28>
 800496c:	2f62      	cmp	r7, #98	@ 0x62
 800496e:	d80a      	bhi.n	8004986 <_printf_i+0x32>
 8004970:	2f00      	cmp	r7, #0
 8004972:	f000 80d3 	beq.w	8004b1c <_printf_i+0x1c8>
 8004976:	2f58      	cmp	r7, #88	@ 0x58
 8004978:	f000 80ba 	beq.w	8004af0 <_printf_i+0x19c>
 800497c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004984:	e03a      	b.n	80049fc <_printf_i+0xa8>
 8004986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498a:	2b15      	cmp	r3, #21
 800498c:	d8f6      	bhi.n	800497c <_printf_i+0x28>
 800498e:	a101      	add	r1, pc, #4	@ (adr r1, 8004994 <_printf_i+0x40>)
 8004990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004994:	080049ed 	.word	0x080049ed
 8004998:	08004a01 	.word	0x08004a01
 800499c:	0800497d 	.word	0x0800497d
 80049a0:	0800497d 	.word	0x0800497d
 80049a4:	0800497d 	.word	0x0800497d
 80049a8:	0800497d 	.word	0x0800497d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800497d 	.word	0x0800497d
 80049b4:	0800497d 	.word	0x0800497d
 80049b8:	0800497d 	.word	0x0800497d
 80049bc:	0800497d 	.word	0x0800497d
 80049c0:	08004b03 	.word	0x08004b03
 80049c4:	08004a2b 	.word	0x08004a2b
 80049c8:	08004abd 	.word	0x08004abd
 80049cc:	0800497d 	.word	0x0800497d
 80049d0:	0800497d 	.word	0x0800497d
 80049d4:	08004b25 	.word	0x08004b25
 80049d8:	0800497d 	.word	0x0800497d
 80049dc:	08004a2b 	.word	0x08004a2b
 80049e0:	0800497d 	.word	0x0800497d
 80049e4:	0800497d 	.word	0x0800497d
 80049e8:	08004ac5 	.word	0x08004ac5
 80049ec:	6833      	ldr	r3, [r6, #0]
 80049ee:	1d1a      	adds	r2, r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6032      	str	r2, [r6, #0]
 80049f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09e      	b.n	8004b3e <_printf_i+0x1ea>
 8004a00:	6833      	ldr	r3, [r6, #0]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	6031      	str	r1, [r6, #0]
 8004a08:	0606      	lsls	r6, r0, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xbc>
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	e003      	b.n	8004a18 <_printf_i+0xc4>
 8004a10:	0645      	lsls	r5, r0, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xb8>
 8004a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	da03      	bge.n	8004a24 <_printf_i+0xd0>
 8004a1c:	232d      	movs	r3, #45	@ 0x2d
 8004a1e:	426d      	negs	r5, r5
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a24:	230a      	movs	r3, #10
 8004a26:	4859      	ldr	r0, [pc, #356]	@ (8004b8c <_printf_i+0x238>)
 8004a28:	e011      	b.n	8004a4e <_printf_i+0xfa>
 8004a2a:	6821      	ldr	r1, [r4, #0]
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	0608      	lsls	r0, r1, #24
 8004a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a34:	d402      	bmi.n	8004a3c <_printf_i+0xe8>
 8004a36:	0649      	lsls	r1, r1, #25
 8004a38:	bf48      	it	mi
 8004a3a:	b2ad      	uxthmi	r5, r5
 8004a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	bf14      	ite	ne
 8004a42:	230a      	movne	r3, #10
 8004a44:	2308      	moveq	r3, #8
 8004a46:	4851      	ldr	r0, [pc, #324]	@ (8004b8c <_printf_i+0x238>)
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a4e:	6866      	ldr	r6, [r4, #4]
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	bfa8      	it	ge
 8004a54:	6821      	ldrge	r1, [r4, #0]
 8004a56:	60a6      	str	r6, [r4, #8]
 8004a58:	bfa4      	itt	ge
 8004a5a:	f021 0104 	bicge.w	r1, r1, #4
 8004a5e:	6021      	strge	r1, [r4, #0]
 8004a60:	b90d      	cbnz	r5, 8004a66 <_printf_i+0x112>
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d04b      	beq.n	8004afe <_printf_i+0x1aa>
 8004a66:	4616      	mov	r6, r2
 8004a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8004a70:	5dc7      	ldrb	r7, [r0, r7]
 8004a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a76:	462f      	mov	r7, r5
 8004a78:	42bb      	cmp	r3, r7
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	d9f4      	bls.n	8004a68 <_printf_i+0x114>
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d10b      	bne.n	8004a9a <_printf_i+0x146>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	07df      	lsls	r7, r3, #31
 8004a86:	d508      	bpl.n	8004a9a <_printf_i+0x146>
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	6861      	ldr	r1, [r4, #4]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	bfde      	ittt	le
 8004a90:	2330      	movle	r3, #48	@ 0x30
 8004a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a9a:	1b92      	subs	r2, r2, r6
 8004a9c:	6122      	str	r2, [r4, #16]
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f8cd a000 	str.w	sl, [sp]
 8004aa8:	aa03      	add	r2, sp, #12
 8004aaa:	f7ff fee1 	bl	8004870 <_printf_common>
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d14a      	bne.n	8004b48 <_printf_i+0x1f4>
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab6:	b004      	add	sp, #16
 8004ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f043 0320 	orr.w	r3, r3, #32
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	2778      	movs	r7, #120	@ 0x78
 8004ac6:	4832      	ldr	r0, [pc, #200]	@ (8004b90 <_printf_i+0x23c>)
 8004ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	6831      	ldr	r1, [r6, #0]
 8004ad0:	061f      	lsls	r7, r3, #24
 8004ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ad6:	d402      	bmi.n	8004ade <_printf_i+0x18a>
 8004ad8:	065f      	lsls	r7, r3, #25
 8004ada:	bf48      	it	mi
 8004adc:	b2ad      	uxthmi	r5, r5
 8004ade:	6031      	str	r1, [r6, #0]
 8004ae0:	07d9      	lsls	r1, r3, #31
 8004ae2:	bf44      	itt	mi
 8004ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae8:	6023      	strmi	r3, [r4, #0]
 8004aea:	b11d      	cbz	r5, 8004af4 <_printf_i+0x1a0>
 8004aec:	2310      	movs	r3, #16
 8004aee:	e7ab      	b.n	8004a48 <_printf_i+0xf4>
 8004af0:	4826      	ldr	r0, [pc, #152]	@ (8004b8c <_printf_i+0x238>)
 8004af2:	e7e9      	b.n	8004ac8 <_printf_i+0x174>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f023 0320 	bic.w	r3, r3, #32
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	e7f6      	b.n	8004aec <_printf_i+0x198>
 8004afe:	4616      	mov	r6, r2
 8004b00:	e7bd      	b.n	8004a7e <_printf_i+0x12a>
 8004b02:	6833      	ldr	r3, [r6, #0]
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	1d18      	adds	r0, r3, #4
 8004b08:	6961      	ldr	r1, [r4, #20]
 8004b0a:	6030      	str	r0, [r6, #0]
 8004b0c:	062e      	lsls	r6, r5, #24
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	d501      	bpl.n	8004b16 <_printf_i+0x1c2>
 8004b12:	6019      	str	r1, [r3, #0]
 8004b14:	e002      	b.n	8004b1c <_printf_i+0x1c8>
 8004b16:	0668      	lsls	r0, r5, #25
 8004b18:	d5fb      	bpl.n	8004b12 <_printf_i+0x1be>
 8004b1a:	8019      	strh	r1, [r3, #0]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4616      	mov	r6, r2
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	e7bc      	b.n	8004a9e <_printf_i+0x14a>
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	6032      	str	r2, [r6, #0]
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f96b 	bl	8004e0c <memchr>
 8004b36:	b108      	cbz	r0, 8004b3c <_printf_i+0x1e8>
 8004b38:	1b80      	subs	r0, r0, r6
 8004b3a:	6060      	str	r0, [r4, #4]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	2300      	movs	r3, #0
 8004b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b46:	e7aa      	b.n	8004a9e <_printf_i+0x14a>
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	47d0      	blx	sl
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0ad      	beq.n	8004ab2 <_printf_i+0x15e>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	079b      	lsls	r3, r3, #30
 8004b5a:	d413      	bmi.n	8004b84 <_printf_i+0x230>
 8004b5c:	68e0      	ldr	r0, [r4, #12]
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	4298      	cmp	r0, r3
 8004b62:	bfb8      	it	lt
 8004b64:	4618      	movlt	r0, r3
 8004b66:	e7a6      	b.n	8004ab6 <_printf_i+0x162>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	4632      	mov	r2, r6
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	4640      	mov	r0, r8
 8004b70:	47d0      	blx	sl
 8004b72:	3001      	adds	r0, #1
 8004b74:	d09d      	beq.n	8004ab2 <_printf_i+0x15e>
 8004b76:	3501      	adds	r5, #1
 8004b78:	68e3      	ldr	r3, [r4, #12]
 8004b7a:	9903      	ldr	r1, [sp, #12]
 8004b7c:	1a5b      	subs	r3, r3, r1
 8004b7e:	42ab      	cmp	r3, r5
 8004b80:	dcf2      	bgt.n	8004b68 <_printf_i+0x214>
 8004b82:	e7eb      	b.n	8004b5c <_printf_i+0x208>
 8004b84:	2500      	movs	r5, #0
 8004b86:	f104 0619 	add.w	r6, r4, #25
 8004b8a:	e7f5      	b.n	8004b78 <_printf_i+0x224>
 8004b8c:	08004f73 	.word	0x08004f73
 8004b90:	08004f84 	.word	0x08004f84

08004b94 <__sflush_r>:
 8004b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	0716      	lsls	r6, r2, #28
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	d454      	bmi.n	8004c4c <__sflush_r+0xb8>
 8004ba2:	684b      	ldr	r3, [r1, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dc02      	bgt.n	8004bae <__sflush_r+0x1a>
 8004ba8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd48      	ble.n	8004c40 <__sflush_r+0xac>
 8004bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bb0:	2e00      	cmp	r6, #0
 8004bb2:	d045      	beq.n	8004c40 <__sflush_r+0xac>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bba:	682f      	ldr	r7, [r5, #0]
 8004bbc:	6a21      	ldr	r1, [r4, #32]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	d030      	beq.n	8004c24 <__sflush_r+0x90>
 8004bc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	0759      	lsls	r1, r3, #29
 8004bc8:	d505      	bpl.n	8004bd6 <__sflush_r+0x42>
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bd0:	b10b      	cbz	r3, 8004bd6 <__sflush_r+0x42>
 8004bd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4628      	mov	r0, r5
 8004bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bdc:	6a21      	ldr	r1, [r4, #32]
 8004bde:	47b0      	blx	r6
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	d106      	bne.n	8004bf4 <__sflush_r+0x60>
 8004be6:	6829      	ldr	r1, [r5, #0]
 8004be8:	291d      	cmp	r1, #29
 8004bea:	d82b      	bhi.n	8004c44 <__sflush_r+0xb0>
 8004bec:	4a28      	ldr	r2, [pc, #160]	@ (8004c90 <__sflush_r+0xfc>)
 8004bee:	410a      	asrs	r2, r1
 8004bf0:	07d6      	lsls	r6, r2, #31
 8004bf2:	d427      	bmi.n	8004c44 <__sflush_r+0xb0>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	6062      	str	r2, [r4, #4]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	04d9      	lsls	r1, r3, #19
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	d504      	bpl.n	8004c0a <__sflush_r+0x76>
 8004c00:	1c42      	adds	r2, r0, #1
 8004c02:	d101      	bne.n	8004c08 <__sflush_r+0x74>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b903      	cbnz	r3, 8004c0a <__sflush_r+0x76>
 8004c08:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c0c:	602f      	str	r7, [r5, #0]
 8004c0e:	b1b9      	cbz	r1, 8004c40 <__sflush_r+0xac>
 8004c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d002      	beq.n	8004c1e <__sflush_r+0x8a>
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7ff fbf3 	bl	8004404 <_free_r>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c22:	e00d      	b.n	8004c40 <__sflush_r+0xac>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	1c50      	adds	r0, r2, #1
 8004c2e:	d1c9      	bne.n	8004bc4 <__sflush_r+0x30>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0c6      	beq.n	8004bc4 <__sflush_r+0x30>
 8004c36:	2b1d      	cmp	r3, #29
 8004c38:	d001      	beq.n	8004c3e <__sflush_r+0xaa>
 8004c3a:	2b16      	cmp	r3, #22
 8004c3c:	d11d      	bne.n	8004c7a <__sflush_r+0xe6>
 8004c3e:	602f      	str	r7, [r5, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e021      	b.n	8004c88 <__sflush_r+0xf4>
 8004c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c48:	b21b      	sxth	r3, r3
 8004c4a:	e01a      	b.n	8004c82 <__sflush_r+0xee>
 8004c4c:	690f      	ldr	r7, [r1, #16]
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d0f6      	beq.n	8004c40 <__sflush_r+0xac>
 8004c52:	0793      	lsls	r3, r2, #30
 8004c54:	bf18      	it	ne
 8004c56:	2300      	movne	r3, #0
 8004c58:	680e      	ldr	r6, [r1, #0]
 8004c5a:	bf08      	it	eq
 8004c5c:	694b      	ldreq	r3, [r1, #20]
 8004c5e:	1bf6      	subs	r6, r6, r7
 8004c60:	600f      	str	r7, [r1, #0]
 8004c62:	608b      	str	r3, [r1, #8]
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	ddeb      	ble.n	8004c40 <__sflush_r+0xac>
 8004c68:	4633      	mov	r3, r6
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	6a21      	ldr	r1, [r4, #32]
 8004c70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c74:	47e0      	blx	ip
 8004c76:	2800      	cmp	r0, #0
 8004c78:	dc07      	bgt.n	8004c8a <__sflush_r+0xf6>
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8a:	4407      	add	r7, r0
 8004c8c:	1a36      	subs	r6, r6, r0
 8004c8e:	e7e9      	b.n	8004c64 <__sflush_r+0xd0>
 8004c90:	dfbffffe 	.word	0xdfbffffe

08004c94 <_fflush_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	4605      	mov	r5, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	b913      	cbnz	r3, 8004ca4 <_fflush_r+0x10>
 8004c9e:	2500      	movs	r5, #0
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	b118      	cbz	r0, 8004cae <_fflush_r+0x1a>
 8004ca6:	6a03      	ldr	r3, [r0, #32]
 8004ca8:	b90b      	cbnz	r3, 8004cae <_fflush_r+0x1a>
 8004caa:	f7ff f99f 	bl	8003fec <__sinit>
 8004cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f3      	beq.n	8004c9e <_fflush_r+0xa>
 8004cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cb8:	07d0      	lsls	r0, r2, #31
 8004cba:	d404      	bmi.n	8004cc6 <_fflush_r+0x32>
 8004cbc:	0599      	lsls	r1, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_fflush_r+0x32>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cc2:	f7ff fb9c 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	4621      	mov	r1, r4
 8004cca:	f7ff ff63 	bl	8004b94 <__sflush_r>
 8004cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	07da      	lsls	r2, r3, #31
 8004cd4:	d4e4      	bmi.n	8004ca0 <_fflush_r+0xc>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	059b      	lsls	r3, r3, #22
 8004cda:	d4e1      	bmi.n	8004ca0 <_fflush_r+0xc>
 8004cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cde:	f7ff fb8f 	bl	8004400 <__retarget_lock_release_recursive>
 8004ce2:	e7dd      	b.n	8004ca0 <_fflush_r+0xc>

08004ce4 <__swhatbuf_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cec:	4615      	mov	r5, r2
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	461e      	mov	r6, r3
 8004cf2:	b096      	sub	sp, #88	@ 0x58
 8004cf4:	da0c      	bge.n	8004d10 <__swhatbuf_r+0x2c>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cfe:	bf14      	ite	ne
 8004d00:	2340      	movne	r3, #64	@ 0x40
 8004d02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d06:	2000      	movs	r0, #0
 8004d08:	6031      	str	r1, [r6, #0]
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	b016      	add	sp, #88	@ 0x58
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	466a      	mov	r2, sp
 8004d12:	f000 f849 	bl	8004da8 <_fstat_r>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	dbed      	blt.n	8004cf6 <__swhatbuf_r+0x12>
 8004d1a:	9901      	ldr	r1, [sp, #4]
 8004d1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d24:	4259      	negs	r1, r3
 8004d26:	4159      	adcs	r1, r3
 8004d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d2c:	e7eb      	b.n	8004d06 <__swhatbuf_r+0x22>

08004d2e <__smakebuf_r>:
 8004d2e:	898b      	ldrh	r3, [r1, #12]
 8004d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d32:	079d      	lsls	r5, r3, #30
 8004d34:	4606      	mov	r6, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	d507      	bpl.n	8004d4a <__smakebuf_r+0x1c>
 8004d3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	2301      	movs	r3, #1
 8004d44:	6163      	str	r3, [r4, #20]
 8004d46:	b003      	add	sp, #12
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4a:	466a      	mov	r2, sp
 8004d4c:	ab01      	add	r3, sp, #4
 8004d4e:	f7ff ffc9 	bl	8004ce4 <__swhatbuf_r>
 8004d52:	9f00      	ldr	r7, [sp, #0]
 8004d54:	4605      	mov	r5, r0
 8004d56:	4639      	mov	r1, r7
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f7ff fbbd 	bl	80044d8 <_malloc_r>
 8004d5e:	b948      	cbnz	r0, 8004d74 <__smakebuf_r+0x46>
 8004d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d64:	059a      	lsls	r2, r3, #22
 8004d66:	d4ee      	bmi.n	8004d46 <__smakebuf_r+0x18>
 8004d68:	f023 0303 	bic.w	r3, r3, #3
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	e7e2      	b.n	8004d3a <__smakebuf_r+0xc>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	9b01      	ldr	r3, [sp, #4]
 8004d82:	6020      	str	r0, [r4, #0]
 8004d84:	b15b      	cbz	r3, 8004d9e <__smakebuf_r+0x70>
 8004d86:	4630      	mov	r0, r6
 8004d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d8c:	f000 f81e 	bl	8004dcc <_isatty_r>
 8004d90:	b128      	cbz	r0, 8004d9e <__smakebuf_r+0x70>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	431d      	orrs	r5, r3
 8004da2:	81a5      	strh	r5, [r4, #12]
 8004da4:	e7cf      	b.n	8004d46 <__smakebuf_r+0x18>
	...

08004da8 <_fstat_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d06      	ldr	r5, [pc, #24]	@ (8004dc8 <_fstat_r+0x20>)
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	f7fc f8f5 	bl	8000fa4 <_fstat>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d102      	bne.n	8004dc4 <_fstat_r+0x1c>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b103      	cbz	r3, 8004dc4 <_fstat_r+0x1c>
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200004b0 	.word	0x200004b0

08004dcc <_isatty_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4d05      	ldr	r5, [pc, #20]	@ (8004de8 <_isatty_r+0x1c>)
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fc f8f3 	bl	8000fc2 <_isatty>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_isatty_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_isatty_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	200004b0 	.word	0x200004b0

08004dec <_sbrk_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d05      	ldr	r5, [pc, #20]	@ (8004e08 <_sbrk_r+0x1c>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	f7fc f8fa 	bl	8000ff0 <_sbrk>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_sbrk_r+0x1a>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_sbrk_r+0x1a>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	200004b0 	.word	0x200004b0

08004e0c <memchr>:
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	b2c9      	uxtb	r1, r1
 8004e12:	4402      	add	r2, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	d101      	bne.n	8004e1e <memchr+0x12>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e003      	b.n	8004e26 <memchr+0x1a>
 8004e1e:	7804      	ldrb	r4, [r0, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	428c      	cmp	r4, r1
 8004e24:	d1f6      	bne.n	8004e14 <memchr+0x8>
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
