
robot_classify_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ec  080054ec  00007094  2**0
                  CONTENTS
  4 .ARM          00000000  080054ec  080054ec  00007094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054ec  080054ec  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000064ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080054f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000094  08005588  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08005588  000074ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd63  00000000  00000000  000070bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e52  00000000  00000000  00013e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00015c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a38  00000000  00000000  00016988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a733  00000000  00000000  000173c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edce  00000000  00000000  00031af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a759  00000000  00000000  000408c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db01a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  000db060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000deea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	080053b4 	.word	0x080053b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000098 	.word	0x20000098
 8000220:	080053b4 	.word	0x080053b4

08000224 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b29a      	uxth	r2, r3
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	68b9      	ldr	r1, [r7, #8]
 800023a:	4804      	ldr	r0, [pc, #16]	@ (800024c <_write+0x28>)
 800023c:	f003 fae7 	bl	800380e <HAL_UART_Transmit>
	return len;
 8000240:	687b      	ldr	r3, [r7, #4]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000188 	.word	0x20000188

08000250 <HAL_TIM_PeriodElapsedCallback>:
int fputc(int ch, FILE * f) {
  HAL_UART_Transmit( &huart1, (uint8_t * ) &ch, 1, UART_Delay);
  return ch;
}
#endif
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && flag_start_timer_x) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000260:	d17a      	bne.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000262:	4b79      	ldr	r3, [pc, #484]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d076      	beq.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
		if (!flag_at_position_x) {
 800026a:	4b78      	ldr	r3, [pc, #480]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f083 0301 	eor.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d02b      	beq.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x80>
			current_pulse_x++;
 8000278:	4b75      	ldr	r3, [pc, #468]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a74      	ldr	r2, [pc, #464]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000280:	6013      	str	r3, [r2, #0]
			if (current_pulse_x >= arr_pulse[index_array]) {
 8000282:	4b74      	ldr	r3, [pc, #464]	@ (8000454 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a74      	ldr	r2, [pc, #464]	@ (8000458 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4b70      	ldr	r3, [pc, #448]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	dc1d      	bgt.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x80>
				__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 0);
 8000294:	4b71      	ldr	r3, [pc, #452]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2200      	movs	r2, #0
 800029a:	639a      	str	r2, [r3, #56]	@ 0x38
				flag_at_position_x = true;
 800029c:	4b6b      	ldr	r3, [pc, #428]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
				flag_return_home_x = true;
 80002a2:	4b6f      	ldr	r3, [pc, #444]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
				state_dir = HAL_GPIO_ReadPin(DIRX_GPIO_Port, DIRX_Pin);
 80002a8:	2120      	movs	r1, #32
 80002aa:	486e      	ldr	r0, [pc, #440]	@ (8000464 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80002ac:	f001 fc3a 	bl	8001b24 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b6c      	ldr	r3, [pc, #432]	@ (8000468 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002b6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, !state_dir);
 80002b8:	4b6b      	ldr	r3, [pc, #428]	@ (8000468 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	461a      	mov	r2, r3
 80002c8:	2120      	movs	r1, #32
 80002ca:	4866      	ldr	r0, [pc, #408]	@ (8000464 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80002cc:	f001 fc41 	bl	8001b52 <HAL_GPIO_WritePin>
			}
		}
		if (flag_return_home_x) {
 80002d0:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d03f      	beq.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
			if (count_wait_drop_object < 2000) {
 80002d8:	4b64      	ldr	r3, [pc, #400]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80002e0:	da05      	bge.n	80002ee <HAL_TIM_PeriodElapsedCallback+0x9e>
				count_wait_drop_object++;
 80002e2:	4b62      	ldr	r3, [pc, #392]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a60      	ldr	r2, [pc, #384]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	e034      	b.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
			} else if (count_wait_drop_object >= 2000) {
 80002ee:	4b5f      	ldr	r3, [pc, #380]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80002f6:	db2f      	blt.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
				HAL_GPIO_WritePin(GRAB_OBJECT_GPIO_Port, GRAB_OBJECT_Pin,
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002fe:	485c      	ldr	r0, [pc, #368]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000300:	f001 fc27 	bl	8001b52 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET); // drop
				__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 8000304:	4b55      	ldr	r3, [pc, #340]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2228      	movs	r2, #40	@ 0x28
 800030a:	639a      	str	r2, [r3, #56]	@ 0x38
				current_pulse_x--;
 800030c:	4b50      	ldr	r3, [pc, #320]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	4a4f      	ldr	r2, [pc, #316]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000314:	6013      	str	r3, [r2, #0]
				if (current_pulse_x <= 0) {
 8000316:	4b4e      	ldr	r3, [pc, #312]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	dc1c      	bgt.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x108>
					__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 0);
 800031e:	4b4f      	ldr	r3, [pc, #316]	@ (800045c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2200      	movs	r2, #0
 8000324:	639a      	str	r2, [r3, #56]	@ 0x38
					flag_return_home_x = false;
 8000326:	4b4e      	ldr	r3, [pc, #312]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
					flag_start_timer_x = false;
 800032c:	4b46      	ldr	r3, [pc, #280]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
					current_pulse_x = 0;
 8000332:	4b47      	ldr	r3, [pc, #284]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
					index_current_command++;
 8000338:	4b4e      	ldr	r3, [pc, #312]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a4d      	ldr	r2, [pc, #308]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000340:	6013      	str	r3, [r2, #0]
					flag_finish_task = true;
 8000342:	4b4d      	ldr	r3, [pc, #308]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000344:	2201      	movs	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
					count_wait_drop_object = 0;
 8000348:	4b48      	ldr	r3, [pc, #288]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port,
 800034e:	2201      	movs	r2, #1
 8000350:	2180      	movs	r1, #128	@ 0x80
 8000352:	4844      	ldr	r0, [pc, #272]	@ (8000464 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000354:	f001 fbfd 	bl	8001b52 <HAL_GPIO_WritePin>
					STATE_CONVEYOR_Pin, GPIO_PIN_SET);
				}
			}
		}
	}
	if (htim->Instance == TIM3 && flag_start_timer_y)  // grab
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a47      	ldr	r2, [pc, #284]	@ (800047c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d16e      	bne.n	8000440 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8000362:	4b47      	ldr	r3, [pc, #284]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d06a      	beq.n	8000440 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			{
		if (!flag_at_position_y) {
 800036a:	4b46      	ldr	r3, [pc, #280]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	f083 0301 	eor.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d032      	beq.n	80003de <HAL_TIM_PeriodElapsedCallback+0x18e>
			current_pulse_y++;
 8000378:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	4a42      	ldr	r2, [pc, #264]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000380:	6013      	str	r3, [r2, #0]
			if (current_pulse_y >= pulse_to_grab_object) {
 8000382:	4b41      	ldr	r3, [pc, #260]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b41      	ldr	r3, [pc, #260]	@ (800048c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	db27      	blt.n	80003de <HAL_TIM_PeriodElapsedCallback+0x18e>
				HAL_TIM_PWM_Stop(&htim3, Y_AXIS);
 800038e:	2100      	movs	r1, #0
 8000390:	483f      	ldr	r0, [pc, #252]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000392:	f002 fa0f 	bl	80027b4 <HAL_TIM_PWM_Stop>
				flag_at_position_y = true;
 8000396:	4b3b      	ldr	r3, [pc, #236]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
				flag_return_home_y = true;
 800039c:	4b3d      	ldr	r3, [pc, #244]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
				state_dir = HAL_GPIO_ReadPin(DIRY_GPIO_Port, DIRY_Pin);
 80003a2:	2101      	movs	r1, #1
 80003a4:	4832      	ldr	r0, [pc, #200]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80003a6:	f001 fbbd 	bl	8001b24 <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000468 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80003b0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, !state_dir);
 80003b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bf0c      	ite	eq
 80003ba:	2301      	moveq	r3, #1
 80003bc:	2300      	movne	r3, #0
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	2101      	movs	r1, #1
 80003c4:	482a      	ldr	r0, [pc, #168]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80003c6:	f001 fbc4 	bl	8001b52 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GRAB_OBJECT_GPIO_Port, GRAB_OBJECT_Pin,
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003d0:	4827      	ldr	r0, [pc, #156]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80003d2:	f001 fbbe 	bl	8001b52 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_TIM_PWM_Start(&htim3, Y_AXIS);
 80003d6:	2100      	movs	r1, #0
 80003d8:	482d      	ldr	r0, [pc, #180]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80003da:	f002 f931 	bl	8002640 <HAL_TIM_PWM_Start>

			}
		}
		if (flag_return_home_y) {
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d02c      	beq.n	8000440 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			current_pulse_y--;
 80003e6:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a26      	ldr	r2, [pc, #152]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80003ee:	6013      	str	r3, [r2, #0]
			if (current_pulse_y <= 0) {
 80003f0:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dc23      	bgt.n	8000440 <HAL_TIM_PeriodElapsedCallback+0x1f0>
				HAL_TIM_Base_Stop_IT(&htim3);
 80003f8:	4825      	ldr	r0, [pc, #148]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80003fa:	f002 f89b 	bl	8002534 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim3, Y_AXIS);
 80003fe:	2100      	movs	r1, #0
 8000400:	4823      	ldr	r0, [pc, #140]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000402:	f002 f9d7 	bl	80027b4 <HAL_TIM_PWM_Stop>
				flag_return_home_y = false;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
				current_pulse_y = 0;
 800040c:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
				flag_start_timer_y = false;
 8000412:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
				uart_command[index_uart_command] = robot_move_command;
 8000418:	4b1f      	ldr	r3, [pc, #124]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1f      	ldr	r2, [pc, #124]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	491f      	ldr	r1, [pc, #124]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				index_uart_command++;
 8000426:	4b1c      	ldr	r3, [pc, #112]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a1a      	ldr	r2, [pc, #104]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800042e:	6013      	str	r3, [r2, #0]
				index_current_command++;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	4a0f      	ldr	r2, [pc, #60]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000438:	6013      	str	r3, [r2, #0]
				flag_finish_task = true;
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]

			}
		}
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200001f3 	.word	0x200001f3
 800044c:	200001f2 	.word	0x200001f2
 8000450:	200001d0 	.word	0x200001d0
 8000454:	200001d8 	.word	0x200001d8
 8000458:	20000018 	.word	0x20000018
 800045c:	200000f8 	.word	0x200000f8
 8000460:	200001f0 	.word	0x200001f0
 8000464:	40011000 	.word	0x40011000
 8000468:	200001dc 	.word	0x200001dc
 800046c:	20000394 	.word	0x20000394
 8000470:	40010c00 	.word	0x40010c00
 8000474:	20000390 	.word	0x20000390
 8000478:	20000014 	.word	0x20000014
 800047c:	40000400 	.word	0x40000400
 8000480:	200001f4 	.word	0x200001f4
 8000484:	200001ef 	.word	0x200001ef
 8000488:	200001d4 	.word	0x200001d4
 800048c:	20000028 	.word	0x20000028
 8000490:	20000140 	.word	0x20000140
 8000494:	200001f1 	.word	0x200001f1
 8000498:	2000038c 	.word	0x2000038c
 800049c:	20000388 	.word	0x20000388
 80004a0:	200001f8 	.word	0x200001f8

080004a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SIG_STOP_CONVEYOR_Pin) {
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	2b20      	cmp	r3, #32
 80004b2:	d12a      	bne.n	800050a <HAL_GPIO_EXTI_Callback+0x66>
		HAL_Delay(300);
 80004b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004b8:	f000 ff2c 	bl	8001314 <HAL_Delay>
		uart_command[index_uart_command] = grab_object;
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x70>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a15      	ldr	r2, [pc, #84]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x74>)
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	4915      	ldr	r1, [pc, #84]	@ (800051c <HAL_GPIO_EXTI_Callback+0x78>)
 80004c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("uart_command: %s\n", uart_command[index_uart_command]);
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x70>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a13      	ldr	r2, [pc, #76]	@ (800051c <HAL_GPIO_EXTI_Callback+0x78>)
 80004d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d4:	4619      	mov	r1, r3
 80004d6:	4812      	ldr	r0, [pc, #72]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x7c>)
 80004d8:	f004 f884 	bl	80045e4 <iprintf>
		index_uart_command++;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x70>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x70>)
 80004e4:	6013      	str	r3, [r2, #0]
		printf("This is interrupt\n");
 80004e6:	480f      	ldr	r0, [pc, #60]	@ (8000524 <HAL_GPIO_EXTI_Callback+0x80>)
 80004e8:	f004 f8e4 	bl	80046b4 <puts>
		HAL_Delay(500);
 80004ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f0:	f000 ff10 	bl	8001314 <HAL_Delay>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 80004f4:	2200      	movs	r2, #0
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <HAL_GPIO_EXTI_Callback+0x84>)
 80004fa:	f001 fb2a 	bl	8001b52 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		EXTI->PR = SIG_STOP_CONVEYOR_Pin;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <HAL_GPIO_EXTI_Callback+0x88>)
 8000500:	2220      	movs	r2, #32
 8000502:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIG_STOP_CONVEYOR_Pin);
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_GPIO_EXTI_Callback+0x88>)
 8000506:	2220      	movs	r2, #32
 8000508:	615a      	str	r2, [r3, #20]
	}
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000038c 	.word	0x2000038c
 8000518:	20000010 	.word	0x20000010
 800051c:	200001f8 	.word	0x200001f8
 8000520:	0800542c 	.word	0x0800542c
 8000524:	08005440 	.word	0x08005440
 8000528:	40011000 	.word	0x40011000
 800052c:	40010400 	.word	0x40010400

08000530 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <HAL_UART_RxCpltCallback+0x70>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d12b      	bne.n	800059a <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length_string);
 8000542:	220f      	movs	r2, #15
 8000544:	4917      	ldr	r1, [pc, #92]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 8000546:	4818      	ldr	r0, [pc, #96]	@ (80005a8 <HAL_UART_RxCpltCallback+0x78>)
 8000548:	f003 f9e4 	bl	8003914 <HAL_UART_Receive_IT>
		printf("Receive %s\n", rxByte);
 800054c:	4915      	ldr	r1, [pc, #84]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 800054e:	4817      	ldr	r0, [pc, #92]	@ (80005ac <HAL_UART_RxCpltCallback+0x7c>)
 8000550:	f004 f848 	bl	80045e4 <iprintf>
		if (!strncmp(rxByte, position2, length_string)
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <HAL_UART_RxCpltCallback+0x80>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	220f      	movs	r2, #15
 800055a:	4619      	mov	r1, r3
 800055c:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 800055e:	f004 f991 	bl	8004884 <strncmp>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d009      	beq.n	800057c <HAL_UART_RxCpltCallback+0x4c>
				|| !strncmp(rxByte, position3, length_string)) {
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_UART_RxCpltCallback+0x84>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	220f      	movs	r2, #15
 800056e:	4619      	mov	r1, r3
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 8000572:	f004 f987 	bl	8004884 <strncmp>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d103      	bne.n	8000584 <HAL_UART_RxCpltCallback+0x54>
			robot_move_command = rxByte;
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_UART_RxCpltCallback+0x88>)
 800057e:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 8000580:	601a      	str	r2, [r3, #0]
			return;
 8000582:	e00a      	b.n	800059a <HAL_UART_RxCpltCallback+0x6a>
		}
		uart_command[index_uart_command] = rxByte;
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_UART_RxCpltCallback+0x8c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <HAL_UART_RxCpltCallback+0x90>)
 800058a:	4906      	ldr	r1, [pc, #24]	@ (80005a4 <HAL_UART_RxCpltCallback+0x74>)
 800058c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		index_uart_command++;
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_UART_RxCpltCallback+0x8c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <HAL_UART_RxCpltCallback+0x8c>)
 8000598:	6013      	str	r3, [r2, #0]
	}
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40013800 	.word	0x40013800
 80005a4:	200001e0 	.word	0x200001e0
 80005a8:	20000188 	.word	0x20000188
 80005ac:	08005454 	.word	0x08005454
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000388 	.word	0x20000388
 80005bc:	2000038c 	.word	0x2000038c
 80005c0:	200001f8 	.word	0x200001f8

080005c4 <handle_command>:
void handle_command() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	if (!strncmp(uart_command[index_current_command], stop,
 80005c8:	4b6c      	ldr	r3, [pc, #432]	@ (800077c <handle_command+0x1b8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a6c      	ldr	r2, [pc, #432]	@ (8000780 <handle_command+0x1bc>)
 80005ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d2:	4a6c      	ldr	r2, [pc, #432]	@ (8000784 <handle_command+0x1c0>)
 80005d4:	6811      	ldr	r1, [r2, #0]
 80005d6:	220f      	movs	r2, #15
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f953 	bl	8004884 <strncmp>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d110      	bne.n	8000606 <handle_command+0x42>
	length_string)) {
		printf("Stop conveyor\n");
 80005e4:	4868      	ldr	r0, [pc, #416]	@ (8000788 <handle_command+0x1c4>)
 80005e6:	f004 f865 	bl	80046b4 <puts>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	4867      	ldr	r0, [pc, #412]	@ (800078c <handle_command+0x1c8>)
 80005f0:	f001 faaf 	bl	8001b52 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		flag_finish_task = true;
 80005f4:	4b66      	ldr	r3, [pc, #408]	@ (8000790 <handle_command+0x1cc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
		index_current_command++;
 80005fa:	4b60      	ldr	r3, [pc, #384]	@ (800077c <handle_command+0x1b8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a5e      	ldr	r2, [pc, #376]	@ (800077c <handle_command+0x1b8>)
 8000602:	6013      	str	r3, [r2, #0]
		return;
 8000604:	e0b8      	b.n	8000778 <handle_command+0x1b4>
	} else if (!strncmp(uart_command[index_current_command], grab_object,
 8000606:	4b5d      	ldr	r3, [pc, #372]	@ (800077c <handle_command+0x1b8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a5d      	ldr	r2, [pc, #372]	@ (8000780 <handle_command+0x1bc>)
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	4a60      	ldr	r2, [pc, #384]	@ (8000794 <handle_command+0x1d0>)
 8000612:	6811      	ldr	r1, [r2, #0]
 8000614:	220f      	movs	r2, #15
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f934 	bl	8004884 <strncmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d125      	bne.n	800066e <handle_command+0xaa>
	length_string)) {
		printf("Grab object\n");
 8000622:	485d      	ldr	r0, [pc, #372]	@ (8000798 <handle_command+0x1d4>)
 8000624:	f004 f846 	bl	80046b4 <puts>
		flag_at_position_y = false;
 8000628:	4b5c      	ldr	r3, [pc, #368]	@ (800079c <handle_command+0x1d8>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
		flag_return_home_y = false;
 800062e:	4b5c      	ldr	r3, [pc, #368]	@ (80007a0 <handle_command+0x1dc>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		flag_start_timer_y = true;
 8000634:	4b5b      	ldr	r3, [pc, #364]	@ (80007a4 <handle_command+0x1e0>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 800063a:	2200      	movs	r2, #0
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	4853      	ldr	r0, [pc, #332]	@ (800078c <handle_command+0x1c8>)
 8000640:	f001 fa87 	bl	8001b52 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, CW);
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	4857      	ldr	r0, [pc, #348]	@ (80007a8 <handle_command+0x1e4>)
 800064a:	f001 fa82 	bl	8001b52 <HAL_GPIO_WritePin>
		flag_finish_task = false;
 800064e:	4b50      	ldr	r3, [pc, #320]	@ (8000790 <handle_command+0x1cc>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000654:	4b55      	ldr	r3, [pc, #340]	@ (80007ac <handle_command+0x1e8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f06f 0201 	mvn.w	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim3);
 800065e:	4853      	ldr	r0, [pc, #332]	@ (80007ac <handle_command+0x1e8>)
 8000660:	f001 ff08 	bl	8002474 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim3, Y_AXIS);
 8000664:	2100      	movs	r1, #0
 8000666:	4851      	ldr	r0, [pc, #324]	@ (80007ac <handle_command+0x1e8>)
 8000668:	f002 f914 	bl	8002894 <HAL_TIM_PWM_Start_IT>
 800066c:	e084      	b.n	8000778 <handle_command+0x1b4>
	} else if (!strncmp(uart_command[index_current_command], start,
 800066e:	4b43      	ldr	r3, [pc, #268]	@ (800077c <handle_command+0x1b8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a43      	ldr	r2, [pc, #268]	@ (8000780 <handle_command+0x1bc>)
 8000674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000678:	4a4d      	ldr	r2, [pc, #308]	@ (80007b0 <handle_command+0x1ec>)
 800067a:	6811      	ldr	r1, [r2, #0]
 800067c:	220f      	movs	r2, #15
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f900 	bl	8004884 <strncmp>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d110      	bne.n	80006ac <handle_command+0xe8>
	length_string)) {
		printf("Start conveyor\n");
 800068a:	484a      	ldr	r0, [pc, #296]	@ (80007b4 <handle_command+0x1f0>)
 800068c:	f004 f812 	bl	80046b4 <puts>
		HAL_GPIO_WritePin(STATE_CONVEYOR_GPIO_Port, STATE_CONVEYOR_Pin,
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	483d      	ldr	r0, [pc, #244]	@ (800078c <handle_command+0x1c8>)
 8000696:	f001 fa5c 	bl	8001b52 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		flag_finish_task = true;
 800069a:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <handle_command+0x1cc>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		index_current_command++;
 80006a0:	4b36      	ldr	r3, [pc, #216]	@ (800077c <handle_command+0x1b8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a35      	ldr	r2, [pc, #212]	@ (800077c <handle_command+0x1b8>)
 80006a8:	6013      	str	r3, [r2, #0]
		return;
 80006aa:	e065      	b.n	8000778 <handle_command+0x1b4>
//		HAL_TIM_PWM_Start(&htim2, X_AXIS);
//		flag_at_position_x = false;
//		flag_return_home_x = false;
//		flag_start_timer_x = true;
//	}
	else if (!strncmp(uart_command[index_current_command], position2,
 80006ac:	4b33      	ldr	r3, [pc, #204]	@ (800077c <handle_command+0x1b8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a33      	ldr	r2, [pc, #204]	@ (8000780 <handle_command+0x1bc>)
 80006b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b6:	4a40      	ldr	r2, [pc, #256]	@ (80007b8 <handle_command+0x1f4>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	220f      	movs	r2, #15
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 f8e1 	bl	8004884 <strncmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d127      	bne.n	8000718 <handle_command+0x154>
	length_string)) {
		printf("Move position 2\n");
 80006c8:	483c      	ldr	r0, [pc, #240]	@ (80007bc <handle_command+0x1f8>)
 80006ca:	f003 fff3 	bl	80046b4 <puts>
		index_array = MODE_POSITION_2;
 80006ce:	4b3c      	ldr	r3, [pc, #240]	@ (80007c0 <handle_command+0x1fc>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, CW);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	482c      	ldr	r0, [pc, #176]	@ (800078c <handle_command+0x1c8>)
 80006da:	f001 fa3a 	bl	8001b52 <HAL_GPIO_WritePin>
		flag_at_position_x = false;
 80006de:	4b39      	ldr	r3, [pc, #228]	@ (80007c4 <handle_command+0x200>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		flag_return_home_x = false;
 80006e4:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <handle_command+0x204>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
		flag_start_timer_x = true;
 80006ea:	4b38      	ldr	r3, [pc, #224]	@ (80007cc <handle_command+0x208>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
		flag_finish_task = false;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <handle_command+0x1cc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80006f6:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <handle_command+0x20c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f06f 0201 	mvn.w	r2, #1
 80006fe:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim2);
 8000700:	4833      	ldr	r0, [pc, #204]	@ (80007d0 <handle_command+0x20c>)
 8000702:	f001 feb7 	bl	8002474 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, X_AXIS);
 8000706:	2104      	movs	r1, #4
 8000708:	4831      	ldr	r0, [pc, #196]	@ (80007d0 <handle_command+0x20c>)
 800070a:	f001 ff99 	bl	8002640 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 800070e:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <handle_command+0x20c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2228      	movs	r2, #40	@ 0x28
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38
 8000716:	e02f      	b.n	8000778 <handle_command+0x1b4>
//		HAL_TIM_PWM_Start(&htim2, X_AXIS);
//		flag_at_position_x = false;
//		flag_return_home_x = false;
//		flag_start_timer_x = true;
//	}
	else if (!strncmp(uart_command[index_current_command], position3,
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <handle_command+0x1b8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <handle_command+0x1bc>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	4a2c      	ldr	r2, [pc, #176]	@ (80007d4 <handle_command+0x210>)
 8000724:	6811      	ldr	r1, [r2, #0]
 8000726:	220f      	movs	r2, #15
 8000728:	4618      	mov	r0, r3
 800072a:	f004 f8ab 	bl	8004884 <strncmp>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d121      	bne.n	8000778 <handle_command+0x1b4>
	length_string)) {
		printf("Move position 3\n");
 8000734:	4828      	ldr	r0, [pc, #160]	@ (80007d8 <handle_command+0x214>)
 8000736:	f003 ffbd 	bl	80046b4 <puts>
		index_array = MODE_POSITION_3;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <handle_command+0x1fc>)
 800073c:	2202      	movs	r2, #2
 800073e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIRX_GPIO_Port, DIRX_Pin, CW);
 8000740:	2200      	movs	r2, #0
 8000742:	2120      	movs	r1, #32
 8000744:	4811      	ldr	r0, [pc, #68]	@ (800078c <handle_command+0x1c8>)
 8000746:	f001 fa04 	bl	8001b52 <HAL_GPIO_WritePin>
		flag_at_position_x = false;
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <handle_command+0x200>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		flag_return_home_x = false;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <handle_command+0x204>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		flag_start_timer_x = true;
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <handle_command+0x208>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
		flag_finish_task = false;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <handle_command+0x1cc>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		//	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
		HAL_TIM_Base_Start_IT(&htim2);
 8000762:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <handle_command+0x20c>)
 8000764:	f001 fe86 	bl	8002474 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, X_AXIS);
 8000768:	2104      	movs	r1, #4
 800076a:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <handle_command+0x20c>)
 800076c:	f001 ff68 	bl	8002640 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, X_AXIS, 40);
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <handle_command+0x20c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2228      	movs	r2, #40	@ 0x28
 8000776:	639a      	str	r2, [r3, #56]	@ 0x38
	}

}
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000390 	.word	0x20000390
 8000780:	200001f8 	.word	0x200001f8
 8000784:	20000000 	.word	0x20000000
 8000788:	08005460 	.word	0x08005460
 800078c:	40011000 	.word	0x40011000
 8000790:	20000014 	.word	0x20000014
 8000794:	20000010 	.word	0x20000010
 8000798:	08005470 	.word	0x08005470
 800079c:	200001ef 	.word	0x200001ef
 80007a0:	200001f1 	.word	0x200001f1
 80007a4:	200001f4 	.word	0x200001f4
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	20000140 	.word	0x20000140
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	0800547c 	.word	0x0800547c
 80007b8:	20000004 	.word	0x20000004
 80007bc:	080053dc 	.word	0x080053dc
 80007c0:	200001d8 	.word	0x200001d8
 80007c4:	200001f2 	.word	0x200001f2
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	200001f3 	.word	0x200001f3
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	20000008 	.word	0x20000008
 80007d8:	080053ec 	.word	0x080053ec

080007dc <control_robot>:
void control_robot() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	if (flag_finish_task) {
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <control_robot+0x14>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <control_robot+0x10>
		handle_command();
 80007e8:	f7ff feec 	bl	80005c4 <handle_command>
	}
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000014 	.word	0x20000014

080007f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f8:	f000 fd2a 	bl	8001250 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007fc:	f000 f816 	bl	800082c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000800:	f000 fa02 	bl	8000c08 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000804:	f000 f9d6 	bl	8000bb4 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000808:	f000 f8ea 	bl	80009e0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800080c:	f000 f95c 	bl	8000ac8 <MX_TIM3_Init>
	MX_TIM1_Init();
 8000810:	f000 f846 	bl	80008a0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length_string);
 8000814:	220f      	movs	r2, #15
 8000816:	4903      	ldr	r1, [pc, #12]	@ (8000824 <main+0x30>)
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <main+0x34>)
 800081a:	f003 f87b 	bl	8003914 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		control_robot();
 800081e:	f7ff ffdd 	bl	80007dc <control_robot>
 8000822:	e7fc      	b.n	800081e <main+0x2a>
 8000824:	200001e0 	.word	0x200001e0
 8000828:	20000188 	.word	0x20000188

0800082c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b090      	sub	sp, #64	@ 0x40
 8000830:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	2228      	movs	r2, #40	@ 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f004 f81a 	bl	8004874 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4618      	mov	r0, r3
 8000862:	f001 f9a7 	bl	8001bb4 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x44>
		Error_Handler();
 800086c:	f000 fa54 	bl	8000d18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fc15 	bl	80020b8 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x6c>
		Error_Handler();
 8000894:	f000 fa40 	bl	8000d18 <Error_Handler>
	}
}
 8000898:	bf00      	nop
 800089a:	3740      	adds	r7, #64	@ 0x40
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b096      	sub	sp, #88	@ 0x58
 80008a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2220      	movs	r2, #32
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 ffcb 	bl	8004874 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008e0:	4a3e      	ldr	r2, [pc, #248]	@ (80009dc <MX_TIM1_Init+0x13c>)
 80008e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80 - 1;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008e6:	224f      	movs	r2, #79	@ 0x4f
 80008e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50 - 1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008f2:	2231      	movs	r2, #49	@ 0x31
 80008f4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b38      	ldr	r3, [pc, #224]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008fc:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b35      	ldr	r3, [pc, #212]	@ (80009d8 <MX_TIM1_Init+0x138>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000908:	4833      	ldr	r0, [pc, #204]	@ (80009d8 <MX_TIM1_Init+0x138>)
 800090a:	f001 fd63 	bl	80023d4 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x78>
		Error_Handler();
 8000914:	f000 fa00 	bl	8000d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800091e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000922:	4619      	mov	r1, r3
 8000924:	482c      	ldr	r0, [pc, #176]	@ (80009d8 <MX_TIM1_Init+0x138>)
 8000926:	f002 fa87 	bl	8002e38 <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x94>
		Error_Handler();
 8000930:	f000 f9f2 	bl	8000d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000934:	4828      	ldr	r0, [pc, #160]	@ (80009d8 <MX_TIM1_Init+0x138>)
 8000936:	f001 fe2b 	bl	8002590 <HAL_TIM_PWM_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8000940:	f000 f9ea 	bl	8000d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800094c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000950:	4619      	mov	r1, r3
 8000952:	4821      	ldr	r0, [pc, #132]	@ (80009d8 <MX_TIM1_Init+0x138>)
 8000954:	f002 fe3c 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800095e:	f000 f9db 	bl	8000d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2360      	movs	r3, #96	@ 0x60
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 20 - 1;
 8000966:	2313      	movs	r3, #19
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_TIM1_Init+0x138>)
 8000988:	f002 f994 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8000992:	f000 f9c1 	bl	8000d18 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ae:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80009ba:	f002 fe75 	bl	80036a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80009c4:	f000 f9a8 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MX_TIM1_Init+0x138>)
 80009ca:	f000 fa51 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3758      	adds	r7, #88	@ 0x58
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000b0 	.word	0x200000b0
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	@ 0x38
 80009e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a16:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a1a:	224f      	movs	r2, #79	@ 0x4f
 8000a1c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 50 - 1;
 8000a24:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a26:	2231      	movs	r2, #49	@ 0x31
 8000a28:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a36:	4823      	ldr	r0, [pc, #140]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a38:	f001 fccc 	bl	80023d4 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x66>
		Error_Handler();
 8000a42:	f000 f969 	bl	8000d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a50:	4619      	mov	r1, r3
 8000a52:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a54:	f002 f9f0 	bl	8002e38 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x82>
		Error_Handler();
 8000a5e:	f000 f95b 	bl	8000d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000a62:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a64:	f001 fd94 	bl	8002590 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x92>
		Error_Handler();
 8000a6e:	f000 f953 	bl	8000d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4810      	ldr	r0, [pc, #64]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000a82:	f002 fda5 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000a8c:	f000 f944 	bl	8000d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	2360      	movs	r3, #96	@ 0x60
 8000a92:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 20 - 1;
 8000a94:	2313      	movs	r3, #19
 8000a96:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000aa8:	f002 f904 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000ab2:	f000 f931 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_TIM2_Init+0xe4>)
 8000ab8:	f000 f9da 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3738      	adds	r7, #56	@ 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000f8 	.word	0x200000f8

08000ac8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	@ 0x38
 8000acc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000afa:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb0 <MX_TIM3_Init+0xe8>)
 8000afc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80 - 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b00:	224f      	movs	r2, #79	@ 0x4f
 8000b02:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 200 - 1;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b0c:	22c7      	movs	r2, #199	@ 0xc7
 8000b0e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000b1c:	4823      	ldr	r0, [pc, #140]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b1e:	f001 fc59 	bl	80023d4 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x64>
		Error_Handler();
 8000b28:	f000 f8f6 	bl	8000d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000b32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b36:	4619      	mov	r1, r3
 8000b38:	481c      	ldr	r0, [pc, #112]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b3a:	f002 f97d 	bl	8002e38 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x80>
		Error_Handler();
 8000b44:	f000 f8e8 	bl	8000d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000b48:	4818      	ldr	r0, [pc, #96]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b4a:	f001 fd21 	bl	8002590 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x90>
		Error_Handler();
 8000b54:	f000 f8e0 	bl	8000d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b68:	f002 fd32 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8000b72:	f000 f8d1 	bl	8000d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	2360      	movs	r3, #96	@ 0x60
 8000b78:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 8000b7a:	2364      	movs	r3, #100	@ 0x64
 8000b7c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b8e:	f002 f891 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000b98:	f000 f8be 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM3_Init+0xe4>)
 8000b9e:	f000 f967 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	@ 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000140 	.word	0x20000140
 8000bb0:	40000400 	.word	0x40000400

08000bb4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <MX_USART1_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bec:	f002 fdbf 	bl	800376e <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000bf6:	f000 f88f 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000188 	.word	0x20000188
 8000c04:	40013800 	.word	0x40013800

08000c08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a39      	ldr	r2, [pc, #228]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c22:	f043 0320 	orr.w	r3, r3, #32
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b37      	ldr	r3, [pc, #220]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b34      	ldr	r3, [pc, #208]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a33      	ldr	r2, [pc, #204]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a2d      	ldr	r2, [pc, #180]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a27      	ldr	r2, [pc, #156]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_GPIO_Init+0x100>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, DIRX_Pin | STATE_CONVEYOR_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	21a0      	movs	r1, #160	@ 0xa0
 8000c80:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <MX_GPIO_Init+0x104>)
 8000c82:	f000 ff66 	bl	8001b52 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4821      	ldr	r0, [pc, #132]	@ (8000d10 <MX_GPIO_Init+0x108>)
 8000c8c:	f000 ff61 	bl	8001b52 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GRAB_OBJECT_Pin | ENABLE_Y_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f248 0140 	movw	r1, #32832	@ 0x8040
 8000c96:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <MX_GPIO_Init+0x108>)
 8000c98:	f000 ff5b 	bl	8001b52 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DIRX_Pin STATE_CONVEYOR_Pin */
	GPIO_InitStruct.Pin = DIRX_Pin | STATE_CONVEYOR_Pin;
 8000c9c:	23a0      	movs	r3, #160	@ 0xa0
 8000c9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4816      	ldr	r0, [pc, #88]	@ (8000d0c <MX_GPIO_Init+0x104>)
 8000cb4:	f000 fda2 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DIRY_Pin GRAB_OBJECT_Pin ENABLE_Y_Pin */
	GPIO_InitStruct.Pin = DIRY_Pin | GRAB_OBJECT_Pin | ENABLE_Y_Pin;
 8000cb8:	f248 0341 	movw	r3, #32833	@ 0x8041
 8000cbc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480f      	ldr	r0, [pc, #60]	@ (8000d10 <MX_GPIO_Init+0x108>)
 8000cd2:	f000 fd93 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SIG_STOP_CONVEYOR_Pin */
	GPIO_InitStruct.Pin = SIG_STOP_CONVEYOR_Pin;
 8000cd6:	2320      	movs	r3, #32
 8000cd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_GPIO_Init+0x10c>)
 8000cdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SIG_STOP_CONVEYOR_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_GPIO_Init+0x108>)
 8000cea:	f000 fd87 	bl	80017fc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2017      	movs	r0, #23
 8000cf4:	f000 fc09 	bl	800150a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf8:	2017      	movs	r0, #23
 8000cfa:	f000 fc22 	bl	8001542 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	10210000 	.word	0x10210000

08000d18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a33      	ldr	r2, [pc, #204]	@ (8000e64 <HAL_TIM_Base_MspInit+0xdc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2018      	movs	r0, #24
 8000db8:	f000 fba7 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000dbc:	2018      	movs	r0, #24
 8000dbe:	f000 fbc0 	bl	8001542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f000 fb9f 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f000 fbb8 	bl	8001542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201a      	movs	r0, #26
 8000dd8:	f000 fb97 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000ddc:	201a      	movs	r0, #26
 8000dde:	f000 fbb0 	bl	8001542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201b      	movs	r0, #27
 8000de8:	f000 fb8f 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dec:	201b      	movs	r0, #27
 8000dee:	f000 fba8 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000df2:	e032      	b.n	8000e5a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d114      	bne.n	8000e28 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	201c      	movs	r0, #28
 8000e1c:	f000 fb75 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e20:	201c      	movs	r0, #28
 8000e22:	f000 fb8e 	bl	8001542 <HAL_NVIC_EnableIRQ>
}
 8000e26:	e018      	b.n	8000e5a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <HAL_TIM_Base_MspInit+0xe4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d113      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_TIM_Base_MspInit+0xe0>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	201d      	movs	r0, #29
 8000e50:	f000 fb5b 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e54:	201d      	movs	r0, #29
 8000e56:	f000 fb74 	bl	8001542 <HAL_NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000400 	.word	0x40000400

08000e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <HAL_TIM_MspPostInit+0xd4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d119      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a2c      	ldr	r2, [pc, #176]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4823      	ldr	r0, [pc, #140]	@ (8000f4c <HAL_TIM_MspPostInit+0xdc>)
 8000ebe:	f000 fc9d 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ec2:	e03a      	b.n	8000f3a <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ecc:	d118      	bne.n	8000f00 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <HAL_TIM_MspPostInit+0xdc>)
 8000efa:	f000 fc7f 	bl	80017fc <HAL_GPIO_Init>
}
 8000efe:	e01c      	b.n	8000f3a <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_TIM_MspPostInit+0xe0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d117      	bne.n	8000f3a <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_TIM_MspPostInit+0xd8>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f22:	2340      	movs	r3, #64	@ 0x40
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <HAL_TIM_MspPostInit+0xdc>)
 8000f36:	f000 fc61 	bl	80017fc <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40000400 	.word	0x40000400

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <HAL_UART_MspInit+0x9c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d139      	bne.n	8000fe8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <HAL_UART_MspInit+0xa4>)
 8000fba:	f000 fc1f 	bl	80017fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <HAL_UART_MspInit+0xa4>)
 8000fd4:	f000 fc12 	bl	80017fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2025      	movs	r0, #37	@ 0x25
 8000fde:	f000 fa94 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fe2:	2025      	movs	r0, #37	@ 0x25
 8000fe4:	f000 faad 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f946 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIG_STOP_CONVEYOR_Pin);
 8001058:	2020      	movs	r0, #32
 800105a:	f000 fd93 	bl	8001b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM1_BRK_IRQHandler+0x10>)
 800106a:	f001 fd1b 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000b0 	.word	0x200000b0

08001078 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM1_UP_IRQHandler+0x10>)
 800107e:	f001 fd11 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000b0 	.word	0x200000b0

0800108c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001092:	f001 fd07 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000b0 	.word	0x200000b0

080010a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <TIM1_CC_IRQHandler+0x10>)
 80010a6:	f001 fcfd 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000b0 	.word	0x200000b0

080010b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <TIM2_IRQHandler+0x10>)
 80010ba:	f001 fcf3 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000f8 	.word	0x200000f8

080010c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <TIM3_IRQHandler+0x10>)
 80010ce:	f001 fce9 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000140 	.word	0x20000140

080010dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <USART1_IRQHandler+0x10>)
 80010e2:	f002 fc3d 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000188 	.word	0x20000188

080010f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001102:	f3af 8000 	nop.w
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
  }

  return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:
  }
  return len;
}

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001150:	605a      	str	r2, [r3, #4]
  return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
	...

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f003 fbba 	bl	8004934 <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000c000 	.word	0x2000c000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000398 	.word	0x20000398
 80011f4:	200004f0 	.word	0x200004f0

080011f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff fff8 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480b      	ldr	r0, [pc, #44]	@ (8001238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800120a:	490c      	ldr	r1, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001220:	4c09      	ldr	r4, [pc, #36]	@ (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f003 fb87 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fadf 	bl	80007f4 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001240:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 8001244:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001248:	200004ec 	.word	0x200004ec

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f947 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fd5a 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f95f 	bl	800155e <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f927 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000002c 	.word	0x2000002c
 80012d4:	20000034 	.word	0x20000034
 80012d8:	20000030 	.word	0x20000030

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000034 	.word	0x20000034
 80012fc:	2000039c 	.word	0x2000039c

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	@ (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	2000039c 	.word	0x2000039c

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000034 	.word	0x20000034

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	@ (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff90 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff2d 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff42 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff90 	bl	800144c <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5f 	bl	80013f8 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff35 	bl	80013c0 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e020      	b.n	80015e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020e 	bic.w	r2, r2, #14
 80015ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d005      	beq.n	8001610 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e0d6      	b.n	80017be <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 020e 	bic.w	r2, r2, #14
 800161e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b64      	ldr	r3, [pc, #400]	@ (80017c8 <HAL_DMA_Abort_IT+0x1dc>)
 8001638:	429a      	cmp	r2, r3
 800163a:	d958      	bls.n	80016ee <HAL_DMA_Abort_IT+0x102>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a62      	ldr	r2, [pc, #392]	@ (80017cc <HAL_DMA_Abort_IT+0x1e0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d04f      	beq.n	80016e6 <HAL_DMA_Abort_IT+0xfa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a61      	ldr	r2, [pc, #388]	@ (80017d0 <HAL_DMA_Abort_IT+0x1e4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d048      	beq.n	80016e2 <HAL_DMA_Abort_IT+0xf6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a5f      	ldr	r2, [pc, #380]	@ (80017d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d040      	beq.n	80016dc <HAL_DMA_Abort_IT+0xf0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a5e      	ldr	r2, [pc, #376]	@ (80017d8 <HAL_DMA_Abort_IT+0x1ec>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d038      	beq.n	80016d6 <HAL_DMA_Abort_IT+0xea>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a5c      	ldr	r2, [pc, #368]	@ (80017dc <HAL_DMA_Abort_IT+0x1f0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d030      	beq.n	80016d0 <HAL_DMA_Abort_IT+0xe4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a5b      	ldr	r2, [pc, #364]	@ (80017e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d028      	beq.n	80016ca <HAL_DMA_Abort_IT+0xde>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a52      	ldr	r2, [pc, #328]	@ (80017c8 <HAL_DMA_Abort_IT+0x1dc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d020      	beq.n	80016c4 <HAL_DMA_Abort_IT+0xd8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <HAL_DMA_Abort_IT+0x1f8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_DMA_Abort_IT+0xd4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a55      	ldr	r2, [pc, #340]	@ (80017e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d012      	beq.n	80016bc <HAL_DMA_Abort_IT+0xd0>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a54      	ldr	r2, [pc, #336]	@ (80017ec <HAL_DMA_Abort_IT+0x200>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00a      	beq.n	80016b6 <HAL_DMA_Abort_IT+0xca>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_DMA_Abort_IT+0x204>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d102      	bne.n	80016b0 <HAL_DMA_Abort_IT+0xc4>
 80016aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ae:	e01b      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b4:	e018      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ba:	e015      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016bc:	2310      	movs	r3, #16
 80016be:	e013      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e011      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016c8:	e00e      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016ce:	e00b      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d4:	e008      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	e005      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e0:	e002      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016e2:	2310      	movs	r3, #16
 80016e4:	e000      	b.n	80016e8 <HAL_DMA_Abort_IT+0xfc>
 80016e6:	2301      	movs	r3, #1
 80016e8:	4a42      	ldr	r2, [pc, #264]	@ (80017f4 <HAL_DMA_Abort_IT+0x208>)
 80016ea:	6053      	str	r3, [r2, #4]
 80016ec:	e057      	b.n	800179e <HAL_DMA_Abort_IT+0x1b2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a36      	ldr	r2, [pc, #216]	@ (80017cc <HAL_DMA_Abort_IT+0x1e0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04f      	beq.n	8001798 <HAL_DMA_Abort_IT+0x1ac>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a34      	ldr	r2, [pc, #208]	@ (80017d0 <HAL_DMA_Abort_IT+0x1e4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d048      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1a8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a33      	ldr	r2, [pc, #204]	@ (80017d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d040      	beq.n	800178e <HAL_DMA_Abort_IT+0x1a2>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <HAL_DMA_Abort_IT+0x1ec>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d038      	beq.n	8001788 <HAL_DMA_Abort_IT+0x19c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a30      	ldr	r2, [pc, #192]	@ (80017dc <HAL_DMA_Abort_IT+0x1f0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d030      	beq.n	8001782 <HAL_DMA_Abort_IT+0x196>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2e      	ldr	r2, [pc, #184]	@ (80017e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d028      	beq.n	800177c <HAL_DMA_Abort_IT+0x190>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a26      	ldr	r2, [pc, #152]	@ (80017c8 <HAL_DMA_Abort_IT+0x1dc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d020      	beq.n	8001776 <HAL_DMA_Abort_IT+0x18a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <HAL_DMA_Abort_IT+0x1f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_DMA_Abort_IT+0x186>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a29      	ldr	r2, [pc, #164]	@ (80017e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d012      	beq.n	800176e <HAL_DMA_Abort_IT+0x182>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <HAL_DMA_Abort_IT+0x200>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00a      	beq.n	8001768 <HAL_DMA_Abort_IT+0x17c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <HAL_DMA_Abort_IT+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d102      	bne.n	8001762 <HAL_DMA_Abort_IT+0x176>
 800175c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001760:	e01b      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001766:	e018      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176c:	e015      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 800176e:	2310      	movs	r3, #16
 8001770:	e013      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001772:	2301      	movs	r3, #1
 8001774:	e011      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001776:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800177a:	e00e      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 800177c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001780:	e00b      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001786:	e008      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178c:	e005      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 800178e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001792:	e002      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001794:	2310      	movs	r3, #16
 8001796:	e000      	b.n	800179a <HAL_DMA_Abort_IT+0x1ae>
 8001798:	2301      	movs	r3, #1
 800179a:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <HAL_DMA_Abort_IT+0x20c>)
 800179c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    } 
  }
  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020080 	.word	0x40020080
 80017cc:	40020008 	.word	0x40020008
 80017d0:	4002001c 	.word	0x4002001c
 80017d4:	40020030 	.word	0x40020030
 80017d8:	40020044 	.word	0x40020044
 80017dc:	40020058 	.word	0x40020058
 80017e0:	4002006c 	.word	0x4002006c
 80017e4:	40020408 	.word	0x40020408
 80017e8:	4002041c 	.word	0x4002041c
 80017ec:	40020430 	.word	0x40020430
 80017f0:	40020444 	.word	0x40020444
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	@ 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e179      	b.n	8001b04 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001810:	2201      	movs	r2, #1
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8168 	bne.w	8001afe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a96      	ldr	r2, [pc, #600]	@ (8001a8c <HAL_GPIO_Init+0x290>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d05e      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	@ (8001a8c <HAL_GPIO_Init+0x290>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d875      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	@ (8001a90 <HAL_GPIO_Init+0x294>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d058      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	@ (8001a90 <HAL_GPIO_Init+0x294>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d86f      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	@ (8001a94 <HAL_GPIO_Init+0x298>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d052      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	@ (8001a94 <HAL_GPIO_Init+0x298>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d869      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001856:	4a90      	ldr	r2, [pc, #576]	@ (8001a98 <HAL_GPIO_Init+0x29c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d04c      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 800185c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a98 <HAL_GPIO_Init+0x29c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d863      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001862:	4a8e      	ldr	r2, [pc, #568]	@ (8001a9c <HAL_GPIO_Init+0x2a0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d046      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001868:	4a8c      	ldr	r2, [pc, #560]	@ (8001a9c <HAL_GPIO_Init+0x2a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d85d      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d82a      	bhi.n	80018c8 <HAL_GPIO_Init+0xcc>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d859      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <HAL_GPIO_Init+0x80>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018f7 	.word	0x080018f7
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018e3 	.word	0x080018e3
 8001888:	08001925 	.word	0x08001925
 800188c:	0800192b 	.word	0x0800192b
 8001890:	0800192b 	.word	0x0800192b
 8001894:	0800192b 	.word	0x0800192b
 8001898:	0800192b 	.word	0x0800192b
 800189c:	0800192b 	.word	0x0800192b
 80018a0:	0800192b 	.word	0x0800192b
 80018a4:	0800192b 	.word	0x0800192b
 80018a8:	0800192b 	.word	0x0800192b
 80018ac:	0800192b 	.word	0x0800192b
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	0800192b 	.word	0x0800192b
 80018b8:	0800192b 	.word	0x0800192b
 80018bc:	0800192b 	.word	0x0800192b
 80018c0:	080018d9 	.word	0x080018d9
 80018c4:	080018ed 	.word	0x080018ed
 80018c8:	4a75      	ldr	r2, [pc, #468]	@ (8001aa0 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ce:	e02c      	b.n	800192a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e029      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e024      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	3308      	adds	r3, #8
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e01f      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	330c      	adds	r3, #12
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e01a      	b.n	800192c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fe:	2304      	movs	r3, #4
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e013      	b.n	800192c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	611a      	str	r2, [r3, #16]
          break;
 8001916:	e009      	b.n	800192c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	615a      	str	r2, [r3, #20]
          break;
 8001922:	e003      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x130>
          break;
 800192a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2bff      	cmp	r3, #255	@ 0xff
 8001930:	d801      	bhi.n	8001936 <HAL_GPIO_Init+0x13a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <HAL_GPIO_Init+0x13e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	@ 0xff
 8001940:	d802      	bhi.n	8001948 <HAL_GPIO_Init+0x14c>
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x152>
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	3b08      	subs	r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	210f      	movs	r1, #15
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80c1 	beq.w	8001afe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197c:	4b49      	ldr	r3, [pc, #292]	@ (8001aa4 <HAL_GPIO_Init+0x2a8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a48      	ldr	r2, [pc, #288]	@ (8001aa4 <HAL_GPIO_Init+0x2a8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <HAL_GPIO_Init+0x2a8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001994:	4a44      	ldr	r2, [pc, #272]	@ (8001aa8 <HAL_GPIO_Init+0x2ac>)
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3c      	ldr	r2, [pc, #240]	@ (8001aac <HAL_GPIO_Init+0x2b0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01f      	beq.n	8001a00 <HAL_GPIO_Init+0x204>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <HAL_GPIO_Init+0x2b4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_GPIO_Init+0x200>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x1fc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a39      	ldr	r2, [pc, #228]	@ (8001ab8 <HAL_GPIO_Init+0x2bc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1f8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a38      	ldr	r2, [pc, #224]	@ (8001abc <HAL_GPIO_Init+0x2c0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1f4>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a37      	ldr	r2, [pc, #220]	@ (8001ac0 <HAL_GPIO_Init+0x2c4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1f0>
 80019e8:	2305      	movs	r3, #5
 80019ea:	e00a      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019ec:	2306      	movs	r3, #6
 80019ee:	e008      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	4925      	ldr	r1, [pc, #148]	@ (8001aa8 <HAL_GPIO_Init+0x2ac>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4924      	ldr	r1, [pc, #144]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4920      	ldr	r1, [pc, #128]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	491a      	ldr	r1, [pc, #104]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d025      	beq.n	8001ac8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4910      	ldr	r1, [pc, #64]	@ (8001ac4 <HAL_GPIO_Init+0x2c8>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e025      	b.n	8001ad6 <HAL_GPIO_Init+0x2da>
 8001a8a:	bf00      	nop
 8001a8c:	10320000 	.word	0x10320000
 8001a90:	10310000 	.word	0x10310000
 8001a94:	10220000 	.word	0x10220000
 8001a98:	10210000 	.word	0x10210000
 8001a9c:	10120000 	.word	0x10120000
 8001aa0:	10110000 	.word	0x10110000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	40011400 	.word	0x40011400
 8001abc:	40011800 	.word	0x40011800
 8001ac0:	40011c00 	.word	0x40011c00
 8001ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4913      	ldr	r1, [pc, #76]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	490e      	ldr	r1, [pc, #56]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4909      	ldr	r1, [pc, #36]	@ (8001b20 <HAL_GPIO_Init+0x324>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	3301      	adds	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f ae7e 	bne.w	8001810 <HAL_GPIO_Init+0x14>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	372c      	adds	r7, #44	@ 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc7e 	bl	80004a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e272      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e24c      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb36 	bl	8001300 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fb32 	bl	8001300 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb22 	bl	8001300 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fb1e 	bl	8001300 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ec      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fad7 	bl	8001300 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fad3 	bl	8001300 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fab6 	bl	8001300 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fab2 	bl	8001300 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e180      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fa96 	bl	8001300 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fa92 	bl	8001300 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e160      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 face 	bl	8002398 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa7c 	bl	8001300 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fa78 	bl	8001300 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e146      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fa39 	bl	8001300 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fa35 	bl	8001300 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	@ 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e103      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f9e9 	bl	8001300 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff f9e5 	bl	8001300 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0b1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff f9d3 	bl	8001300 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f9cf 	bl	8001300 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f9a3 	bl	8001300 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff f99f 	bl	8001300 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4921      	ldr	r1, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff f973 	bl	8001300 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff f96f 	bl	8001300 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e035      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff f95c 	bl	8001300 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f958 	bl	8001300 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e019      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_OscConfig+0x500>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff f8aa 	bl	8001300 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff f8a6 	bl	8001300 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f808 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	0800548c 	.word	0x0800548c
 8002284:	2000002c 	.word	0x2000002c
 8002288:	20000030 	.word	0x20000030

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x30>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ba:	e027      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	e027      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c5b      	lsrs	r3, r3, #17
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	693b      	ldr	r3, [r7, #16]
}
 8002314:	4618      	mov	r0, r3
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	080054a4 	.word	0x080054a4
 800232c:	080054b4 	.word	0x080054b4
 8002330:	003d0900 	.word	0x003d0900

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b02      	ldr	r3, [pc, #8]	@ (8002344 <HAL_RCC_GetHCLKFreq+0x10>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	2000002c 	.word	0x2000002c

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff2 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	@ (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	0800549c 	.word	0x0800549c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffde 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	0800549c 	.word	0x0800549c

08002398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <RCC_Delay+0x34>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <RCC_Delay+0x38>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a5b      	lsrs	r3, r3, #9
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b4:	bf00      	nop
  }
  while (Delay --);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f9      	bne.n	80023b4 <RCC_Delay+0x1c>
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	2000002c 	.word	0x2000002c
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fcc4 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fdfc 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e044      	b.n	8002516 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_TIM_Base_Start_IT+0xac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x6c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <HAL_TIM_Base_Start_IT+0xb0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x6c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d00e      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x6c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <HAL_TIM_Base_Start_IT+0xb4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x6c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a16      	ldr	r2, [pc, #88]	@ (800252c <HAL_TIM_Base_Start_IT+0xb8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x6c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <HAL_TIM_Base_Start_IT+0xbc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d010      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	e007      	b.n	8002514 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40013400 	.word	0x40013400
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40000c00 	.word	0x40000c00

08002534 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HAL_TIM_Base_Stop_IT+0x48>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	f240 4344 	movw	r3, #1092	@ 0x444
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_TIM_Base_Stop_IT+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e041      	b.n	8002626 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f839 	bl	800262e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 fd1e 	bl	8003010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_TIM_PWM_Start+0x24>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e022      	b.n	80026aa <HAL_TIM_PWM_Start+0x6a>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d109      	bne.n	800267e <HAL_TIM_PWM_Start+0x3e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	e015      	b.n	80026aa <HAL_TIM_PWM_Start+0x6a>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d109      	bne.n	8002698 <HAL_TIM_PWM_Start+0x58>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e008      	b.n	80026aa <HAL_TIM_PWM_Start+0x6a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e072      	b.n	8002798 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x82>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c0:	e013      	b.n	80026ea <HAL_TIM_PWM_Start+0xaa>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0x92>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d0:	e00b      	b.n	80026ea <HAL_TIM_PWM_Start+0xaa>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0xa2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026e0:	e003      	b.n	80026ea <HAL_TIM_PWM_Start+0xaa>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 ff48 	bl	8003588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <HAL_TIM_PWM_Start+0x160>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_TIM_PWM_Start+0xcc>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_TIM_PWM_Start+0x164>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_TIM_PWM_Start+0xd0>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_TIM_PWM_Start+0xd2>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_TIM_PWM_Start+0x160>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_TIM_PWM_Start+0x122>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <HAL_TIM_PWM_Start+0x164>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_TIM_PWM_Start+0x122>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002742:	d00e      	beq.n	8002762 <HAL_TIM_PWM_Start+0x122>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <HAL_TIM_PWM_Start+0x168>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_TIM_PWM_Start+0x122>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_TIM_PWM_Start+0x16c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_TIM_PWM_Start+0x122>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <HAL_TIM_PWM_Start+0x170>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d111      	bne.n	8002786 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d010      	beq.n	8002796 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	e007      	b.n	8002796 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40013400 	.word	0x40013400
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800
 80027b0:	40000c00 	.word	0x40000c00

080027b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fede 	bl	8003588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	@ (800288c <HAL_TIM_PWM_Stop+0xd8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIM_PWM_Stop+0x2c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <HAL_TIM_PWM_Stop+0xdc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_PWM_Stop+0x30>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_TIM_PWM_Stop+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d017      	beq.n	800281a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_PWM_Stop+0x66>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	f240 4344 	movw	r3, #1092	@ 0x444
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_TIM_PWM_Stop+0x66>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <HAL_TIM_PWM_Stop+0x96>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	f240 4344 	movw	r3, #1092	@ 0x444
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_TIM_PWM_Stop+0x96>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Stop+0xa6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002858:	e013      	b.n	8002882 <HAL_TIM_PWM_Stop+0xce>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d104      	bne.n	800286a <HAL_TIM_PWM_Stop+0xb6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002868:	e00b      	b.n	8002882 <HAL_TIM_PWM_Stop+0xce>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Stop+0xc6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002878:	e003      	b.n	8002882 <HAL_TIM_PWM_Stop+0xce>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40013400 	.word	0x40013400

08002894 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_TIM_PWM_Start_IT+0x28>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e022      	b.n	8002902 <HAL_TIM_PWM_Start_IT+0x6e>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d109      	bne.n	80028d6 <HAL_TIM_PWM_Start_IT+0x42>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e015      	b.n	8002902 <HAL_TIM_PWM_Start_IT+0x6e>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d109      	bne.n	80028f0 <HAL_TIM_PWM_Start_IT+0x5c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e008      	b.n	8002902 <HAL_TIM_PWM_Start_IT+0x6e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0bd      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <HAL_TIM_PWM_Start_IT+0x86>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002918:	e013      	b.n	8002942 <HAL_TIM_PWM_Start_IT+0xae>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d104      	bne.n	800292a <HAL_TIM_PWM_Start_IT+0x96>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002928:	e00b      	b.n	8002942 <HAL_TIM_PWM_Start_IT+0xae>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d104      	bne.n	800293a <HAL_TIM_PWM_Start_IT+0xa6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002938:	e003      	b.n	8002942 <HAL_TIM_PWM_Start_IT+0xae>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d841      	bhi.n	80029cc <HAL_TIM_PWM_Start_IT+0x138>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <HAL_TIM_PWM_Start_IT+0xbc>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029cd 	.word	0x080029cd
 8002958:	080029cd 	.word	0x080029cd
 800295c:	080029cd 	.word	0x080029cd
 8002960:	08002997 	.word	0x08002997
 8002964:	080029cd 	.word	0x080029cd
 8002968:	080029cd 	.word	0x080029cd
 800296c:	080029cd 	.word	0x080029cd
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029cd 	.word	0x080029cd
 8002978:	080029cd 	.word	0x080029cd
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029bb 	.word	0x080029bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0202 	orr.w	r2, r2, #2
 8002992:	60da      	str	r2, [r3, #12]
      break;
 8002994:	e01d      	b.n	80029d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0204 	orr.w	r2, r2, #4
 80029a4:	60da      	str	r2, [r3, #12]
      break;
 80029a6:	e014      	b.n	80029d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0208 	orr.w	r2, r2, #8
 80029b6:	60da      	str	r2, [r3, #12]
      break;
 80029b8:	e00b      	b.n	80029d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0210 	orr.w	r2, r2, #16
 80029c8:	60da      	str	r2, [r3, #12]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d155      	bne.n	8002a84 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fdd1 	bl	8003588 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a29      	ldr	r2, [pc, #164]	@ (8002a90 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_TIM_PWM_Start_IT+0x166>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a27      	ldr	r2, [pc, #156]	@ (8002a94 <HAL_TIM_PWM_Start_IT+0x200>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PWM_Start_IT+0x16a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_PWM_Start_IT+0x16c>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d018      	beq.n	8002a50 <HAL_TIM_PWM_Start_IT+0x1bc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_TIM_PWM_Start_IT+0x200>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <HAL_TIM_PWM_Start_IT+0x1bc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a30:	d00e      	beq.n	8002a50 <HAL_TIM_PWM_Start_IT+0x1bc>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_TIM_PWM_Start_IT+0x204>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIM_PWM_Start_IT+0x1bc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_TIM_PWM_Start_IT+0x208>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_TIM_PWM_Start_IT+0x1bc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <HAL_TIM_PWM_Start_IT+0x20c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d010      	beq.n	8002a84 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	e007      	b.n	8002a84 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40013400 	.word	0x40013400
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00

08002aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0202 	mvn.w	r2, #2
 8002ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa76 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa69 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa78 	bl	8002fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0204 	mvn.w	r2, #4
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa4c 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa3f 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa4e 	bl	8002fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0208 	mvn.w	r2, #8
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa22 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa15 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa24 	bl	8002fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0210 	mvn.w	r2, #16
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f9f8 	bl	8002fd8 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9eb 	bl	8002fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f9fa 	bl	8002fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fb14 	bl	8000250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b80      	cmp	r3, #128	@ 0x80
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fd84 	bl	800375c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5e:	2b40      	cmp	r3, #64	@ 0x40
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9be 	bl	8002ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0220 	mvn.w	r2, #32
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fd4f 	bl	800374a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0ae      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	f200 809f 	bhi.w	8002e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002e21 	.word	0x08002e21
 8002cf0:	08002e21 	.word	0x08002e21
 8002cf4:	08002e21 	.word	0x08002e21
 8002cf8:	08002d5d 	.word	0x08002d5d
 8002cfc:	08002e21 	.word	0x08002e21
 8002d00:	08002e21 	.word	0x08002e21
 8002d04:	08002e21 	.word	0x08002e21
 8002d08:	08002d9f 	.word	0x08002d9f
 8002d0c:	08002e21 	.word	0x08002e21
 8002d10:	08002e21 	.word	0x08002e21
 8002d14:	08002e21 	.word	0x08002e21
 8002d18:	08002ddf 	.word	0x08002ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f9ee 	bl	8003104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0208 	orr.w	r2, r2, #8
 8002d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6999      	ldr	r1, [r3, #24]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	619a      	str	r2, [r3, #24]
      break;
 8002d5a:	e064      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fa3e 	bl	80031e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	619a      	str	r2, [r3, #24]
      break;
 8002d9c:	e043      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fa91 	bl	80032cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0208 	orr.w	r2, r2, #8
 8002db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69d9      	ldr	r1, [r3, #28]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	61da      	str	r2, [r3, #28]
      break;
 8002ddc:	e023      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fae5 	bl	80033b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	61da      	str	r2, [r3, #28]
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIM_ConfigClockSource+0x1c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0b4      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x186>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e8c:	d03e      	beq.n	8002f0c <HAL_TIM_ConfigClockSource+0xd4>
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e92:	f200 8087 	bhi.w	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e9a:	f000 8086 	beq.w	8002faa <HAL_TIM_ConfigClockSource+0x172>
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea2:	d87f      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b70      	cmp	r3, #112	@ 0x70
 8002ea6:	d01a      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xa6>
 8002ea8:	2b70      	cmp	r3, #112	@ 0x70
 8002eaa:	d87b      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b60      	cmp	r3, #96	@ 0x60
 8002eae:	d050      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x11a>
 8002eb0:	2b60      	cmp	r3, #96	@ 0x60
 8002eb2:	d877      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b50      	cmp	r3, #80	@ 0x50
 8002eb6:	d03c      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0xfa>
 8002eb8:	2b50      	cmp	r3, #80	@ 0x50
 8002eba:	d873      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b40      	cmp	r3, #64	@ 0x40
 8002ebe:	d058      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x13a>
 8002ec0:	2b40      	cmp	r3, #64	@ 0x40
 8002ec2:	d86f      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b30      	cmp	r3, #48	@ 0x30
 8002ec6:	d064      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec8:	2b30      	cmp	r3, #48	@ 0x30
 8002eca:	d86b      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d060      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d867      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d05c      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x15a>
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d05a      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	e062      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	f000 fb2c 	bl	800354a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	609a      	str	r2, [r3, #8]
      break;
 8002f0a:	e04f      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1c:	f000 fb15 	bl	800354a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f2e:	609a      	str	r2, [r3, #8]
      break;
 8002f30:	e03c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 fa8c 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2150      	movs	r1, #80	@ 0x50
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fae3 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002f50:	e02c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 faaa 	bl	80034b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2160      	movs	r1, #96	@ 0x60
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fad3 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002f70:	e01c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa6c 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2140      	movs	r1, #64	@ 0x40
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fac3 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002f90:	e00c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f000 faba 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e003      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
	...

08003010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a33      	ldr	r2, [pc, #204]	@ (80030f0 <TIM_Base_SetConfig+0xe0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a32      	ldr	r2, [pc, #200]	@ (80030f4 <TIM_Base_SetConfig+0xe4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00f      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003036:	d00b      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2f      	ldr	r2, [pc, #188]	@ (80030f8 <TIM_Base_SetConfig+0xe8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2e      	ldr	r2, [pc, #184]	@ (80030fc <TIM_Base_SetConfig+0xec>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <TIM_Base_SetConfig+0xf0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <TIM_Base_SetConfig+0xe0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <TIM_Base_SetConfig+0x82>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <TIM_Base_SetConfig+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <TIM_Base_SetConfig+0x82>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003078:	d00b      	beq.n	8003092 <TIM_Base_SetConfig+0x82>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <TIM_Base_SetConfig+0xe8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_Base_SetConfig+0x82>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <TIM_Base_SetConfig+0xec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_Base_SetConfig+0x82>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <TIM_Base_SetConfig+0xf0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a09      	ldr	r2, [pc, #36]	@ (80030f0 <TIM_Base_SetConfig+0xe0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <TIM_Base_SetConfig+0xe4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40013400 	.word	0x40013400
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00

08003104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 0201 	bic.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 0302 	bic.w	r3, r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <TIM_OC1_SetConfig+0xd8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC1_SetConfig+0x64>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <TIM_OC1_SetConfig+0xdc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10c      	bne.n	8003182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0308 	bic.w	r3, r3, #8
 800316e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <TIM_OC1_SetConfig+0xd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_OC1_SetConfig+0x8e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a14      	ldr	r2, [pc, #80]	@ (80031e0 <TIM_OC1_SetConfig+0xdc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40013400 	.word	0x40013400

080031e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 0210 	bic.w	r2, r3, #16
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0320 	bic.w	r3, r3, #32
 800322e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a21      	ldr	r2, [pc, #132]	@ (80032c4 <TIM_OC2_SetConfig+0xe0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_OC2_SetConfig+0x68>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a20      	ldr	r2, [pc, #128]	@ (80032c8 <TIM_OC2_SetConfig+0xe4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10d      	bne.n	8003268 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a16      	ldr	r2, [pc, #88]	@ (80032c4 <TIM_OC2_SetConfig+0xe0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_OC2_SetConfig+0x94>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a15      	ldr	r2, [pc, #84]	@ (80032c8 <TIM_OC2_SetConfig+0xe4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d113      	bne.n	80032a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800327e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40013400 	.word	0x40013400

080032cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <TIM_OC3_SetConfig+0xe0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC3_SetConfig+0x66>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <TIM_OC3_SetConfig+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10d      	bne.n	800334e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a16      	ldr	r2, [pc, #88]	@ (80033ac <TIM_OC3_SetConfig+0xe0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC3_SetConfig+0x92>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <TIM_OC3_SetConfig+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40013400 	.word	0x40013400

080033b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	031b      	lsls	r3, r3, #12
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <TIM_OC4_SetConfig+0xa0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC4_SetConfig+0x68>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a10      	ldr	r2, [pc, #64]	@ (8003458 <TIM_OC4_SetConfig+0xa4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d109      	bne.n	8003430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40013400 	.word	0x40013400

0800345c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 030a 	bic.w	r3, r3, #10
 8003498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0210 	bic.w	r2, r3, #16
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	031b      	lsls	r3, r3, #12
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	621a      	str	r2, [r3, #32]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	f043 0307 	orr.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003564:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	021a      	lsls	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	431a      	orrs	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4313      	orrs	r3, r2
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	609a      	str	r2, [r3, #8]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2201      	movs	r2, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	401a      	ands	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e050      	b.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d00e      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40013400 	.word	0x40013400
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00

080036a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e03d      	b.n	8003740 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e042      	b.n	8003806 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fbdd 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2224      	movs	r2, #36	@ 0x24
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fdc6 	bl	8004344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b08a      	sub	sp, #40	@ 0x28
 8003812:	af02      	add	r7, sp, #8
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	d16d      	bne.n	800390a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_UART_Transmit+0x2c>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e066      	b.n	800390c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2221      	movs	r2, #33	@ 0x21
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384c:	f7fd fd58 	bl	8001300 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d108      	bne.n	800387a <HAL_UART_Transmit+0x6c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e003      	b.n	8003882 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003882:	e02a      	b.n	80038da <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	2180      	movs	r1, #128	@ 0x80
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fb15 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e036      	b.n	800390c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	3302      	adds	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e007      	b.n	80038cc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1cf      	bne.n	8003884 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2200      	movs	r2, #0
 80038ec:	2140      	movs	r1, #64	@ 0x40
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fae5 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e006      	b.n	800390c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d112      	bne.n	8003954 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Receive_IT+0x26>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00b      	b.n	8003956 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	461a      	mov	r2, r3
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fb25 	bl	8003f9a <UART_Start_Receive_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	e000      	b.n	8003956 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ba      	sub	sp, #232	@ 0xe8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800399e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_UART_IRQHandler+0x66>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fc01 	bl	80041c6 <UART_Receive_IT>
      return;
 80039c4:	e25b      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80de 	beq.w	8003b8c <HAL_UART_IRQHandler+0x22c>
 80039d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80d1 	beq.w	8003b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_UART_IRQHandler+0xae>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_UART_IRQHandler+0xd2>
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	f043 0202 	orr.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_UART_IRQHandler+0xf6>
 8003a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <HAL_UART_IRQHandler+0x126>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f043 0208 	orr.w	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 81f2 	beq.w	8003e74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_UART_IRQHandler+0x14e>
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fb8c 	bl	80041c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_UART_IRQHandler+0x17a>
 8003ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04f      	beq.n	8003b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fa96 	bl	800400c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d041      	beq.n	8003b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1d9      	bne.n	8003aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d013      	beq.n	8003b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	4a7e      	ldr	r2, [pc, #504]	@ (8003d40 <HAL_UART_IRQHandler+0x3e0>)
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fd4c 	bl	80015ec <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e00e      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f993 	bl	8003e96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	e00a      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f98f 	bl	8003e96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e006      	b.n	8003b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f98b 	bl	8003e96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b86:	e175      	b.n	8003e74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	bf00      	nop
    return;
 8003b8a:	e173      	b.n	8003e74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 814f 	bne.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8148 	beq.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8141 	beq.w	8003e34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80b6 	beq.w	8003d44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8145 	beq.w	8003e78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	f080 813e 	bcs.w	8003e78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f000 8088 	beq.w	8003d20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c3c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1d9      	bne.n	8003c10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c80:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e1      	bne.n	8003c5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e3      	bne.n	8003c98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e3      	bne.n	8003cde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fc2b 	bl	8001576 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8b6 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d3c:	e09c      	b.n	8003e78 <HAL_UART_IRQHandler+0x518>
 8003d3e:	bf00      	nop
 8003d40:	080040d1 	.word	0x080040d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 808e 	beq.w	8003e7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8089 	beq.w	8003e7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e3      	bne.n	8003d6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	623b      	str	r3, [r7, #32]
   return(result);
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e3      	bne.n	8003de8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f83b 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e32:	e023      	b.n	8003e7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_UART_IRQHandler+0x4f4>
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f953 	bl	80040f8 <UART_Transmit_IT>
    return;
 8003e52:	e014      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <HAL_UART_IRQHandler+0x51e>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f992 	bl	8004196 <UART_EndTransmit_IT>
    return;
 8003e72:	e004      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e7c:	bf00      	nop
  }
}
 8003e7e:	37e8      	adds	r7, #232	@ 0xe8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b090      	sub	sp, #64	@ 0x40
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	e050      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d04c      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0x30>
 8003ede:	f7fd fa0f 	bl	8001300 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d241      	bcs.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f0e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	613b      	str	r3, [r7, #16]
   return(result);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f42:	623a      	str	r2, [r7, #32]
 8003f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	69f9      	ldr	r1, [r7, #28]
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00f      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d09f      	beq.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3740      	adds	r7, #64	@ 0x40
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2222      	movs	r2, #34	@ 0x22
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0220 	orr.w	r2, r2, #32
 8003ffe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b095      	sub	sp, #84	@ 0x54
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004034:	643a      	str	r2, [r7, #64]	@ 0x40
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	61fb      	str	r3, [r7, #28]
   return(result);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	d119      	bne.n	80040b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	60bb      	str	r3, [r7, #8]
   return(result);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 0310 	bic.w	r3, r3, #16
 800409a:	647b      	str	r3, [r7, #68]	@ 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a4:	61ba      	str	r2, [r7, #24]
 80040a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6979      	ldr	r1, [r7, #20]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	613b      	str	r3, [r7, #16]
   return(result);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040c6:	bf00      	nop
 80040c8:	3754      	adds	r7, #84	@ 0x54
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fed3 	bl	8003e96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b21      	cmp	r3, #33	@ 0x21
 800410a:	d13e      	bne.n	800418a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d114      	bne.n	8004140 <UART_Transmit_IT+0x48>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004132:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	621a      	str	r2, [r3, #32]
 800413e:	e008      	b.n	8004152 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	1c59      	adds	r1, r3, #1
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6211      	str	r1, [r2, #32]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4619      	mov	r1, r3
 8004160:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004174:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004184:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe64 	bl	8003e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b08c      	sub	sp, #48	@ 0x30
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b22      	cmp	r3, #34	@ 0x22
 80041d8:	f040 80ae 	bne.w	8004338 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d117      	bne.n	8004216 <UART_Receive_IT+0x50>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d113      	bne.n	8004216 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004204:	b29a      	uxth	r2, r3
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28
 8004214:	e026      	b.n	8004264 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d007      	beq.n	800423a <UART_Receive_IT+0x74>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <UART_Receive_IT+0x82>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e008      	b.n	800425a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004254:	b2da      	uxtb	r2, r3
 8004256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29b      	uxth	r3, r3
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4619      	mov	r1, r3
 8004272:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004274:	2b00      	cmp	r3, #0
 8004276:	d15d      	bne.n	8004334 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0220 	bic.w	r2, r2, #32
 8004286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d135      	bne.n	800432a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	623a      	str	r2, [r7, #32]
 80042e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d10a      	bne.n	800431c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fdc0 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
 8004328:	e002      	b.n	8004330 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc f900 	bl	8000530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e002      	b.n	800433a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3730      	adds	r7, #48	@ 0x30
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800437e:	f023 030c 	bic.w	r3, r3, #12
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	430b      	orrs	r3, r1
 800438a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004458 <UART_SetConfig+0x114>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d103      	bne.n	80043b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7fd ffe0 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	e002      	b.n	80043ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fd ffc8 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80043b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009a      	lsls	r2, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	4a22      	ldr	r2, [pc, #136]	@ (800445c <UART_SetConfig+0x118>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	0119      	lsls	r1, r3, #4
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009a      	lsls	r2, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <UART_SetConfig+0x118>)
 80043f2:	fba3 0302 	umull	r0, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2064      	movs	r0, #100	@ 0x64
 80043fa:	fb00 f303 	mul.w	r3, r0, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	3332      	adds	r3, #50	@ 0x32
 8004404:	4a15      	ldr	r2, [pc, #84]	@ (800445c <UART_SetConfig+0x118>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004410:	4419      	add	r1, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009a      	lsls	r2, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fbb2 f2f3 	udiv	r2, r2, r3
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <UART_SetConfig+0x118>)
 800442a:	fba3 0302 	umull	r0, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2064      	movs	r0, #100	@ 0x64
 8004432:	fb00 f303 	mul.w	r3, r0, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	3332      	adds	r3, #50	@ 0x32
 800443c:	4a07      	ldr	r2, [pc, #28]	@ (800445c <UART_SetConfig+0x118>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	440a      	add	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40013800 	.word	0x40013800
 800445c:	51eb851f 	.word	0x51eb851f

08004460 <std>:
 8004460:	2300      	movs	r3, #0
 8004462:	b510      	push	{r4, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	e9c0 3300 	strd	r3, r3, [r0]
 800446a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800446e:	6083      	str	r3, [r0, #8]
 8004470:	8181      	strh	r1, [r0, #12]
 8004472:	6643      	str	r3, [r0, #100]	@ 0x64
 8004474:	81c2      	strh	r2, [r0, #14]
 8004476:	6183      	str	r3, [r0, #24]
 8004478:	4619      	mov	r1, r3
 800447a:	2208      	movs	r2, #8
 800447c:	305c      	adds	r0, #92	@ 0x5c
 800447e:	f000 f9f9 	bl	8004874 <memset>
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <std+0x58>)
 8004484:	6224      	str	r4, [r4, #32]
 8004486:	6263      	str	r3, [r4, #36]	@ 0x24
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <std+0x5c>)
 800448a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <std+0x60>)
 800448e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <std+0x64>)
 8004492:	6323      	str	r3, [r4, #48]	@ 0x30
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <std+0x68>)
 8004496:	429c      	cmp	r4, r3
 8004498:	d006      	beq.n	80044a8 <std+0x48>
 800449a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800449e:	4294      	cmp	r4, r2
 80044a0:	d002      	beq.n	80044a8 <std+0x48>
 80044a2:	33d0      	adds	r3, #208	@ 0xd0
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d105      	bne.n	80044b4 <std+0x54>
 80044a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f000 ba6a 	b.w	8004988 <__retarget_lock_init_recursive>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	080046c5 	.word	0x080046c5
 80044bc:	080046e7 	.word	0x080046e7
 80044c0:	0800471f 	.word	0x0800471f
 80044c4:	08004743 	.word	0x08004743
 80044c8:	200003a0 	.word	0x200003a0

080044cc <stdio_exit_handler>:
 80044cc:	4a02      	ldr	r2, [pc, #8]	@ (80044d8 <stdio_exit_handler+0xc>)
 80044ce:	4903      	ldr	r1, [pc, #12]	@ (80044dc <stdio_exit_handler+0x10>)
 80044d0:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <stdio_exit_handler+0x14>)
 80044d2:	f000 b869 	b.w	80045a8 <_fwalk_sglue>
 80044d6:	bf00      	nop
 80044d8:	20000038 	.word	0x20000038
 80044dc:	08005221 	.word	0x08005221
 80044e0:	20000048 	.word	0x20000048

080044e4 <cleanup_stdio>:
 80044e4:	6841      	ldr	r1, [r0, #4]
 80044e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <cleanup_stdio+0x34>)
 80044e8:	b510      	push	{r4, lr}
 80044ea:	4299      	cmp	r1, r3
 80044ec:	4604      	mov	r4, r0
 80044ee:	d001      	beq.n	80044f4 <cleanup_stdio+0x10>
 80044f0:	f000 fe96 	bl	8005220 <_fflush_r>
 80044f4:	68a1      	ldr	r1, [r4, #8]
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <cleanup_stdio+0x38>)
 80044f8:	4299      	cmp	r1, r3
 80044fa:	d002      	beq.n	8004502 <cleanup_stdio+0x1e>
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 fe8f 	bl	8005220 <_fflush_r>
 8004502:	68e1      	ldr	r1, [r4, #12]
 8004504:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <cleanup_stdio+0x3c>)
 8004506:	4299      	cmp	r1, r3
 8004508:	d004      	beq.n	8004514 <cleanup_stdio+0x30>
 800450a:	4620      	mov	r0, r4
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004510:	f000 be86 	b.w	8005220 <_fflush_r>
 8004514:	bd10      	pop	{r4, pc}
 8004516:	bf00      	nop
 8004518:	200003a0 	.word	0x200003a0
 800451c:	20000408 	.word	0x20000408
 8004520:	20000470 	.word	0x20000470

08004524 <global_stdio_init.part.0>:
 8004524:	b510      	push	{r4, lr}
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <global_stdio_init.part.0+0x30>)
 8004528:	4c0b      	ldr	r4, [pc, #44]	@ (8004558 <global_stdio_init.part.0+0x34>)
 800452a:	4a0c      	ldr	r2, [pc, #48]	@ (800455c <global_stdio_init.part.0+0x38>)
 800452c:	4620      	mov	r0, r4
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	2104      	movs	r1, #4
 8004532:	2200      	movs	r2, #0
 8004534:	f7ff ff94 	bl	8004460 <std>
 8004538:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800453c:	2201      	movs	r2, #1
 800453e:	2109      	movs	r1, #9
 8004540:	f7ff ff8e 	bl	8004460 <std>
 8004544:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004548:	2202      	movs	r2, #2
 800454a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454e:	2112      	movs	r1, #18
 8004550:	f7ff bf86 	b.w	8004460 <std>
 8004554:	200004d8 	.word	0x200004d8
 8004558:	200003a0 	.word	0x200003a0
 800455c:	080044cd 	.word	0x080044cd

08004560 <__sfp_lock_acquire>:
 8004560:	4801      	ldr	r0, [pc, #4]	@ (8004568 <__sfp_lock_acquire+0x8>)
 8004562:	f000 ba12 	b.w	800498a <__retarget_lock_acquire_recursive>
 8004566:	bf00      	nop
 8004568:	200004e1 	.word	0x200004e1

0800456c <__sfp_lock_release>:
 800456c:	4801      	ldr	r0, [pc, #4]	@ (8004574 <__sfp_lock_release+0x8>)
 800456e:	f000 ba0d 	b.w	800498c <__retarget_lock_release_recursive>
 8004572:	bf00      	nop
 8004574:	200004e1 	.word	0x200004e1

08004578 <__sinit>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	f7ff fff0 	bl	8004560 <__sfp_lock_acquire>
 8004580:	6a23      	ldr	r3, [r4, #32]
 8004582:	b11b      	cbz	r3, 800458c <__sinit+0x14>
 8004584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004588:	f7ff bff0 	b.w	800456c <__sfp_lock_release>
 800458c:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <__sinit+0x28>)
 800458e:	6223      	str	r3, [r4, #32]
 8004590:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <__sinit+0x2c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f5      	bne.n	8004584 <__sinit+0xc>
 8004598:	f7ff ffc4 	bl	8004524 <global_stdio_init.part.0>
 800459c:	e7f2      	b.n	8004584 <__sinit+0xc>
 800459e:	bf00      	nop
 80045a0:	080044e5 	.word	0x080044e5
 80045a4:	200004d8 	.word	0x200004d8

080045a8 <_fwalk_sglue>:
 80045a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ac:	4607      	mov	r7, r0
 80045ae:	4688      	mov	r8, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	2600      	movs	r6, #0
 80045b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045b8:	f1b9 0901 	subs.w	r9, r9, #1
 80045bc:	d505      	bpl.n	80045ca <_fwalk_sglue+0x22>
 80045be:	6824      	ldr	r4, [r4, #0]
 80045c0:	2c00      	cmp	r4, #0
 80045c2:	d1f7      	bne.n	80045b4 <_fwalk_sglue+0xc>
 80045c4:	4630      	mov	r0, r6
 80045c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d907      	bls.n	80045e0 <_fwalk_sglue+0x38>
 80045d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045d4:	3301      	adds	r3, #1
 80045d6:	d003      	beq.n	80045e0 <_fwalk_sglue+0x38>
 80045d8:	4629      	mov	r1, r5
 80045da:	4638      	mov	r0, r7
 80045dc:	47c0      	blx	r8
 80045de:	4306      	orrs	r6, r0
 80045e0:	3568      	adds	r5, #104	@ 0x68
 80045e2:	e7e9      	b.n	80045b8 <_fwalk_sglue+0x10>

080045e4 <iprintf>:
 80045e4:	b40f      	push	{r0, r1, r2, r3}
 80045e6:	b507      	push	{r0, r1, r2, lr}
 80045e8:	4906      	ldr	r1, [pc, #24]	@ (8004604 <iprintf+0x20>)
 80045ea:	ab04      	add	r3, sp, #16
 80045ec:	6808      	ldr	r0, [r1, #0]
 80045ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f2:	6881      	ldr	r1, [r0, #8]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	f000 fae9 	bl	8004bcc <_vfiprintf_r>
 80045fa:	b003      	add	sp, #12
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b004      	add	sp, #16
 8004602:	4770      	bx	lr
 8004604:	20000044 	.word	0x20000044

08004608 <_puts_r>:
 8004608:	6a03      	ldr	r3, [r0, #32]
 800460a:	b570      	push	{r4, r5, r6, lr}
 800460c:	4605      	mov	r5, r0
 800460e:	460e      	mov	r6, r1
 8004610:	6884      	ldr	r4, [r0, #8]
 8004612:	b90b      	cbnz	r3, 8004618 <_puts_r+0x10>
 8004614:	f7ff ffb0 	bl	8004578 <__sinit>
 8004618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800461a:	07db      	lsls	r3, r3, #31
 800461c:	d405      	bmi.n	800462a <_puts_r+0x22>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	0598      	lsls	r0, r3, #22
 8004622:	d402      	bmi.n	800462a <_puts_r+0x22>
 8004624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004626:	f000 f9b0 	bl	800498a <__retarget_lock_acquire_recursive>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	0719      	lsls	r1, r3, #28
 800462e:	d502      	bpl.n	8004636 <_puts_r+0x2e>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d135      	bne.n	80046a2 <_puts_r+0x9a>
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f000 f8c5 	bl	80047c8 <__swsetup_r>
 800463e:	b380      	cbz	r0, 80046a2 <_puts_r+0x9a>
 8004640:	f04f 35ff 	mov.w	r5, #4294967295
 8004644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004646:	07da      	lsls	r2, r3, #31
 8004648:	d405      	bmi.n	8004656 <_puts_r+0x4e>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	059b      	lsls	r3, r3, #22
 800464e:	d402      	bmi.n	8004656 <_puts_r+0x4e>
 8004650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004652:	f000 f99b 	bl	800498c <__retarget_lock_release_recursive>
 8004656:	4628      	mov	r0, r5
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	2b00      	cmp	r3, #0
 800465c:	da04      	bge.n	8004668 <_puts_r+0x60>
 800465e:	69a2      	ldr	r2, [r4, #24]
 8004660:	429a      	cmp	r2, r3
 8004662:	dc17      	bgt.n	8004694 <_puts_r+0x8c>
 8004664:	290a      	cmp	r1, #10
 8004666:	d015      	beq.n	8004694 <_puts_r+0x8c>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	7019      	strb	r1, [r3, #0]
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004676:	3b01      	subs	r3, #1
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	2900      	cmp	r1, #0
 800467c:	d1ed      	bne.n	800465a <_puts_r+0x52>
 800467e:	2b00      	cmp	r3, #0
 8004680:	da11      	bge.n	80046a6 <_puts_r+0x9e>
 8004682:	4622      	mov	r2, r4
 8004684:	210a      	movs	r1, #10
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f85f 	bl	800474a <__swbuf_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d0d7      	beq.n	8004640 <_puts_r+0x38>
 8004690:	250a      	movs	r5, #10
 8004692:	e7d7      	b.n	8004644 <_puts_r+0x3c>
 8004694:	4622      	mov	r2, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f857 	bl	800474a <__swbuf_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d1e7      	bne.n	8004670 <_puts_r+0x68>
 80046a0:	e7ce      	b.n	8004640 <_puts_r+0x38>
 80046a2:	3e01      	subs	r6, #1
 80046a4:	e7e4      	b.n	8004670 <_puts_r+0x68>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	6022      	str	r2, [r4, #0]
 80046ac:	220a      	movs	r2, #10
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e7ee      	b.n	8004690 <_puts_r+0x88>
	...

080046b4 <puts>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	@ (80046c0 <puts+0xc>)
 80046b6:	4601      	mov	r1, r0
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	f7ff bfa5 	b.w	8004608 <_puts_r>
 80046be:	bf00      	nop
 80046c0:	20000044 	.word	0x20000044

080046c4 <__sread>:
 80046c4:	b510      	push	{r4, lr}
 80046c6:	460c      	mov	r4, r1
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	f000 f90e 	bl	80048ec <_read_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bfab      	itete	ge
 80046d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046d6:	89a3      	ldrhlt	r3, [r4, #12]
 80046d8:	181b      	addge	r3, r3, r0
 80046da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046de:	bfac      	ite	ge
 80046e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046e2:	81a3      	strhlt	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__swrite>:
 80046e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ea:	461f      	mov	r7, r3
 80046ec:	898b      	ldrh	r3, [r1, #12]
 80046ee:	4605      	mov	r5, r0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	460c      	mov	r4, r1
 80046f4:	4616      	mov	r6, r2
 80046f6:	d505      	bpl.n	8004704 <__swrite+0x1e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	2200      	movs	r2, #0
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f8e2 	bl	80048c8 <_lseek_r>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	4632      	mov	r2, r6
 8004708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	4628      	mov	r0, r5
 8004710:	463b      	mov	r3, r7
 8004712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	f000 b8f9 	b.w	8004910 <_write_r>

0800471e <__sseek>:
 800471e:	b510      	push	{r4, lr}
 8004720:	460c      	mov	r4, r1
 8004722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004726:	f000 f8cf 	bl	80048c8 <_lseek_r>
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	bf15      	itete	ne
 8004730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800473a:	81a3      	strheq	r3, [r4, #12]
 800473c:	bf18      	it	ne
 800473e:	81a3      	strhne	r3, [r4, #12]
 8004740:	bd10      	pop	{r4, pc}

08004742 <__sclose>:
 8004742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004746:	f000 b8af 	b.w	80048a8 <_close_r>

0800474a <__swbuf_r>:
 800474a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474c:	460e      	mov	r6, r1
 800474e:	4614      	mov	r4, r2
 8004750:	4605      	mov	r5, r0
 8004752:	b118      	cbz	r0, 800475c <__swbuf_r+0x12>
 8004754:	6a03      	ldr	r3, [r0, #32]
 8004756:	b90b      	cbnz	r3, 800475c <__swbuf_r+0x12>
 8004758:	f7ff ff0e 	bl	8004578 <__sinit>
 800475c:	69a3      	ldr	r3, [r4, #24]
 800475e:	60a3      	str	r3, [r4, #8]
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	071a      	lsls	r2, r3, #28
 8004764:	d501      	bpl.n	800476a <__swbuf_r+0x20>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	b943      	cbnz	r3, 800477c <__swbuf_r+0x32>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f82b 	bl	80047c8 <__swsetup_r>
 8004772:	b118      	cbz	r0, 800477c <__swbuf_r+0x32>
 8004774:	f04f 37ff 	mov.w	r7, #4294967295
 8004778:	4638      	mov	r0, r7
 800477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	6922      	ldr	r2, [r4, #16]
 8004780:	b2f6      	uxtb	r6, r6
 8004782:	1a98      	subs	r0, r3, r2
 8004784:	6963      	ldr	r3, [r4, #20]
 8004786:	4637      	mov	r7, r6
 8004788:	4283      	cmp	r3, r0
 800478a:	dc05      	bgt.n	8004798 <__swbuf_r+0x4e>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fd46 	bl	8005220 <_fflush_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d1ed      	bne.n	8004774 <__swbuf_r+0x2a>
 8004798:	68a3      	ldr	r3, [r4, #8]
 800479a:	3b01      	subs	r3, #1
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	6022      	str	r2, [r4, #0]
 80047a4:	701e      	strb	r6, [r3, #0]
 80047a6:	6962      	ldr	r2, [r4, #20]
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d004      	beq.n	80047b8 <__swbuf_r+0x6e>
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	07db      	lsls	r3, r3, #31
 80047b2:	d5e1      	bpl.n	8004778 <__swbuf_r+0x2e>
 80047b4:	2e0a      	cmp	r6, #10
 80047b6:	d1df      	bne.n	8004778 <__swbuf_r+0x2e>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 fd30 	bl	8005220 <_fflush_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d0d9      	beq.n	8004778 <__swbuf_r+0x2e>
 80047c4:	e7d6      	b.n	8004774 <__swbuf_r+0x2a>
	...

080047c8 <__swsetup_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4b29      	ldr	r3, [pc, #164]	@ (8004870 <__swsetup_r+0xa8>)
 80047cc:	4605      	mov	r5, r0
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	460c      	mov	r4, r1
 80047d2:	b118      	cbz	r0, 80047dc <__swsetup_r+0x14>
 80047d4:	6a03      	ldr	r3, [r0, #32]
 80047d6:	b90b      	cbnz	r3, 80047dc <__swsetup_r+0x14>
 80047d8:	f7ff fece 	bl	8004578 <__sinit>
 80047dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e0:	0719      	lsls	r1, r3, #28
 80047e2:	d422      	bmi.n	800482a <__swsetup_r+0x62>
 80047e4:	06da      	lsls	r2, r3, #27
 80047e6:	d407      	bmi.n	80047f8 <__swsetup_r+0x30>
 80047e8:	2209      	movs	r2, #9
 80047ea:	602a      	str	r2, [r5, #0]
 80047ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	81a3      	strh	r3, [r4, #12]
 80047f6:	e033      	b.n	8004860 <__swsetup_r+0x98>
 80047f8:	0758      	lsls	r0, r3, #29
 80047fa:	d512      	bpl.n	8004822 <__swsetup_r+0x5a>
 80047fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047fe:	b141      	cbz	r1, 8004812 <__swsetup_r+0x4a>
 8004800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004804:	4299      	cmp	r1, r3
 8004806:	d002      	beq.n	800480e <__swsetup_r+0x46>
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f8c1 	bl	8004990 <_free_r>
 800480e:	2300      	movs	r3, #0
 8004810:	6363      	str	r3, [r4, #52]	@ 0x34
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004818:	81a3      	strh	r3, [r4, #12]
 800481a:	2300      	movs	r3, #0
 800481c:	6063      	str	r3, [r4, #4]
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	b94b      	cbnz	r3, 8004842 <__swsetup_r+0x7a>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004838:	d003      	beq.n	8004842 <__swsetup_r+0x7a>
 800483a:	4621      	mov	r1, r4
 800483c:	4628      	mov	r0, r5
 800483e:	f000 fd3c 	bl	80052ba <__smakebuf_r>
 8004842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004846:	f013 0201 	ands.w	r2, r3, #1
 800484a:	d00a      	beq.n	8004862 <__swsetup_r+0x9a>
 800484c:	2200      	movs	r2, #0
 800484e:	60a2      	str	r2, [r4, #8]
 8004850:	6962      	ldr	r2, [r4, #20]
 8004852:	4252      	negs	r2, r2
 8004854:	61a2      	str	r2, [r4, #24]
 8004856:	6922      	ldr	r2, [r4, #16]
 8004858:	b942      	cbnz	r2, 800486c <__swsetup_r+0xa4>
 800485a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800485e:	d1c5      	bne.n	80047ec <__swsetup_r+0x24>
 8004860:	bd38      	pop	{r3, r4, r5, pc}
 8004862:	0799      	lsls	r1, r3, #30
 8004864:	bf58      	it	pl
 8004866:	6962      	ldrpl	r2, [r4, #20]
 8004868:	60a2      	str	r2, [r4, #8]
 800486a:	e7f4      	b.n	8004856 <__swsetup_r+0x8e>
 800486c:	2000      	movs	r0, #0
 800486e:	e7f7      	b.n	8004860 <__swsetup_r+0x98>
 8004870:	20000044 	.word	0x20000044

08004874 <memset>:
 8004874:	4603      	mov	r3, r0
 8004876:	4402      	add	r2, r0
 8004878:	4293      	cmp	r3, r2
 800487a:	d100      	bne.n	800487e <memset+0xa>
 800487c:	4770      	bx	lr
 800487e:	f803 1b01 	strb.w	r1, [r3], #1
 8004882:	e7f9      	b.n	8004878 <memset+0x4>

08004884 <strncmp>:
 8004884:	b510      	push	{r4, lr}
 8004886:	b16a      	cbz	r2, 80048a4 <strncmp+0x20>
 8004888:	3901      	subs	r1, #1
 800488a:	1884      	adds	r4, r0, r2
 800488c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004890:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004894:	429a      	cmp	r2, r3
 8004896:	d103      	bne.n	80048a0 <strncmp+0x1c>
 8004898:	42a0      	cmp	r0, r4
 800489a:	d001      	beq.n	80048a0 <strncmp+0x1c>
 800489c:	2a00      	cmp	r2, #0
 800489e:	d1f5      	bne.n	800488c <strncmp+0x8>
 80048a0:	1ad0      	subs	r0, r2, r3
 80048a2:	bd10      	pop	{r4, pc}
 80048a4:	4610      	mov	r0, r2
 80048a6:	e7fc      	b.n	80048a2 <strncmp+0x1e>

080048a8 <_close_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	2300      	movs	r3, #0
 80048ac:	4d05      	ldr	r5, [pc, #20]	@ (80048c4 <_close_r+0x1c>)
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	f7fc fc39 	bl	800112a <_close>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_close_r+0x1a>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_close_r+0x1a>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200004dc 	.word	0x200004dc

080048c8 <_lseek_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	2200      	movs	r2, #0
 80048d2:	4d05      	ldr	r5, [pc, #20]	@ (80048e8 <_lseek_r+0x20>)
 80048d4:	602a      	str	r2, [r5, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7fc fc4b 	bl	8001172 <_lseek>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_lseek_r+0x1e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_lseek_r+0x1e>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200004dc 	.word	0x200004dc

080048ec <_read_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	2200      	movs	r2, #0
 80048f6:	4d05      	ldr	r5, [pc, #20]	@ (800490c <_read_r+0x20>)
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc fbf8 	bl	80010f0 <_read>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_read_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_read_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200004dc 	.word	0x200004dc

08004910 <_write_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	2200      	movs	r2, #0
 800491a:	4d05      	ldr	r5, [pc, #20]	@ (8004930 <_write_r+0x20>)
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fb fc80 	bl	8000224 <_write>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_write_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_write_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	200004dc 	.word	0x200004dc

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	@ (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000044 	.word	0x20000044

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	2600      	movs	r6, #0
 8004944:	4d0c      	ldr	r5, [pc, #48]	@ (8004978 <__libc_init_array+0x38>)
 8004946:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	f000 fd30 	bl	80053b4 <_init>
 8004954:	2600      	movs	r6, #0
 8004956:	4d0a      	ldr	r5, [pc, #40]	@ (8004980 <__libc_init_array+0x40>)
 8004958:	4c0a      	ldr	r4, [pc, #40]	@ (8004984 <__libc_init_array+0x44>)
 800495a:	1b64      	subs	r4, r4, r5
 800495c:	10a4      	asrs	r4, r4, #2
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	080054ec 	.word	0x080054ec
 800497c:	080054ec 	.word	0x080054ec
 8004980:	080054ec 	.word	0x080054ec
 8004984:	080054f0 	.word	0x080054f0

08004988 <__retarget_lock_init_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_acquire_recursive>:
 800498a:	4770      	bx	lr

0800498c <__retarget_lock_release_recursive>:
 800498c:	4770      	bx	lr
	...

08004990 <_free_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	2900      	cmp	r1, #0
 8004996:	d040      	beq.n	8004a1a <_free_r+0x8a>
 8004998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499c:	1f0c      	subs	r4, r1, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	18e4      	addlt	r4, r4, r3
 80049a4:	f000 f8de 	bl	8004b64 <__malloc_lock>
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <_free_r+0x8c>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	b933      	cbnz	r3, 80049bc <_free_r+0x2c>
 80049ae:	6063      	str	r3, [r4, #4]
 80049b0:	6014      	str	r4, [r2, #0]
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b8:	f000 b8da 	b.w	8004b70 <__malloc_unlock>
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d908      	bls.n	80049d2 <_free_r+0x42>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	1821      	adds	r1, r4, r0
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf01      	itttt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	1809      	addeq	r1, r1, r0
 80049ce:	6021      	streq	r1, [r4, #0]
 80049d0:	e7ed      	b.n	80049ae <_free_r+0x1e>
 80049d2:	461a      	mov	r2, r3
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b10b      	cbz	r3, 80049dc <_free_r+0x4c>
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d9fa      	bls.n	80049d2 <_free_r+0x42>
 80049dc:	6811      	ldr	r1, [r2, #0]
 80049de:	1850      	adds	r0, r2, r1
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d10b      	bne.n	80049fc <_free_r+0x6c>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	4401      	add	r1, r0
 80049e8:	1850      	adds	r0, r2, r1
 80049ea:	4283      	cmp	r3, r0
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	d1e0      	bne.n	80049b2 <_free_r+0x22>
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4408      	add	r0, r1
 80049f6:	6010      	str	r0, [r2, #0]
 80049f8:	6053      	str	r3, [r2, #4]
 80049fa:	e7da      	b.n	80049b2 <_free_r+0x22>
 80049fc:	d902      	bls.n	8004a04 <_free_r+0x74>
 80049fe:	230c      	movs	r3, #12
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	e7d6      	b.n	80049b2 <_free_r+0x22>
 8004a04:	6820      	ldr	r0, [r4, #0]
 8004a06:	1821      	adds	r1, r4, r0
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	bf01      	itttt	eq
 8004a0c:	6819      	ldreq	r1, [r3, #0]
 8004a0e:	685b      	ldreq	r3, [r3, #4]
 8004a10:	1809      	addeq	r1, r1, r0
 8004a12:	6021      	streq	r1, [r4, #0]
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6054      	str	r4, [r2, #4]
 8004a18:	e7cb      	b.n	80049b2 <_free_r+0x22>
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	200004e8 	.word	0x200004e8

08004a20 <sbrk_aligned>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4e0f      	ldr	r6, [pc, #60]	@ (8004a60 <sbrk_aligned+0x40>)
 8004a24:	460c      	mov	r4, r1
 8004a26:	6831      	ldr	r1, [r6, #0]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	b911      	cbnz	r1, 8004a32 <sbrk_aligned+0x12>
 8004a2c:	f000 fca4 	bl	8005378 <_sbrk_r>
 8004a30:	6030      	str	r0, [r6, #0]
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fc9f 	bl	8005378 <_sbrk_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	d103      	bne.n	8004a46 <sbrk_aligned+0x26>
 8004a3e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a42:	4620      	mov	r0, r4
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d0f8      	beq.n	8004a42 <sbrk_aligned+0x22>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 fc90 	bl	8005378 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d1f2      	bne.n	8004a42 <sbrk_aligned+0x22>
 8004a5c:	e7ef      	b.n	8004a3e <sbrk_aligned+0x1e>
 8004a5e:	bf00      	nop
 8004a60:	200004e4 	.word	0x200004e4

08004a64 <_malloc_r>:
 8004a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a68:	1ccd      	adds	r5, r1, #3
 8004a6a:	f025 0503 	bic.w	r5, r5, #3
 8004a6e:	3508      	adds	r5, #8
 8004a70:	2d0c      	cmp	r5, #12
 8004a72:	bf38      	it	cc
 8004a74:	250c      	movcc	r5, #12
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	4606      	mov	r6, r0
 8004a7a:	db01      	blt.n	8004a80 <_malloc_r+0x1c>
 8004a7c:	42a9      	cmp	r1, r5
 8004a7e:	d904      	bls.n	8004a8a <_malloc_r+0x26>
 8004a80:	230c      	movs	r3, #12
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	2000      	movs	r0, #0
 8004a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b60 <_malloc_r+0xfc>
 8004a8e:	f000 f869 	bl	8004b64 <__malloc_lock>
 8004a92:	f8d8 3000 	ldr.w	r3, [r8]
 8004a96:	461c      	mov	r4, r3
 8004a98:	bb44      	cbnz	r4, 8004aec <_malloc_r+0x88>
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff ffbf 	bl	8004a20 <sbrk_aligned>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	d158      	bne.n	8004b5a <_malloc_r+0xf6>
 8004aa8:	f8d8 4000 	ldr.w	r4, [r8]
 8004aac:	4627      	mov	r7, r4
 8004aae:	2f00      	cmp	r7, #0
 8004ab0:	d143      	bne.n	8004b3a <_malloc_r+0xd6>
 8004ab2:	2c00      	cmp	r4, #0
 8004ab4:	d04b      	beq.n	8004b4e <_malloc_r+0xea>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	eb04 0903 	add.w	r9, r4, r3
 8004ac0:	f000 fc5a 	bl	8005378 <_sbrk_r>
 8004ac4:	4581      	cmp	r9, r0
 8004ac6:	d142      	bne.n	8004b4e <_malloc_r+0xea>
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	4630      	mov	r0, r6
 8004acc:	1a6d      	subs	r5, r5, r1
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7ff ffa6 	bl	8004a20 <sbrk_aligned>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d03a      	beq.n	8004b4e <_malloc_r+0xea>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	442b      	add	r3, r5
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	bb62      	cbnz	r2, 8004b40 <_malloc_r+0xdc>
 8004ae6:	f8c8 7000 	str.w	r7, [r8]
 8004aea:	e00f      	b.n	8004b0c <_malloc_r+0xa8>
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	1b52      	subs	r2, r2, r5
 8004af0:	d420      	bmi.n	8004b34 <_malloc_r+0xd0>
 8004af2:	2a0b      	cmp	r2, #11
 8004af4:	d917      	bls.n	8004b26 <_malloc_r+0xc2>
 8004af6:	1961      	adds	r1, r4, r5
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	6025      	str	r5, [r4, #0]
 8004afc:	bf18      	it	ne
 8004afe:	6059      	strne	r1, [r3, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	bf08      	it	eq
 8004b04:	f8c8 1000 	streq.w	r1, [r8]
 8004b08:	5162      	str	r2, [r4, r5]
 8004b0a:	604b      	str	r3, [r1, #4]
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f82f 	bl	8004b70 <__malloc_unlock>
 8004b12:	f104 000b 	add.w	r0, r4, #11
 8004b16:	1d23      	adds	r3, r4, #4
 8004b18:	f020 0007 	bic.w	r0, r0, #7
 8004b1c:	1ac2      	subs	r2, r0, r3
 8004b1e:	bf1c      	itt	ne
 8004b20:	1a1b      	subne	r3, r3, r0
 8004b22:	50a3      	strne	r3, [r4, r2]
 8004b24:	e7af      	b.n	8004a86 <_malloc_r+0x22>
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	bf0c      	ite	eq
 8004b2c:	f8c8 2000 	streq.w	r2, [r8]
 8004b30:	605a      	strne	r2, [r3, #4]
 8004b32:	e7eb      	b.n	8004b0c <_malloc_r+0xa8>
 8004b34:	4623      	mov	r3, r4
 8004b36:	6864      	ldr	r4, [r4, #4]
 8004b38:	e7ae      	b.n	8004a98 <_malloc_r+0x34>
 8004b3a:	463c      	mov	r4, r7
 8004b3c:	687f      	ldr	r7, [r7, #4]
 8004b3e:	e7b6      	b.n	8004aae <_malloc_r+0x4a>
 8004b40:	461a      	mov	r2, r3
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d1fb      	bne.n	8004b40 <_malloc_r+0xdc>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6053      	str	r3, [r2, #4]
 8004b4c:	e7de      	b.n	8004b0c <_malloc_r+0xa8>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	4630      	mov	r0, r6
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	f000 f80c 	bl	8004b70 <__malloc_unlock>
 8004b58:	e794      	b.n	8004a84 <_malloc_r+0x20>
 8004b5a:	6005      	str	r5, [r0, #0]
 8004b5c:	e7d6      	b.n	8004b0c <_malloc_r+0xa8>
 8004b5e:	bf00      	nop
 8004b60:	200004e8 	.word	0x200004e8

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	@ (8004b6c <__malloc_lock+0x8>)
 8004b66:	f7ff bf10 	b.w	800498a <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	200004e0 	.word	0x200004e0

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f7ff bf0b 	b.w	800498c <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	200004e0 	.word	0x200004e0

08004b7c <__sfputc_r>:
 8004b7c:	6893      	ldr	r3, [r2, #8]
 8004b7e:	b410      	push	{r4}
 8004b80:	3b01      	subs	r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	da07      	bge.n	8004b98 <__sfputc_r+0x1c>
 8004b88:	6994      	ldr	r4, [r2, #24]
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	db01      	blt.n	8004b92 <__sfputc_r+0x16>
 8004b8e:	290a      	cmp	r1, #10
 8004b90:	d102      	bne.n	8004b98 <__sfputc_r+0x1c>
 8004b92:	bc10      	pop	{r4}
 8004b94:	f7ff bdd9 	b.w	800474a <__swbuf_r>
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	1c58      	adds	r0, r3, #1
 8004b9c:	6010      	str	r0, [r2, #0]
 8004b9e:	7019      	strb	r1, [r3, #0]
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	bc10      	pop	{r4}
 8004ba4:	4770      	bx	lr

08004ba6 <__sfputs_r>:
 8004ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba8:	4606      	mov	r6, r0
 8004baa:	460f      	mov	r7, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	18d5      	adds	r5, r2, r3
 8004bb0:	42ac      	cmp	r4, r5
 8004bb2:	d101      	bne.n	8004bb8 <__sfputs_r+0x12>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e007      	b.n	8004bc8 <__sfputs_r+0x22>
 8004bb8:	463a      	mov	r2, r7
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc0:	f7ff ffdc 	bl	8004b7c <__sfputc_r>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d1f3      	bne.n	8004bb0 <__sfputs_r+0xa>
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bcc <_vfiprintf_r>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4614      	mov	r4, r2
 8004bd4:	4698      	mov	r8, r3
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	b09d      	sub	sp, #116	@ 0x74
 8004bda:	b118      	cbz	r0, 8004be4 <_vfiprintf_r+0x18>
 8004bdc:	6a03      	ldr	r3, [r0, #32]
 8004bde:	b90b      	cbnz	r3, 8004be4 <_vfiprintf_r+0x18>
 8004be0:	f7ff fcca 	bl	8004578 <__sinit>
 8004be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004be6:	07d9      	lsls	r1, r3, #31
 8004be8:	d405      	bmi.n	8004bf6 <_vfiprintf_r+0x2a>
 8004bea:	89ab      	ldrh	r3, [r5, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_vfiprintf_r+0x2a>
 8004bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bf2:	f7ff feca 	bl	800498a <__retarget_lock_acquire_recursive>
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	071b      	lsls	r3, r3, #28
 8004bfa:	d501      	bpl.n	8004c00 <_vfiprintf_r+0x34>
 8004bfc:	692b      	ldr	r3, [r5, #16]
 8004bfe:	b99b      	cbnz	r3, 8004c28 <_vfiprintf_r+0x5c>
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff fde0 	bl	80047c8 <__swsetup_r>
 8004c08:	b170      	cbz	r0, 8004c28 <_vfiprintf_r+0x5c>
 8004c0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c0c:	07dc      	lsls	r4, r3, #31
 8004c0e:	d504      	bpl.n	8004c1a <_vfiprintf_r+0x4e>
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	b01d      	add	sp, #116	@ 0x74
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	0598      	lsls	r0, r3, #22
 8004c1e:	d4f7      	bmi.n	8004c10 <_vfiprintf_r+0x44>
 8004c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c22:	f7ff feb3 	bl	800498c <__retarget_lock_release_recursive>
 8004c26:	e7f3      	b.n	8004c10 <_vfiprintf_r+0x44>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c32:	2330      	movs	r3, #48	@ 0x30
 8004c34:	f04f 0901 	mov.w	r9, #1
 8004c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004de8 <_vfiprintf_r+0x21c>
 8004c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c44:	4623      	mov	r3, r4
 8004c46:	469a      	mov	sl, r3
 8004c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c4c:	b10a      	cbz	r2, 8004c52 <_vfiprintf_r+0x86>
 8004c4e:	2a25      	cmp	r2, #37	@ 0x25
 8004c50:	d1f9      	bne.n	8004c46 <_vfiprintf_r+0x7a>
 8004c52:	ebba 0b04 	subs.w	fp, sl, r4
 8004c56:	d00b      	beq.n	8004c70 <_vfiprintf_r+0xa4>
 8004c58:	465b      	mov	r3, fp
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff ffa1 	bl	8004ba6 <__sfputs_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f000 80a7 	beq.w	8004db8 <_vfiprintf_r+0x1ec>
 8004c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c6c:	445a      	add	r2, fp
 8004c6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c70:	f89a 3000 	ldrb.w	r3, [sl]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 809f 	beq.w	8004db8 <_vfiprintf_r+0x1ec>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c84:	f10a 0a01 	add.w	sl, sl, #1
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c90:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c92:	4654      	mov	r4, sl
 8004c94:	2205      	movs	r2, #5
 8004c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9a:	4853      	ldr	r0, [pc, #332]	@ (8004de8 <_vfiprintf_r+0x21c>)
 8004c9c:	f000 fb7c 	bl	8005398 <memchr>
 8004ca0:	9a04      	ldr	r2, [sp, #16]
 8004ca2:	b9d8      	cbnz	r0, 8004cdc <_vfiprintf_r+0x110>
 8004ca4:	06d1      	lsls	r1, r2, #27
 8004ca6:	bf44      	itt	mi
 8004ca8:	2320      	movmi	r3, #32
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cae:	0713      	lsls	r3, r2, #28
 8004cb0:	bf44      	itt	mi
 8004cb2:	232b      	movmi	r3, #43	@ 0x2b
 8004cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cbe:	d015      	beq.n	8004cec <_vfiprintf_r+0x120>
 8004cc0:	4654      	mov	r4, sl
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	9a07      	ldr	r2, [sp, #28]
 8004cca:	4621      	mov	r1, r4
 8004ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd0:	3b30      	subs	r3, #48	@ 0x30
 8004cd2:	2b09      	cmp	r3, #9
 8004cd4:	d94b      	bls.n	8004d6e <_vfiprintf_r+0x1a2>
 8004cd6:	b1b0      	cbz	r0, 8004d06 <_vfiprintf_r+0x13a>
 8004cd8:	9207      	str	r2, [sp, #28]
 8004cda:	e014      	b.n	8004d06 <_vfiprintf_r+0x13a>
 8004cdc:	eba0 0308 	sub.w	r3, r0, r8
 8004ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	46a2      	mov	sl, r4
 8004ce8:	9304      	str	r3, [sp, #16]
 8004cea:	e7d2      	b.n	8004c92 <_vfiprintf_r+0xc6>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfbb      	ittet	lt
 8004cf8:	425b      	neglt	r3, r3
 8004cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004cfe:	9307      	strge	r3, [sp, #28]
 8004d00:	9307      	strlt	r3, [sp, #28]
 8004d02:	bfb8      	it	lt
 8004d04:	9204      	strlt	r2, [sp, #16]
 8004d06:	7823      	ldrb	r3, [r4, #0]
 8004d08:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d0a:	d10a      	bne.n	8004d22 <_vfiprintf_r+0x156>
 8004d0c:	7863      	ldrb	r3, [r4, #1]
 8004d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d10:	d132      	bne.n	8004d78 <_vfiprintf_r+0x1ac>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	3402      	adds	r4, #2
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	9203      	str	r2, [sp, #12]
 8004d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004dec <_vfiprintf_r+0x220>
 8004d26:	2203      	movs	r2, #3
 8004d28:	4650      	mov	r0, sl
 8004d2a:	7821      	ldrb	r1, [r4, #0]
 8004d2c:	f000 fb34 	bl	8005398 <memchr>
 8004d30:	b138      	cbz	r0, 8004d42 <_vfiprintf_r+0x176>
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	9b04      	ldr	r3, [sp, #16]
 8004d36:	eba0 000a 	sub.w	r0, r0, sl
 8004d3a:	4082      	lsls	r2, r0
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	3401      	adds	r4, #1
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d46:	2206      	movs	r2, #6
 8004d48:	4829      	ldr	r0, [pc, #164]	@ (8004df0 <_vfiprintf_r+0x224>)
 8004d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d4e:	f000 fb23 	bl	8005398 <memchr>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d03f      	beq.n	8004dd6 <_vfiprintf_r+0x20a>
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <_vfiprintf_r+0x228>)
 8004d58:	bb1b      	cbnz	r3, 8004da2 <_vfiprintf_r+0x1d6>
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	3307      	adds	r3, #7
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	3308      	adds	r3, #8
 8004d64:	9303      	str	r3, [sp, #12]
 8004d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d68:	443b      	add	r3, r7
 8004d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d6c:	e76a      	b.n	8004c44 <_vfiprintf_r+0x78>
 8004d6e:	460c      	mov	r4, r1
 8004d70:	2001      	movs	r0, #1
 8004d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d76:	e7a8      	b.n	8004cca <_vfiprintf_r+0xfe>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	4619      	mov	r1, r3
 8004d80:	3401      	adds	r4, #1
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	4620      	mov	r0, r4
 8004d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8a:	3a30      	subs	r2, #48	@ 0x30
 8004d8c:	2a09      	cmp	r2, #9
 8004d8e:	d903      	bls.n	8004d98 <_vfiprintf_r+0x1cc>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0c6      	beq.n	8004d22 <_vfiprintf_r+0x156>
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	e7c4      	b.n	8004d22 <_vfiprintf_r+0x156>
 8004d98:	4604      	mov	r4, r0
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da0:	e7f0      	b.n	8004d84 <_vfiprintf_r+0x1b8>
 8004da2:	ab03      	add	r3, sp, #12
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462a      	mov	r2, r5
 8004da8:	4630      	mov	r0, r6
 8004daa:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <_vfiprintf_r+0x22c>)
 8004dac:	a904      	add	r1, sp, #16
 8004dae:	f3af 8000 	nop.w
 8004db2:	4607      	mov	r7, r0
 8004db4:	1c78      	adds	r0, r7, #1
 8004db6:	d1d6      	bne.n	8004d66 <_vfiprintf_r+0x19a>
 8004db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dba:	07d9      	lsls	r1, r3, #31
 8004dbc:	d405      	bmi.n	8004dca <_vfiprintf_r+0x1fe>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	059a      	lsls	r2, r3, #22
 8004dc2:	d402      	bmi.n	8004dca <_vfiprintf_r+0x1fe>
 8004dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dc6:	f7ff fde1 	bl	800498c <__retarget_lock_release_recursive>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	065b      	lsls	r3, r3, #25
 8004dce:	f53f af1f 	bmi.w	8004c10 <_vfiprintf_r+0x44>
 8004dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dd4:	e71e      	b.n	8004c14 <_vfiprintf_r+0x48>
 8004dd6:	ab03      	add	r3, sp, #12
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	462a      	mov	r2, r5
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <_vfiprintf_r+0x22c>)
 8004de0:	a904      	add	r1, sp, #16
 8004de2:	f000 f87d 	bl	8004ee0 <_printf_i>
 8004de6:	e7e4      	b.n	8004db2 <_vfiprintf_r+0x1e6>
 8004de8:	080054b6 	.word	0x080054b6
 8004dec:	080054bc 	.word	0x080054bc
 8004df0:	080054c0 	.word	0x080054c0
 8004df4:	00000000 	.word	0x00000000
 8004df8:	08004ba7 	.word	0x08004ba7

08004dfc <_printf_common>:
 8004dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	4616      	mov	r6, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	688a      	ldr	r2, [r1, #8]
 8004e06:	690b      	ldr	r3, [r1, #16]
 8004e08:	4607      	mov	r7, r0
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bfb8      	it	lt
 8004e0e:	4613      	movlt	r3, r2
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e16:	460c      	mov	r4, r1
 8004e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e1c:	b10a      	cbz	r2, 8004e22 <_printf_common+0x26>
 8004e1e:	3301      	adds	r3, #1
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	0699      	lsls	r1, r3, #26
 8004e26:	bf42      	ittt	mi
 8004e28:	6833      	ldrmi	r3, [r6, #0]
 8004e2a:	3302      	addmi	r3, #2
 8004e2c:	6033      	strmi	r3, [r6, #0]
 8004e2e:	6825      	ldr	r5, [r4, #0]
 8004e30:	f015 0506 	ands.w	r5, r5, #6
 8004e34:	d106      	bne.n	8004e44 <_printf_common+0x48>
 8004e36:	f104 0a19 	add.w	sl, r4, #25
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	6832      	ldr	r2, [r6, #0]
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dc2b      	bgt.n	8004e9c <_printf_common+0xa0>
 8004e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	3b00      	subs	r3, #0
 8004e4c:	bf18      	it	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	0692      	lsls	r2, r2, #26
 8004e52:	d430      	bmi.n	8004eb6 <_printf_common+0xba>
 8004e54:	4641      	mov	r1, r8
 8004e56:	4638      	mov	r0, r7
 8004e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e5c:	47c8      	blx	r9
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d023      	beq.n	8004eaa <_printf_common+0xae>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	bf14      	ite	ne
 8004e6e:	2500      	movne	r5, #0
 8004e70:	6833      	ldreq	r3, [r6, #0]
 8004e72:	f04f 0600 	mov.w	r6, #0
 8004e76:	bf08      	it	eq
 8004e78:	68e5      	ldreq	r5, [r4, #12]
 8004e7a:	f104 041a 	add.w	r4, r4, #26
 8004e7e:	bf08      	it	eq
 8004e80:	1aed      	subeq	r5, r5, r3
 8004e82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e86:	bf08      	it	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	bfc4      	itt	gt
 8004e90:	1a9b      	subgt	r3, r3, r2
 8004e92:	18ed      	addgt	r5, r5, r3
 8004e94:	42b5      	cmp	r5, r6
 8004e96:	d11a      	bne.n	8004ece <_printf_common+0xd2>
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e008      	b.n	8004eae <_printf_common+0xb2>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4652      	mov	r2, sl
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c8      	blx	r9
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d103      	bne.n	8004eb2 <_printf_common+0xb6>
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	3501      	adds	r5, #1
 8004eb4:	e7c1      	b.n	8004e3a <_printf_common+0x3e>
 8004eb6:	2030      	movs	r0, #48	@ 0x30
 8004eb8:	18e1      	adds	r1, r4, r3
 8004eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec4:	4422      	add	r2, r4
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ecc:	e7c2      	b.n	8004e54 <_printf_common+0x58>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	47c8      	blx	r9
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d0e6      	beq.n	8004eaa <_printf_common+0xae>
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7d9      	b.n	8004e94 <_printf_common+0x98>

08004ee0 <_printf_i>:
 8004ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	7e0f      	ldrb	r7, [r1, #24]
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	2f78      	cmp	r7, #120	@ 0x78
 8004eea:	4680      	mov	r8, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	469a      	mov	sl, r3
 8004ef0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ef6:	d807      	bhi.n	8004f08 <_printf_i+0x28>
 8004ef8:	2f62      	cmp	r7, #98	@ 0x62
 8004efa:	d80a      	bhi.n	8004f12 <_printf_i+0x32>
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	f000 80d3 	beq.w	80050a8 <_printf_i+0x1c8>
 8004f02:	2f58      	cmp	r7, #88	@ 0x58
 8004f04:	f000 80ba 	beq.w	800507c <_printf_i+0x19c>
 8004f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f10:	e03a      	b.n	8004f88 <_printf_i+0xa8>
 8004f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f16:	2b15      	cmp	r3, #21
 8004f18:	d8f6      	bhi.n	8004f08 <_printf_i+0x28>
 8004f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f20 <_printf_i+0x40>)
 8004f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f09 	.word	0x08004f09
 8004f2c:	08004f09 	.word	0x08004f09
 8004f30:	08004f09 	.word	0x08004f09
 8004f34:	08004f09 	.word	0x08004f09
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f09 	.word	0x08004f09
 8004f40:	08004f09 	.word	0x08004f09
 8004f44:	08004f09 	.word	0x08004f09
 8004f48:	08004f09 	.word	0x08004f09
 8004f4c:	0800508f 	.word	0x0800508f
 8004f50:	08004fb7 	.word	0x08004fb7
 8004f54:	08005049 	.word	0x08005049
 8004f58:	08004f09 	.word	0x08004f09
 8004f5c:	08004f09 	.word	0x08004f09
 8004f60:	080050b1 	.word	0x080050b1
 8004f64:	08004f09 	.word	0x08004f09
 8004f68:	08004fb7 	.word	0x08004fb7
 8004f6c:	08004f09 	.word	0x08004f09
 8004f70:	08004f09 	.word	0x08004f09
 8004f74:	08005051 	.word	0x08005051
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6032      	str	r2, [r6, #0]
 8004f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e09e      	b.n	80050ca <_printf_i+0x1ea>
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	6031      	str	r1, [r6, #0]
 8004f94:	0606      	lsls	r6, r0, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xbc>
 8004f98:	681d      	ldr	r5, [r3, #0]
 8004f9a:	e003      	b.n	8004fa4 <_printf_i+0xc4>
 8004f9c:	0645      	lsls	r5, r0, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xb8>
 8004fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	da03      	bge.n	8004fb0 <_printf_i+0xd0>
 8004fa8:	232d      	movs	r3, #45	@ 0x2d
 8004faa:	426d      	negs	r5, r5
 8004fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	4859      	ldr	r0, [pc, #356]	@ (8005118 <_printf_i+0x238>)
 8004fb4:	e011      	b.n	8004fda <_printf_i+0xfa>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	0608      	lsls	r0, r1, #24
 8004fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc0:	d402      	bmi.n	8004fc8 <_printf_i+0xe8>
 8004fc2:	0649      	lsls	r1, r1, #25
 8004fc4:	bf48      	it	mi
 8004fc6:	b2ad      	uxthmi	r5, r5
 8004fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fca:	6033      	str	r3, [r6, #0]
 8004fcc:	bf14      	ite	ne
 8004fce:	230a      	movne	r3, #10
 8004fd0:	2308      	moveq	r3, #8
 8004fd2:	4851      	ldr	r0, [pc, #324]	@ (8005118 <_printf_i+0x238>)
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fda:	6866      	ldr	r6, [r4, #4]
 8004fdc:	2e00      	cmp	r6, #0
 8004fde:	bfa8      	it	ge
 8004fe0:	6821      	ldrge	r1, [r4, #0]
 8004fe2:	60a6      	str	r6, [r4, #8]
 8004fe4:	bfa4      	itt	ge
 8004fe6:	f021 0104 	bicge.w	r1, r1, #4
 8004fea:	6021      	strge	r1, [r4, #0]
 8004fec:	b90d      	cbnz	r5, 8004ff2 <_printf_i+0x112>
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d04b      	beq.n	800508a <_printf_i+0x1aa>
 8004ff2:	4616      	mov	r6, r2
 8004ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8004ffc:	5dc7      	ldrb	r7, [r0, r7]
 8004ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005002:	462f      	mov	r7, r5
 8005004:	42bb      	cmp	r3, r7
 8005006:	460d      	mov	r5, r1
 8005008:	d9f4      	bls.n	8004ff4 <_printf_i+0x114>
 800500a:	2b08      	cmp	r3, #8
 800500c:	d10b      	bne.n	8005026 <_printf_i+0x146>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	07df      	lsls	r7, r3, #31
 8005012:	d508      	bpl.n	8005026 <_printf_i+0x146>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	6861      	ldr	r1, [r4, #4]
 8005018:	4299      	cmp	r1, r3
 800501a:	bfde      	ittt	le
 800501c:	2330      	movle	r3, #48	@ 0x30
 800501e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005026:	1b92      	subs	r2, r2, r6
 8005028:	6122      	str	r2, [r4, #16]
 800502a:	464b      	mov	r3, r9
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f8cd a000 	str.w	sl, [sp]
 8005034:	aa03      	add	r2, sp, #12
 8005036:	f7ff fee1 	bl	8004dfc <_printf_common>
 800503a:	3001      	adds	r0, #1
 800503c:	d14a      	bne.n	80050d4 <_printf_i+0x1f4>
 800503e:	f04f 30ff 	mov.w	r0, #4294967295
 8005042:	b004      	add	sp, #16
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	f043 0320 	orr.w	r3, r3, #32
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	2778      	movs	r7, #120	@ 0x78
 8005052:	4832      	ldr	r0, [pc, #200]	@ (800511c <_printf_i+0x23c>)
 8005054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	6831      	ldr	r1, [r6, #0]
 800505c:	061f      	lsls	r7, r3, #24
 800505e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005062:	d402      	bmi.n	800506a <_printf_i+0x18a>
 8005064:	065f      	lsls	r7, r3, #25
 8005066:	bf48      	it	mi
 8005068:	b2ad      	uxthmi	r5, r5
 800506a:	6031      	str	r1, [r6, #0]
 800506c:	07d9      	lsls	r1, r3, #31
 800506e:	bf44      	itt	mi
 8005070:	f043 0320 	orrmi.w	r3, r3, #32
 8005074:	6023      	strmi	r3, [r4, #0]
 8005076:	b11d      	cbz	r5, 8005080 <_printf_i+0x1a0>
 8005078:	2310      	movs	r3, #16
 800507a:	e7ab      	b.n	8004fd4 <_printf_i+0xf4>
 800507c:	4826      	ldr	r0, [pc, #152]	@ (8005118 <_printf_i+0x238>)
 800507e:	e7e9      	b.n	8005054 <_printf_i+0x174>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	e7f6      	b.n	8005078 <_printf_i+0x198>
 800508a:	4616      	mov	r6, r2
 800508c:	e7bd      	b.n	800500a <_printf_i+0x12a>
 800508e:	6833      	ldr	r3, [r6, #0]
 8005090:	6825      	ldr	r5, [r4, #0]
 8005092:	1d18      	adds	r0, r3, #4
 8005094:	6961      	ldr	r1, [r4, #20]
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	062e      	lsls	r6, r5, #24
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	d501      	bpl.n	80050a2 <_printf_i+0x1c2>
 800509e:	6019      	str	r1, [r3, #0]
 80050a0:	e002      	b.n	80050a8 <_printf_i+0x1c8>
 80050a2:	0668      	lsls	r0, r5, #25
 80050a4:	d5fb      	bpl.n	800509e <_printf_i+0x1be>
 80050a6:	8019      	strh	r1, [r3, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	4616      	mov	r6, r2
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	e7bc      	b.n	800502a <_printf_i+0x14a>
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	2100      	movs	r1, #0
 80050b4:	1d1a      	adds	r2, r3, #4
 80050b6:	6032      	str	r2, [r6, #0]
 80050b8:	681e      	ldr	r6, [r3, #0]
 80050ba:	6862      	ldr	r2, [r4, #4]
 80050bc:	4630      	mov	r0, r6
 80050be:	f000 f96b 	bl	8005398 <memchr>
 80050c2:	b108      	cbz	r0, 80050c8 <_printf_i+0x1e8>
 80050c4:	1b80      	subs	r0, r0, r6
 80050c6:	6060      	str	r0, [r4, #4]
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	2300      	movs	r3, #0
 80050ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d2:	e7aa      	b.n	800502a <_printf_i+0x14a>
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	47d0      	blx	sl
 80050de:	3001      	adds	r0, #1
 80050e0:	d0ad      	beq.n	800503e <_printf_i+0x15e>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	079b      	lsls	r3, r3, #30
 80050e6:	d413      	bmi.n	8005110 <_printf_i+0x230>
 80050e8:	68e0      	ldr	r0, [r4, #12]
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	4298      	cmp	r0, r3
 80050ee:	bfb8      	it	lt
 80050f0:	4618      	movlt	r0, r3
 80050f2:	e7a6      	b.n	8005042 <_printf_i+0x162>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4632      	mov	r2, r6
 80050f8:	4649      	mov	r1, r9
 80050fa:	4640      	mov	r0, r8
 80050fc:	47d0      	blx	sl
 80050fe:	3001      	adds	r0, #1
 8005100:	d09d      	beq.n	800503e <_printf_i+0x15e>
 8005102:	3501      	adds	r5, #1
 8005104:	68e3      	ldr	r3, [r4, #12]
 8005106:	9903      	ldr	r1, [sp, #12]
 8005108:	1a5b      	subs	r3, r3, r1
 800510a:	42ab      	cmp	r3, r5
 800510c:	dcf2      	bgt.n	80050f4 <_printf_i+0x214>
 800510e:	e7eb      	b.n	80050e8 <_printf_i+0x208>
 8005110:	2500      	movs	r5, #0
 8005112:	f104 0619 	add.w	r6, r4, #25
 8005116:	e7f5      	b.n	8005104 <_printf_i+0x224>
 8005118:	080054c7 	.word	0x080054c7
 800511c:	080054d8 	.word	0x080054d8

08005120 <__sflush_r>:
 8005120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	0716      	lsls	r6, r2, #28
 8005128:	4605      	mov	r5, r0
 800512a:	460c      	mov	r4, r1
 800512c:	d454      	bmi.n	80051d8 <__sflush_r+0xb8>
 800512e:	684b      	ldr	r3, [r1, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	dc02      	bgt.n	800513a <__sflush_r+0x1a>
 8005134:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd48      	ble.n	80051cc <__sflush_r+0xac>
 800513a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800513c:	2e00      	cmp	r6, #0
 800513e:	d045      	beq.n	80051cc <__sflush_r+0xac>
 8005140:	2300      	movs	r3, #0
 8005142:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005146:	682f      	ldr	r7, [r5, #0]
 8005148:	6a21      	ldr	r1, [r4, #32]
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	d030      	beq.n	80051b0 <__sflush_r+0x90>
 800514e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	0759      	lsls	r1, r3, #29
 8005154:	d505      	bpl.n	8005162 <__sflush_r+0x42>
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800515c:	b10b      	cbz	r3, 8005162 <__sflush_r+0x42>
 800515e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005160:	1ad2      	subs	r2, r2, r3
 8005162:	2300      	movs	r3, #0
 8005164:	4628      	mov	r0, r5
 8005166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005168:	6a21      	ldr	r1, [r4, #32]
 800516a:	47b0      	blx	r6
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	d106      	bne.n	8005180 <__sflush_r+0x60>
 8005172:	6829      	ldr	r1, [r5, #0]
 8005174:	291d      	cmp	r1, #29
 8005176:	d82b      	bhi.n	80051d0 <__sflush_r+0xb0>
 8005178:	4a28      	ldr	r2, [pc, #160]	@ (800521c <__sflush_r+0xfc>)
 800517a:	410a      	asrs	r2, r1
 800517c:	07d6      	lsls	r6, r2, #31
 800517e:	d427      	bmi.n	80051d0 <__sflush_r+0xb0>
 8005180:	2200      	movs	r2, #0
 8005182:	6062      	str	r2, [r4, #4]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	04d9      	lsls	r1, r3, #19
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	d504      	bpl.n	8005196 <__sflush_r+0x76>
 800518c:	1c42      	adds	r2, r0, #1
 800518e:	d101      	bne.n	8005194 <__sflush_r+0x74>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b903      	cbnz	r3, 8005196 <__sflush_r+0x76>
 8005194:	6560      	str	r0, [r4, #84]	@ 0x54
 8005196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005198:	602f      	str	r7, [r5, #0]
 800519a:	b1b9      	cbz	r1, 80051cc <__sflush_r+0xac>
 800519c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051a0:	4299      	cmp	r1, r3
 80051a2:	d002      	beq.n	80051aa <__sflush_r+0x8a>
 80051a4:	4628      	mov	r0, r5
 80051a6:	f7ff fbf3 	bl	8004990 <_free_r>
 80051aa:	2300      	movs	r3, #0
 80051ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ae:	e00d      	b.n	80051cc <__sflush_r+0xac>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b0      	blx	r6
 80051b6:	4602      	mov	r2, r0
 80051b8:	1c50      	adds	r0, r2, #1
 80051ba:	d1c9      	bne.n	8005150 <__sflush_r+0x30>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0c6      	beq.n	8005150 <__sflush_r+0x30>
 80051c2:	2b1d      	cmp	r3, #29
 80051c4:	d001      	beq.n	80051ca <__sflush_r+0xaa>
 80051c6:	2b16      	cmp	r3, #22
 80051c8:	d11d      	bne.n	8005206 <__sflush_r+0xe6>
 80051ca:	602f      	str	r7, [r5, #0]
 80051cc:	2000      	movs	r0, #0
 80051ce:	e021      	b.n	8005214 <__sflush_r+0xf4>
 80051d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	e01a      	b.n	800520e <__sflush_r+0xee>
 80051d8:	690f      	ldr	r7, [r1, #16]
 80051da:	2f00      	cmp	r7, #0
 80051dc:	d0f6      	beq.n	80051cc <__sflush_r+0xac>
 80051de:	0793      	lsls	r3, r2, #30
 80051e0:	bf18      	it	ne
 80051e2:	2300      	movne	r3, #0
 80051e4:	680e      	ldr	r6, [r1, #0]
 80051e6:	bf08      	it	eq
 80051e8:	694b      	ldreq	r3, [r1, #20]
 80051ea:	1bf6      	subs	r6, r6, r7
 80051ec:	600f      	str	r7, [r1, #0]
 80051ee:	608b      	str	r3, [r1, #8]
 80051f0:	2e00      	cmp	r6, #0
 80051f2:	ddeb      	ble.n	80051cc <__sflush_r+0xac>
 80051f4:	4633      	mov	r3, r6
 80051f6:	463a      	mov	r2, r7
 80051f8:	4628      	mov	r0, r5
 80051fa:	6a21      	ldr	r1, [r4, #32]
 80051fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005200:	47e0      	blx	ip
 8005202:	2800      	cmp	r0, #0
 8005204:	dc07      	bgt.n	8005216 <__sflush_r+0xf6>
 8005206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005216:	4407      	add	r7, r0
 8005218:	1a36      	subs	r6, r6, r0
 800521a:	e7e9      	b.n	80051f0 <__sflush_r+0xd0>
 800521c:	dfbffffe 	.word	0xdfbffffe

08005220 <_fflush_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	690b      	ldr	r3, [r1, #16]
 8005224:	4605      	mov	r5, r0
 8005226:	460c      	mov	r4, r1
 8005228:	b913      	cbnz	r3, 8005230 <_fflush_r+0x10>
 800522a:	2500      	movs	r5, #0
 800522c:	4628      	mov	r0, r5
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	b118      	cbz	r0, 800523a <_fflush_r+0x1a>
 8005232:	6a03      	ldr	r3, [r0, #32]
 8005234:	b90b      	cbnz	r3, 800523a <_fflush_r+0x1a>
 8005236:	f7ff f99f 	bl	8004578 <__sinit>
 800523a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f3      	beq.n	800522a <_fflush_r+0xa>
 8005242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005244:	07d0      	lsls	r0, r2, #31
 8005246:	d404      	bmi.n	8005252 <_fflush_r+0x32>
 8005248:	0599      	lsls	r1, r3, #22
 800524a:	d402      	bmi.n	8005252 <_fflush_r+0x32>
 800524c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800524e:	f7ff fb9c 	bl	800498a <__retarget_lock_acquire_recursive>
 8005252:	4628      	mov	r0, r5
 8005254:	4621      	mov	r1, r4
 8005256:	f7ff ff63 	bl	8005120 <__sflush_r>
 800525a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800525c:	4605      	mov	r5, r0
 800525e:	07da      	lsls	r2, r3, #31
 8005260:	d4e4      	bmi.n	800522c <_fflush_r+0xc>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	059b      	lsls	r3, r3, #22
 8005266:	d4e1      	bmi.n	800522c <_fflush_r+0xc>
 8005268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800526a:	f7ff fb8f 	bl	800498c <__retarget_lock_release_recursive>
 800526e:	e7dd      	b.n	800522c <_fflush_r+0xc>

08005270 <__swhatbuf_r>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	460c      	mov	r4, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	4615      	mov	r5, r2
 800527a:	2900      	cmp	r1, #0
 800527c:	461e      	mov	r6, r3
 800527e:	b096      	sub	sp, #88	@ 0x58
 8005280:	da0c      	bge.n	800529c <__swhatbuf_r+0x2c>
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	2100      	movs	r1, #0
 8005286:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800528a:	bf14      	ite	ne
 800528c:	2340      	movne	r3, #64	@ 0x40
 800528e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005292:	2000      	movs	r0, #0
 8005294:	6031      	str	r1, [r6, #0]
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	b016      	add	sp, #88	@ 0x58
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	466a      	mov	r2, sp
 800529e:	f000 f849 	bl	8005334 <_fstat_r>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	dbed      	blt.n	8005282 <__swhatbuf_r+0x12>
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052b0:	4259      	negs	r1, r3
 80052b2:	4159      	adcs	r1, r3
 80052b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b8:	e7eb      	b.n	8005292 <__swhatbuf_r+0x22>

080052ba <__smakebuf_r>:
 80052ba:	898b      	ldrh	r3, [r1, #12]
 80052bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052be:	079d      	lsls	r5, r3, #30
 80052c0:	4606      	mov	r6, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	d507      	bpl.n	80052d6 <__smakebuf_r+0x1c>
 80052c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	2301      	movs	r3, #1
 80052d0:	6163      	str	r3, [r4, #20]
 80052d2:	b003      	add	sp, #12
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	466a      	mov	r2, sp
 80052d8:	ab01      	add	r3, sp, #4
 80052da:	f7ff ffc9 	bl	8005270 <__swhatbuf_r>
 80052de:	9f00      	ldr	r7, [sp, #0]
 80052e0:	4605      	mov	r5, r0
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff fbbd 	bl	8004a64 <_malloc_r>
 80052ea:	b948      	cbnz	r0, 8005300 <__smakebuf_r+0x46>
 80052ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f0:	059a      	lsls	r2, r3, #22
 80052f2:	d4ee      	bmi.n	80052d2 <__smakebuf_r+0x18>
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	e7e2      	b.n	80052c6 <__smakebuf_r+0xc>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	6020      	str	r0, [r4, #0]
 8005310:	b15b      	cbz	r3, 800532a <__smakebuf_r+0x70>
 8005312:	4630      	mov	r0, r6
 8005314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005318:	f000 f81e 	bl	8005358 <_isatty_r>
 800531c:	b128      	cbz	r0, 800532a <__smakebuf_r+0x70>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	431d      	orrs	r5, r3
 800532e:	81a5      	strh	r5, [r4, #12]
 8005330:	e7cf      	b.n	80052d2 <__smakebuf_r+0x18>
	...

08005334 <_fstat_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	2300      	movs	r3, #0
 8005338:	4d06      	ldr	r5, [pc, #24]	@ (8005354 <_fstat_r+0x20>)
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	f7fb fefd 	bl	8001140 <_fstat>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d102      	bne.n	8005350 <_fstat_r+0x1c>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	b103      	cbz	r3, 8005350 <_fstat_r+0x1c>
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	bd38      	pop	{r3, r4, r5, pc}
 8005352:	bf00      	nop
 8005354:	200004dc 	.word	0x200004dc

08005358 <_isatty_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	2300      	movs	r3, #0
 800535c:	4d05      	ldr	r5, [pc, #20]	@ (8005374 <_isatty_r+0x1c>)
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fb fefb 	bl	800115e <_isatty>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_isatty_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_isatty_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200004dc 	.word	0x200004dc

08005378 <_sbrk_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	2300      	movs	r3, #0
 800537c:	4d05      	ldr	r5, [pc, #20]	@ (8005394 <_sbrk_r+0x1c>)
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fb ff02 	bl	800118c <_sbrk>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_sbrk_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_sbrk_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200004dc 	.word	0x200004dc

08005398 <memchr>:
 8005398:	4603      	mov	r3, r0
 800539a:	b510      	push	{r4, lr}
 800539c:	b2c9      	uxtb	r1, r1
 800539e:	4402      	add	r2, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	d101      	bne.n	80053aa <memchr+0x12>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e003      	b.n	80053b2 <memchr+0x1a>
 80053aa:	7804      	ldrb	r4, [r0, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	428c      	cmp	r4, r1
 80053b0:	d1f6      	bne.n	80053a0 <memchr+0x8>
 80053b2:	bd10      	pop	{r4, pc}

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
